// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bonus
#include <Bonus.h>
#endif
#ifndef INCLUDED_BonusType
#include <BonusType.h>
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Grenade
#include <Grenade.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b245e5f9face90c2_17_new,"Bonus","new",0x2ae722f1,"Bonus.new","Bonus.hx",17,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_29_drawHitBox,"Bonus","drawHitBox",0xc4c0b22b,"Bonus.drawHitBox","Bonus.hx",29,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_39_fall,"Bonus","fall",0x5a0aa8ca,"Bonus.fall","Bonus.hx",39,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_73_checkCollisionWithPlayer,"Bonus","checkCollisionWithPlayer",0x6cda9700,"Bonus.checkCollisionWithPlayer","Bonus.hx",73,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_84_doBonusSlow,"Bonus","doBonusSlow",0x3e7836c6,"Bonus.doBonusSlow","Bonus.hx",84,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_213_get_bonusType,"Bonus","get_bonusType",0xe04726a1,"Bonus.get_bonusType","Bonus.hx",213,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_217_get_counter,"Bonus","get_counter",0xe745daa4,"Bonus.get_counter","Bonus.hx",217,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_10_boot,"Bonus","boot",0x57707081,"Bonus.boot","Bonus.hx",10,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_11_boot,"Bonus","boot",0x57707081,"Bonus.boot","Bonus.hx",11,0x6c1a459f)
HX_LOCAL_STACK_FRAME(_hx_pos_b245e5f9face90c2_12_boot,"Bonus","boot",0x57707081,"Bonus.boot","Bonus.hx",12,0x6c1a459f)

void Bonus_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b245e5f9face90c2_17_new)
HXLINE(  18)		super::__construct();
HXLINE(  19)		if ((::Math_obj::random() < ((Float)0.5))) {
HXLINE(  20)			::Bonus_obj::bonusType = ::BonusType_obj::destroy_dyn();
            		}
            		else {
HXLINE(  22)			::Bonus_obj::bonusType = ::BonusType_obj::slow_dyn();
            		}
HXLINE(  23)		::Bonus_obj::counter = 0;
HXLINE(  24)		this->hitBox =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-12.5),((Float)-12.5),25,25);
HXLINE(  25)		this->drawHitBox();
            	}

Dynamic Bonus_obj::__CreateEmpty() { return new Bonus_obj; }

void *Bonus_obj::_hx_vtable = 0;

Dynamic Bonus_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bonus_obj > _hx_result = new Bonus_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Bonus_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x3882f6a4 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x4a24d67f;
		}
	}
}

void Bonus_obj::drawHitBox(){
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_29_drawHitBox)
HXLINE(  30)		if (hx::IsEq( ::Bonus_obj::get_bonusType(),::BonusType_obj::slow_dyn() )) {
HXLINE(  31)			this->get_graphics()->lineStyle(3,65535,null(),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(  33)			this->get_graphics()->lineStyle(3,0,null(),null(),null(),null(),null(),null());
            		}
HXLINE(  35)		 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN(  35)		Float _hx_tmp1 = (-(this->get_hitBox()->width) / ( (Float)(2) ));
HXDLIN(  35)		Float _hx_tmp2 = (-(this->get_hitBox()->height) / ( (Float)(2) ));
HXDLIN(  35)		Float _hx_tmp3 = this->get_hitBox()->width;
HXDLIN(  35)		_hx_tmp->drawRect(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_hitBox()->height);
HXLINE(  36)		this->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bonus_obj,drawHitBox,(void))

void Bonus_obj::fall(::Array< ::Dynamic> level){
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_39_fall)
HXLINE(  40)		Float tileWidth = (( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(20) ));
HXLINE(  41)		Float tileHeight = (( (Float)(::Main_obj::sizeHeight) ) / ( (Float)(15) ));
HXLINE(  42)		{
HXLINE(  42)			 ::Bonus _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  42)			Float _hx_tmp = _g->get_y();
HXDLIN(  42)			_g->set_y((_hx_tmp + this->speedY));
            		}
HXLINE(  43)		 ::Bonus _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  43)		_hx_tmp1->speedY = (_hx_tmp1->speedY + this->gravity);
HXLINE(  44)		{
HXLINE(  44)			int _g1 = 0;
HXDLIN(  44)			int _g11 = level->length;
HXDLIN(  44)			while((_g1 < _g11)){
HXLINE(  44)				_g1 = (_g1 + 1);
HXDLIN(  44)				int i = (_g1 - 1);
HXLINE(  46)				{
HXLINE(  46)					int _g2 = 0;
HXDLIN(  46)					int _g12 = level->__get(i).StaticCast< ::Array< int > >()->length;
HXDLIN(  46)					while((_g2 < _g12)){
HXLINE(  46)						_g2 = (_g2 + 1);
HXDLIN(  46)						int j = (_g2 - 1);
HXLINE(  48)						if (this->checkCollisionWithTile(level->__get(i).StaticCast< ::Array< int > >()->__get(j),(( (Float)(j) ) * tileWidth),(( (Float)(i) ) * tileHeight))) {
HXLINE(  50)							if ((::Math_obj::abs(this->speedY) <= ((Float)2.0))) {
HXLINE(  52)								this->set_y(((( (Float)(i) ) * tileHeight) - (this->get_hitBox()->height / ( (Float)(2) ))));
HXLINE(  53)								this->speedY = ((Float)0.0);
            							}
            							else {
HXLINE(  56)								this->speedY = -(::Math_obj::abs((this->speedY * ((Float)0.6))));
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bonus_obj,fall,(void))

bool Bonus_obj::checkCollisionWithPlayer( ::Player player){
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_73_checkCollisionWithPlayer)
HXDLIN(  73)		bool _hx_tmp;
HXDLIN(  73)		bool _hx_tmp1;
HXDLIN(  73)		bool _hx_tmp2;
HXDLIN(  73)		Float _hx_tmp3 = this->get_x();
HXDLIN(  73)		Float _hx_tmp4 = (_hx_tmp3 + (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN(  73)		Float _hx_tmp5 = player->get_x();
HXDLIN(  73)		if ((_hx_tmp4 > (_hx_tmp5 - (player->get_hitBox()->width / ( (Float)(2) ))))) {
HXDLIN(  73)			Float _hx_tmp6 = this->get_x();
HXDLIN(  73)			Float _hx_tmp7 = (_hx_tmp6 - (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN(  73)			Float _hx_tmp8 = player->get_x();
HXDLIN(  73)			_hx_tmp2 = (_hx_tmp7 < (_hx_tmp8 + (player->get_width() / ( (Float)(2) ))));
            		}
            		else {
HXDLIN(  73)			_hx_tmp2 = false;
            		}
HXDLIN(  73)		if (_hx_tmp2) {
HXLINE(  74)			Float _hx_tmp9 = this->get_y();
HXDLIN(  74)			Float _hx_tmp10 = (_hx_tmp9 + (this->get_hitBox()->height / ( (Float)(2) )));
HXDLIN(  74)			Float _hx_tmp11 = player->get_y();
HXLINE(  73)			_hx_tmp1 = (_hx_tmp10 > (_hx_tmp11 - (player->get_height() / ( (Float)(2) ))));
            		}
            		else {
HXDLIN(  73)			_hx_tmp1 = false;
            		}
HXDLIN(  73)		if (_hx_tmp1) {
HXLINE(  74)			Float _hx_tmp12 = this->get_y();
HXDLIN(  74)			Float _hx_tmp13 = (_hx_tmp12 - (this->get_hitBox()->height / ( (Float)(2) )));
HXDLIN(  74)			Float _hx_tmp14 = player->get_y();
HXLINE(  73)			_hx_tmp = (_hx_tmp13 < (_hx_tmp14 + (player->get_height() / ( (Float)(2) ))));
            		}
            		else {
HXDLIN(  73)			_hx_tmp = false;
            		}
HXDLIN(  73)		if (_hx_tmp) {
HXLINE(  76)			::Bonus_obj::bonusIsUsed = true;
HXLINE(  77)			return true;
            		}
            		else {
HXLINE(  80)			return false;
            		}
HXLINE(  73)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bonus_obj,checkCollisionWithPlayer,return )

int Bonus_obj::counter;

bool Bonus_obj::bonusIsUsed;

bool Bonus_obj::haveBonus;

 ::BonusType Bonus_obj::bonusType;

void Bonus_obj::doBonusSlow( ::Player player,::Array< ::Dynamic> enemies,::Array< ::Dynamic> deadEnemies,::Array< ::Dynamic> deadEnemiesWithGun,::Array< ::Dynamic> deadBirds,::Array< ::Dynamic> bullets,::Array< ::Dynamic> enemyBullets, ::Grenade grenade){
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_84_doBonusSlow)
HXLINE(  85)		if ((::Bonus_obj::counter == 0)) {
HXLINE(  87)			 ::Player player1 = player;
HXDLIN(  87)			player1->speedX = (player1->speedX * ((Float)0.5));
HXLINE(  88)			 ::Player player2 = player;
HXDLIN(  88)			player2->speedY = (player2->speedY * ((Float)0.5));
HXLINE(  89)			 ::Player player3 = player;
HXDLIN(  89)			player3->gravity = (player3->gravity * ((Float)0.25));
HXLINE(  90)			 ::Dynamic _hx_tmp = hx::ClassOf< ::Game >();
HXDLIN(  90)			::Game_obj::jumpPower = (::Game_obj::jumpPower * ((Float)0.50));
HXLINE(  91)			int b = 0;
HXLINE(  92)			while((b < bullets->length)){
HXLINE(  94)				Float _hx_tmp1 = (bullets->__get(b).StaticCast<  ::Bullet >()->get_speed() * ((Float)0.25));
HXDLIN(  94)				bullets->__get(b).StaticCast<  ::Bullet >()->set_speed(_hx_tmp1);
HXLINE(  95)				b = (b + 1);
            			}
HXLINE(  98)			b = 0;
HXLINE(  99)			while((b < enemyBullets->length)){
HXLINE( 101)				Float _hx_tmp2 = (enemyBullets->__get(b).StaticCast<  ::Bullet >()->get_speed() * ((Float)0.25));
HXDLIN( 101)				enemyBullets->__get(b).StaticCast<  ::Bullet >()->set_speed(_hx_tmp2);
HXLINE( 102)				b = (b + 1);
            			}
HXLINE( 105)			int e = 0;
HXLINE( 106)			while((e < enemies->length)){
HXLINE( 108)				 ::Enemy enemies1 = enemies->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 108)				enemies1->speedX = (enemies1->speedX * ((Float)0.25));
HXLINE( 109)				 ::Enemy enemies2 = enemies->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 109)				enemies2->speedY = (enemies2->speedY * ((Float)0.25));
HXLINE( 110)				 ::Enemy enemies3 = enemies->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 110)				enemies3->gravity = (enemies3->gravity * ((Float)0.25));
HXLINE( 111)				e = (e + 1);
            			}
HXLINE( 113)			e = 0;
HXLINE( 114)			while((e < deadEnemies->length)){
HXLINE( 116)				 ::Enemy deadEnemies1 = deadEnemies->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 116)				deadEnemies1->speedX = (deadEnemies1->speedX * ((Float)0.25));
HXLINE( 117)				 ::Enemy deadEnemies2 = deadEnemies->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 117)				deadEnemies2->speedY = (deadEnemies2->speedY * ((Float)0.25));
HXLINE( 118)				 ::Enemy deadEnemies3 = deadEnemies->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 118)				deadEnemies3->gravity = (deadEnemies3->gravity * ((Float)0.25));
HXLINE( 119)				e = (e + 1);
            			}
HXLINE( 121)			e = 0;
HXLINE( 122)			while((e < deadBirds->length)){
HXLINE( 124)				 ::Enemy deadBirds1 = deadBirds->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 124)				deadBirds1->speedX = (deadBirds1->speedX * ((Float)0.25));
HXLINE( 125)				 ::Enemy deadBirds2 = deadBirds->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 125)				deadBirds2->speedY = (deadBirds2->speedY * ((Float)0.25));
HXLINE( 126)				 ::Enemy deadBirds3 = deadBirds->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 126)				deadBirds3->gravity = (deadBirds3->gravity * ((Float)0.25));
HXLINE( 127)				e = (e + 1);
            			}
HXLINE( 129)			e = 0;
HXLINE( 130)			while((e < deadEnemiesWithGun->length)){
HXLINE( 132)				 ::Enemy deadEnemiesWithGun1 = deadEnemiesWithGun->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 132)				deadEnemiesWithGun1->speedX = (deadEnemiesWithGun1->speedX * ((Float)0.25));
HXLINE( 133)				 ::Enemy deadEnemiesWithGun2 = deadEnemiesWithGun->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 133)				deadEnemiesWithGun2->speedY = (deadEnemiesWithGun2->speedY * ((Float)0.25));
HXLINE( 134)				 ::Enemy deadEnemiesWithGun3 = deadEnemiesWithGun->__get(e).StaticCast<  ::Enemy >();
HXDLIN( 134)				deadEnemiesWithGun3->gravity = (deadEnemiesWithGun3->gravity * ((Float)0.25));
HXLINE( 135)				e = (e + 1);
            			}
HXLINE( 137)			if (hx::IsNotNull( grenade )) {
HXLINE( 139)				grenade->set_speedX((grenade->get_speedX() * ((Float)0.25)));
HXLINE( 140)				grenade->set_speedY((grenade->get_speedY() * ((Float)0.25)));
HXLINE( 141)				grenade->set_gravity((grenade->get_gravity() / ((Float)16.0)));
            			}
            		}
            		else {
HXLINE( 146)			int _hx_tmp3 = ::Bonus_obj::counter;
HXDLIN( 146)			if ((_hx_tmp3 >= (( (Float)(::Main_obj::get_FPS()) ) * ((Float)10.0)))) {
HXLINE( 148)				 ::Player player4 = player;
HXDLIN( 148)				player4->speedX = (player4->speedX * ((Float)2.0));
HXLINE( 149)				 ::Player player5 = player;
HXDLIN( 149)				player5->speedY = (player5->speedY * ((Float)2.0));
HXLINE( 150)				 ::Player player6 = player;
HXDLIN( 150)				player6->gravity = (player6->gravity / ((Float)0.25));
HXLINE( 151)				 ::Dynamic _hx_tmp4 = hx::ClassOf< ::Game >();
HXDLIN( 151)				::Game_obj::jumpPower = (::Game_obj::jumpPower / ((Float)0.50));
HXLINE( 152)				int b1 = 0;
HXLINE( 153)				while((b1 < bullets->length)){
HXLINE( 155)					Float _hx_tmp5 = (bullets->__get(b1).StaticCast<  ::Bullet >()->get_speed() / ((Float)0.25));
HXDLIN( 155)					bullets->__get(b1).StaticCast<  ::Bullet >()->set_speed(_hx_tmp5);
HXLINE( 156)					b1 = (b1 + 1);
            				}
HXLINE( 158)				b1 = 0;
HXLINE( 159)				while((b1 < enemyBullets->length)){
HXLINE( 161)					Float _hx_tmp6 = (enemyBullets->__get(b1).StaticCast<  ::Bullet >()->get_speed() / ((Float)0.25));
HXDLIN( 161)					enemyBullets->__get(b1).StaticCast<  ::Bullet >()->set_speed(_hx_tmp6);
HXLINE( 162)					b1 = (b1 + 1);
            				}
HXLINE( 164)				int e1 = 0;
HXLINE( 165)				while((e1 < enemies->length)){
HXLINE( 167)					 ::Enemy enemies4 = enemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 167)					enemies4->speedX = (enemies4->speedX / ((Float)0.25));
HXLINE( 168)					 ::Enemy enemies5 = enemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 168)					enemies5->speedY = (enemies5->speedY / ((Float)0.25));
HXLINE( 169)					 ::Enemy enemies6 = enemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 169)					enemies6->gravity = (enemies6->gravity / ((Float)0.25));
HXLINE( 170)					e1 = (e1 + 1);
            				}
HXLINE( 172)				e1 = 0;
HXLINE( 173)				while((e1 < deadEnemies->length)){
HXLINE( 175)					 ::Enemy deadEnemies4 = deadEnemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 175)					deadEnemies4->speedX = (deadEnemies4->speedX / ((Float)0.25));
HXLINE( 176)					 ::Enemy deadEnemies5 = deadEnemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 176)					deadEnemies5->speedY = (deadEnemies5->speedY / ((Float)0.25));
HXLINE( 177)					 ::Enemy deadEnemies6 = deadEnemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 177)					deadEnemies6->gravity = (deadEnemies6->gravity / ((Float)0.25));
HXLINE( 178)					e1 = (e1 + 1);
            				}
HXLINE( 180)				e1 = 0;
HXLINE( 181)				while((e1 < deadBirds->length)){
HXLINE( 183)					 ::Enemy deadEnemies7 = deadEnemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 183)					deadEnemies7->speedX = (deadEnemies7->speedX / ((Float)0.25));
HXLINE( 184)					 ::Enemy deadEnemies8 = deadEnemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 184)					deadEnemies8->speedY = (deadEnemies8->speedY / ((Float)0.25));
HXLINE( 185)					 ::Enemy deadEnemies9 = deadEnemies->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 185)					deadEnemies9->gravity = (deadEnemies9->gravity / ((Float)0.25));
HXLINE( 186)					e1 = (e1 + 1);
            				}
HXLINE( 188)				e1 = 0;
HXLINE( 189)				while((e1 < deadEnemiesWithGun->length)){
HXLINE( 191)					 ::Enemy deadEnemiesWithGun4 = deadEnemiesWithGun->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 191)					deadEnemiesWithGun4->speedX = (deadEnemiesWithGun4->speedX / ((Float)0.25));
HXLINE( 192)					 ::Enemy deadEnemiesWithGun5 = deadEnemiesWithGun->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 192)					deadEnemiesWithGun5->speedY = (deadEnemiesWithGun5->speedY / ((Float)0.25));
HXLINE( 193)					 ::Enemy deadEnemiesWithGun6 = deadEnemiesWithGun->__get(e1).StaticCast<  ::Enemy >();
HXDLIN( 193)					deadEnemiesWithGun6->gravity = (deadEnemiesWithGun6->gravity / ((Float)0.25));
HXLINE( 194)					e1 = (e1 + 1);
            				}
HXLINE( 196)				if (hx::IsNotNull( grenade )) {
HXLINE( 198)					grenade->set_speedX((grenade->get_speedX() / ((Float)0.25)));
HXLINE( 199)					grenade->set_speedY((grenade->get_speedY() / ((Float)0.25)));
HXLINE( 200)					grenade->set_gravity((grenade->get_gravity() * ((Float)16.0)));
            				}
HXLINE( 202)				::Bonus_obj::bonusIsUsed = false;
HXLINE( 203)				::Bonus_obj::haveBonus = false;
HXLINE( 204)				::Bonus_obj::counter = -1;
            			}
            		}
HXLINE( 208)		::Bonus_obj::counter++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Bonus_obj,doBonusSlow,(void))

 ::BonusType Bonus_obj::get_bonusType(){
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_213_get_bonusType)
HXDLIN( 213)		return ::Bonus_obj::bonusType;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Bonus_obj,get_bonusType,return )

int Bonus_obj::get_counter(){
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_217_get_counter)
HXDLIN( 217)		return ::Bonus_obj::counter;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Bonus_obj,get_counter,return )


hx::ObjectPtr< Bonus_obj > Bonus_obj::__new() {
	hx::ObjectPtr< Bonus_obj > __this = new Bonus_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Bonus_obj > Bonus_obj::__alloc(hx::Ctx *_hx_ctx) {
	Bonus_obj *__this = (Bonus_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bonus_obj), true, "Bonus"));
	*(void **)__this = Bonus_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Bonus_obj::Bonus_obj()
{
}

hx::Val Bonus_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fall") ) { return hx::Val( fall_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawHitBox") ) { return hx::Val( drawHitBox_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"checkCollisionWithPlayer") ) { return hx::Val( checkCollisionWithPlayer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Bonus_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"counter") ) { outValue = ( counter ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"haveBonus") ) { outValue = ( haveBonus ); return true; }
		if (HX_FIELD_EQ(inName,"bonusType") ) { outValue = ( inCallProp == hx::paccAlways ? get_bonusType() : bonusType ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bonusIsUsed") ) { outValue = ( bonusIsUsed ); return true; }
		if (HX_FIELD_EQ(inName,"doBonusSlow") ) { outValue = doBonusSlow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_counter") ) { outValue = get_counter_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_bonusType") ) { outValue = get_bonusType_dyn(); return true; }
	}
	return false;
}

bool Bonus_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"counter") ) { counter=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"haveBonus") ) { haveBonus=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"bonusType") ) { bonusType=ioValue.Cast<  ::BonusType >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bonusIsUsed") ) { bonusIsUsed=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Bonus_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Bonus_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Bonus_obj::counter,HX_("counter",fc,ae,59,1d)},
	{hx::fsBool,(void *) &Bonus_obj::bonusIsUsed,HX_("bonusIsUsed",46,73,05,cb)},
	{hx::fsBool,(void *) &Bonus_obj::haveBonus,HX_("haveBonus",17,eb,44,35)},
	{hx::fsObject /*  ::BonusType */ ,(void *) &Bonus_obj::bonusType,HX_("bonusType",f9,c0,3a,a2)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Bonus_obj_sMemberFields[] = {
	HX_("drawHitBox",9c,20,d3,98),
	HX_("fall",7b,bc,b5,43),
	HX_("checkCollisionWithPlayer",31,09,23,5e),
	::String(null()) };

static void Bonus_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Bonus_obj::counter,"counter");
	HX_MARK_MEMBER_NAME(Bonus_obj::bonusIsUsed,"bonusIsUsed");
	HX_MARK_MEMBER_NAME(Bonus_obj::haveBonus,"haveBonus");
	HX_MARK_MEMBER_NAME(Bonus_obj::bonusType,"bonusType");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Bonus_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Bonus_obj::counter,"counter");
	HX_VISIT_MEMBER_NAME(Bonus_obj::bonusIsUsed,"bonusIsUsed");
	HX_VISIT_MEMBER_NAME(Bonus_obj::haveBonus,"haveBonus");
	HX_VISIT_MEMBER_NAME(Bonus_obj::bonusType,"bonusType");
};

#endif

hx::Class Bonus_obj::__mClass;

static ::String Bonus_obj_sStaticFields[] = {
	HX_("counter",fc,ae,59,1d),
	HX_("bonusIsUsed",46,73,05,cb),
	HX_("haveBonus",17,eb,44,35),
	HX_("bonusType",f9,c0,3a,a2),
	HX_("doBonusSlow",35,6b,86,fa),
	HX_("get_bonusType",d0,94,9e,63),
	HX_("get_counter",13,0f,54,a3),
	::String(null())
};

void Bonus_obj::__register()
{
	Bonus_obj _hx_dummy;
	Bonus_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Bonus",7f,d6,24,4a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Bonus_obj::__GetStatic;
	__mClass->mSetStaticField = &Bonus_obj::__SetStatic;
	__mClass->mMarkFunc = Bonus_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Bonus_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bonus_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bonus_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Bonus_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bonus_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bonus_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Bonus_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_10_boot)
HXDLIN(  10)		counter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_11_boot)
HXDLIN(  11)		bonusIsUsed = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b245e5f9face90c2_12_boot)
HXDLIN(  12)		haveBonus = false;
            	}
}

