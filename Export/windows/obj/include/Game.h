// Generated by Haxe 4.0.1
#ifndef INCLUDED_Game
#define INCLUDED_Game

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(BackGround)
HX_DECLARE_CLASS0(Bonus)
HX_DECLARE_CLASS0(Bullet)
HX_DECLARE_CLASS0(Button)
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(Game)
HX_DECLARE_CLASS0(GameLevel)
HX_DECLARE_CLASS0(Grenade)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,text,TextField)



class HXCPP_CLASS_ATTRIBUTES Game_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Game_obj OBJ_;
		Game_obj();

	public:
		enum { _hx_ClassId = 0x2f382012 };

		void __construct(int width,int height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Game")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Game"); }
		static hx::ObjectPtr< Game_obj > __new(int width,int height);
		static hx::ObjectPtr< Game_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Game_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Game",12,20,38,2f); }

		static void __boot();
		static bool haveCollision;
		static Float jumpPower;
		int sizeWidth;
		int sizeHeight;
		 ::BackGround backGround;
		 ::Button quitButton;
		bool quitButtonIsPressed;
		bool pauseIsPressed;
		 ::GameLevel gameLevel;
		 ::Player player;
		bool gameIsOver;
		 ::Bonus bonus;
		 ::openfl::display::Sprite bonusIndicator;
		int gamePoints;
		 ::openfl::text::TextField pointsField;
		::Array< ::Dynamic> bullets;
		::Array< ::Dynamic> spentBullets;
		::Array< ::Dynamic> enemyBullets;
		::Array< ::Dynamic> spentEnemyBullets;
		 ::Grenade grenade;
		::Array< ::Dynamic> enemies;
		::Array< ::Dynamic> deadEnemies;
		::Array< ::Dynamic> deadEnemiesWithGun;
		::Array< ::Dynamic> deadBirds;
		int maxEnemies;
		Float spawnDelay;
		int counter;
		 ::openfl::display::Sprite healthIndicator;
		 ::openfl::display::Sprite pauseScreen;
		void pause( ::openfl::events::KeyboardEvent e);
		::Dynamic pause_dyn();

		void quitButtonClick( ::openfl::events::MouseEvent e);
		::Dynamic quitButtonClick_dyn();

		void quitButtonOver( ::openfl::events::MouseEvent e);
		::Dynamic quitButtonOver_dyn();

		void quitButtonOut( ::openfl::events::MouseEvent e);
		::Dynamic quitButtonOut_dyn();

		bool get_quitButtonIsPressed();
		::Dynamic get_quitButtonIsPressed_dyn();

		void update();
		::Dynamic update_dyn();

		void playerJump(Float jumpPower);
		::Dynamic playerJump_dyn();

		void bulletsMove();
		::Dynamic bulletsMove_dyn();

		void grenadeMove();
		::Dynamic grenadeMove_dyn();

		void generateEnemies();
		::Dynamic generateEnemies_dyn();

		void generateEnemy();
		::Dynamic generateEnemy_dyn();

		void moveEnemies();
		::Dynamic moveEnemies_dyn();

		void doCollisionsWithBullet();
		::Dynamic doCollisionsWithBullet_dyn();

		void doCollisionWithEnemyBullet();
		::Dynamic doCollisionWithEnemyBullet_dyn();

		void doCollisionWithGrenade();
		::Dynamic doCollisionWithGrenade_dyn();

		void killEnemy( ::Enemy enemy);
		::Dynamic killEnemy_dyn();

		bool get_gameIsOver();
		::Dynamic get_gameIsOver_dyn();

		int get_gamePoints();
		::Dynamic get_gamePoints_dyn();

		void doCollidionWithEnemies();
		::Dynamic doCollidionWithEnemies_dyn();

		void showHealthIndicator();
		::Dynamic showHealthIndicator_dyn();

		void bonusBuf();
		::Dynamic bonusBuf_dyn();

		void spawnBonus( ::Enemy enemy);
		::Dynamic spawnBonus_dyn();

		void doBonusDestroy();
		::Dynamic doBonusDestroy_dyn();

		void doCollisionsWithPLatforms();
		::Dynamic doCollisionsWithPLatforms_dyn();

		void set_Pause();
		::Dynamic set_Pause_dyn();

		void set_Unpause();
		::Dynamic set_Unpause_dyn();

};


#endif /* INCLUDED_Game */ 
