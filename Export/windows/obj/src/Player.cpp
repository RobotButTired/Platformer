// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_State
#include <State.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_12_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",12,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_59_spriteAnimated,"Player","spriteAnimated",0x4e3e0615,"Player.spriteAnimated","Player.hx",59,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_79_updateSprite,"Player","updateSprite",0xdeca53fb,"Player.updateSprite","Player.hx",79,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_91_keyDownHandler,"Player","keyDownHandler",0xbd594276,"Player.keyDownHandler","Player.hx",91,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_104_keyUpHandler,"Player","keyUpHandler",0x74c73e1d,"Player.keyUpHandler","Player.hx",104,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_115_move,"Player","move",0x1cb35f1e,"Player.move","Player.hx",115,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_138_get_state,"Player","get_state",0x7d84873b,"Player.get_state","Player.hx",138,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_143_drawHitBox,"Player","drawHitBox",0xf8c1a469,"Player.drawHitBox","Player.hx",143,0xa27fc9dd)

void Player_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_12_new)
HXLINE(  24)		this->frameTime = ((Float)0.15);
HXLINE(  21)		this->state = ::State_obj::idle_dyn();
HXLINE(  18)		this->directionRight = false;
HXLINE(  17)		this->directionLeft = false;
HXLINE(  28)		super::__construct();
HXLINE(  29)		this->idleWidthGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  30)		::Array< ::Dynamic> _hx_tmp = this->idleWidthGun;
HXDLIN(  30)		_hx_tmp->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle_with_gun_0.png",10,6b,ab,d2),null()),null(),null()));
HXLINE(  31)		::Array< ::Dynamic> _hx_tmp1 = this->idleWidthGun;
HXDLIN(  31)		_hx_tmp1->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_1.png",31,2f,d2,69),null()),null(),null()));
HXLINE(  32)		::Array< ::Dynamic> _hx_tmp2 = this->idleWidthGun;
HXDLIN(  32)		_hx_tmp2->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_2.png",b2,c3,38,fd),null()),null(),null()));
HXLINE(  33)		::Array< ::Dynamic> _hx_tmp3 = this->idleWidthGun;
HXDLIN(  33)		_hx_tmp3->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_3.png",33,58,9f,90),null()),null(),null()));
HXLINE(  35)		this->walkWithGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  36)		::Array< ::Dynamic> _hx_tmp4 = this->walkWithGun;
HXDLIN(  36)		_hx_tmp4->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_0.png",5b,e0,17,91),null()),null(),null()));
HXLINE(  37)		::Array< ::Dynamic> _hx_tmp5 = this->walkWithGun;
HXDLIN(  37)		_hx_tmp5->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_1.png",dc,74,7e,24),null()),null(),null()));
HXLINE(  38)		::Array< ::Dynamic> _hx_tmp6 = this->walkWithGun;
HXDLIN(  38)		_hx_tmp6->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_2.png",5d,09,e5,b7),null()),null(),null()));
HXLINE(  39)		::Array< ::Dynamic> _hx_tmp7 = this->walkWithGun;
HXDLIN(  39)		_hx_tmp7->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_3.png",de,9d,4b,4b),null()),null(),null()));
HXLINE(  41)		this->speed = ((Float)7.0);
HXLINE(  42)		this->hitBox =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-15.),((Float)-17.5),30,35);
HXLINE(  46)		this->addChild(this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >());
HXLINE(  47)		this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(-15) ));
HXLINE(  48)		this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(-40) ));
HXLINE(  49)		 ::Dynamic _hx_tmp8 = ::haxe::Log_obj::trace;
HXDLIN(  49)		::String _hx_tmp9 = (this->get_width() + HX_(" ",20,00,00,00));
HXDLIN(  49)		::String _hx_tmp10 = (_hx_tmp9 + this->get_height());
HXDLIN(  49)		_hx_tmp8(_hx_tmp10,hx::SourceInfo(HX_("Source/Player.hx",89,18,9a,6b),49,HX_("Player",81,5f,4d,6c),HX_("new",60,d0,53,00)));
HXLINE(  50)		this->drawHitBox();
HXLINE(  52)		this->ind = 0;
HXLINE(  53)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  53)		Float _hx_tmp11;
HXDLIN(  53)		if ((timer > 0)) {
HXLINE(  53)			_hx_tmp11 = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  53)			_hx_tmp11 = ( (Float)(0) );
            		}
HXDLIN(  53)		this->timeFlag = _hx_tmp11;
HXLINE(  55)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->keyDownHandler_dyn(),null(),null(),null());
HXLINE(  56)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->keyUpHandler_dyn(),null(),null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x3882f6a4 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x6c4d5f81;
		}
	}
}

void Player_obj::spriteAnimated( ::State state){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_59_spriteAnimated)
HXLINE(  60)		::Array< ::Dynamic> spriteSheet;
HXLINE(  61)		switch((int)(state->_hx_getIndex())){
            			case (int)0: {
HXLINE(  64)				spriteSheet = this->idleWidthGun;
            			}
            			break;
            			case (int)1: {
HXLINE(  66)				spriteSheet = this->walkWithGun;
            			}
            			break;
            			case (int)2: {
HXLINE(  68)				spriteSheet = null();
            			}
            			break;
            		}
HXLINE(  70)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  70)		Float _hx_tmp;
HXDLIN(  70)		if ((timer > 0)) {
HXLINE(  70)			_hx_tmp = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  70)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN(  70)		if (((_hx_tmp - this->timeFlag) >= this->frameTime)) {
HXLINE(  73)			this->updateSprite(spriteSheet);
HXLINE(  74)			int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  74)			Float _hx_tmp1;
HXDLIN(  74)			if ((timer1 > 0)) {
HXLINE(  74)				_hx_tmp1 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            			}
            			else {
HXLINE(  74)				_hx_tmp1 = ( (Float)(0) );
            			}
HXDLIN(  74)			this->timeFlag = _hx_tmp1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,spriteAnimated,(void))

void Player_obj::updateSprite(::Array< ::Dynamic> spriteSheet){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_79_updateSprite)
HXLINE(  80)		this->removeChildren(null(),null());
HXLINE(  81)		if ((this->ind == spriteSheet->length)) {
HXLINE(  82)			this->ind = 0;
            		}
HXLINE(  83)		this->addChild(spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >());
HXLINE(  84)		spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(-15) ));
HXLINE(  85)		spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(-40) ));
HXLINE(  87)		this->ind++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,updateSprite,(void))

void Player_obj::keyDownHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_91_keyDownHandler)
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if ((e->keyCode != 37)) {
HXLINE(  92)			_hx_tmp = (e->keyCode == 65);
            		}
            		else {
HXLINE(  92)			_hx_tmp = true;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  94)			this->directionLeft = true;
            		}
HXLINE(  97)		bool _hx_tmp1;
HXDLIN(  97)		if ((e->keyCode != 39)) {
HXLINE(  97)			_hx_tmp1 = (e->keyCode == 68);
            		}
            		else {
HXLINE(  97)			_hx_tmp1 = true;
            		}
HXDLIN(  97)		if (_hx_tmp1) {
HXLINE(  99)			this->directionRight = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,keyDownHandler,(void))

void Player_obj::keyUpHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_104_keyUpHandler)
HXLINE( 105)		bool _hx_tmp;
HXDLIN( 105)		if ((e->keyCode != 37)) {
HXLINE( 105)			_hx_tmp = (e->keyCode == 65);
            		}
            		else {
HXLINE( 105)			_hx_tmp = true;
            		}
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 107)			this->directionLeft = false;
            		}
HXLINE( 109)		bool _hx_tmp1;
HXDLIN( 109)		if ((e->keyCode != 39)) {
HXLINE( 109)			_hx_tmp1 = (e->keyCode == 68);
            		}
            		else {
HXLINE( 109)			_hx_tmp1 = true;
            		}
HXDLIN( 109)		if (_hx_tmp1) {
HXLINE( 111)			this->directionRight = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,keyUpHandler,(void))

void Player_obj::move(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_115_move)
HXLINE( 116)		if (this->directionLeft) {
HXLINE( 118)			Float _hx_tmp = this->get_x();
HXDLIN( 118)			if (((_hx_tmp - (this->hitBox->width / ( (Float)(2) ))) >= 0)) {
HXLINE( 119)				 ::Player _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 119)				Float _hx_tmp1 = _g->get_x();
HXDLIN( 119)				_g->set_x((_hx_tmp1 - this->speed));
            			}
HXLINE( 120)			this->state = ::State_obj::walk_dyn();
HXLINE( 121)			this->set_scaleX(((Float)-1.0));
            		}
HXLINE( 123)		if (this->directionRight) {
HXLINE( 125)			Float _hx_tmp2 = this->get_x();
HXDLIN( 125)			if (((_hx_tmp2 + (this->hitBox->width / ( (Float)(2) ))) <= ::Main_obj::sizeWidth)) {
HXLINE( 126)				 ::Player _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 126)				Float _hx_tmp3 = _g1->get_x();
HXDLIN( 126)				_g1->set_x((_hx_tmp3 + this->speed));
            			}
HXLINE( 127)			this->state = ::State_obj::walk_dyn();
HXLINE( 128)			this->set_scaleX(((Float)1.0));
            		}
HXLINE( 130)		bool _hx_tmp4;
HXDLIN( 130)		if (this->directionLeft) {
HXLINE( 130)			_hx_tmp4 = this->directionRight;
            		}
            		else {
HXLINE( 130)			_hx_tmp4 = false;
            		}
HXDLIN( 130)		if (_hx_tmp4) {
HXLINE( 131)			this->state = ::State_obj::idle_dyn();
            		}
HXLINE( 132)		bool _hx_tmp5;
HXDLIN( 132)		if (!(this->directionLeft)) {
HXLINE( 132)			_hx_tmp5 = !(this->directionRight);
            		}
            		else {
HXLINE( 132)			_hx_tmp5 = false;
            		}
HXDLIN( 132)		if (_hx_tmp5) {
HXLINE( 133)			this->state = ::State_obj::idle_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,move,(void))

 ::State Player_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_138_get_state)
HXDLIN( 138)		return this->state;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_state,return )

void Player_obj::drawHitBox(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_143_drawHitBox)
HXLINE( 144)		this->get_graphics()->lineStyle(1,16711680,null(),null(),null(),null(),null(),null());
HXLINE( 145)		this->get_graphics()->drawRect(((Float)-15.),((Float)-17.5),( (Float)(30) ),( (Float)(35) ));
HXLINE( 146)		this->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,drawHitBox,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(idleWidthGun,"idleWidthGun");
	HX_MARK_MEMBER_NAME(walkWithGun,"walkWithGun");
	HX_MARK_MEMBER_NAME(directionLeft,"directionLeft");
	HX_MARK_MEMBER_NAME(directionRight,"directionRight");
	HX_MARK_MEMBER_NAME(hitBox,"hitBox");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(timeFlag,"timeFlag");
	HX_MARK_MEMBER_NAME(frameTime,"frameTime");
	HX_MARK_MEMBER_NAME(ind,"ind");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(idleWidthGun,"idleWidthGun");
	HX_VISIT_MEMBER_NAME(walkWithGun,"walkWithGun");
	HX_VISIT_MEMBER_NAME(directionLeft,"directionLeft");
	HX_VISIT_MEMBER_NAME(directionRight,"directionRight");
	HX_VISIT_MEMBER_NAME(hitBox,"hitBox");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(timeFlag,"timeFlag");
	HX_VISIT_MEMBER_NAME(frameTime,"frameTime");
	HX_VISIT_MEMBER_NAME(ind,"ind");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ind") ) { return hx::Val( ind ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hitBox") ) { return hx::Val( hitBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeFlag") ) { return hx::Val( timeFlag ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { return hx::Val( frameTime ); }
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawHitBox") ) { return hx::Val( drawHitBox_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"walkWithGun") ) { return hx::Val( walkWithGun ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"idleWidthGun") ) { return hx::Val( idleWidthGun ); }
		if (HX_FIELD_EQ(inName,"updateSprite") ) { return hx::Val( updateSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyUpHandler") ) { return hx::Val( keyUpHandler_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"directionLeft") ) { return hx::Val( directionLeft ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"directionRight") ) { return hx::Val( directionRight ); }
		if (HX_FIELD_EQ(inName,"spriteAnimated") ) { return hx::Val( spriteAnimated_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyDownHandler") ) { return hx::Val( keyDownHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ind") ) { ind=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::State >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"hitBox") ) { hitBox=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeFlag") ) { timeFlag=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { frameTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"walkWithGun") ) { walkWithGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"idleWidthGun") ) { idleWidthGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"directionLeft") ) { directionLeft=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"directionRight") ) { directionRight=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("idleWidthGun",4e,2f,a1,30));
	outFields->push(HX_("walkWithGun",11,46,3d,d6));
	outFields->push(HX_("directionLeft",e6,21,e1,ed));
	outFields->push(HX_("directionRight",1d,95,29,ae));
	outFields->push(HX_("hitBox",78,a5,0f,57));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("timeFlag",59,8e,1f,e4));
	outFields->push(HX_("frameTime",da,8a,7d,3a));
	outFields->push(HX_("ind",df,0c,50,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,idleWidthGun),HX_("idleWidthGun",4e,2f,a1,30)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,walkWithGun),HX_("walkWithGun",11,46,3d,d6)},
	{hx::fsBool,(int)offsetof(Player_obj,directionLeft),HX_("directionLeft",e6,21,e1,ed)},
	{hx::fsBool,(int)offsetof(Player_obj,directionRight),HX_("directionRight",1d,95,29,ae)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(Player_obj,hitBox),HX_("hitBox",78,a5,0f,57)},
	{hx::fsObject /*  ::State */ ,(int)offsetof(Player_obj,state),HX_("state",11,76,0b,84)},
	{hx::fsFloat,(int)offsetof(Player_obj,timeFlag),HX_("timeFlag",59,8e,1f,e4)},
	{hx::fsFloat,(int)offsetof(Player_obj,frameTime),HX_("frameTime",da,8a,7d,3a)},
	{hx::fsInt,(int)offsetof(Player_obj,ind),HX_("ind",df,0c,50,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("idleWidthGun",4e,2f,a1,30),
	HX_("walkWithGun",11,46,3d,d6),
	HX_("directionLeft",e6,21,e1,ed),
	HX_("directionRight",1d,95,29,ae),
	HX_("hitBox",78,a5,0f,57),
	HX_("state",11,76,0b,84),
	HX_("timeFlag",59,8e,1f,e4),
	HX_("frameTime",da,8a,7d,3a),
	HX_("ind",df,0c,50,00),
	HX_("spriteAnimated",c8,17,2d,d8),
	HX_("updateSprite",ee,82,59,c3),
	HX_("keyDownHandler",29,54,48,47),
	HX_("keyUpHandler",10,6d,56,59),
	HX_("move",11,e3,60,48),
	HX_("get_state",68,d2,b4,c7),
	HX_("drawHitBox",9c,20,d3,98),
	::String(null()) };

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

