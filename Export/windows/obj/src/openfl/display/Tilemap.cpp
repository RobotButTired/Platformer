// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_TileContainer
#include <openfl/display/TileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_display__internal_CairoDisplayObject
#include <openfl/display/_internal/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display__internal_CairoTilemap
#include <openfl/display/_internal/CairoTilemap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DBitmap
#include <openfl/display/_internal/Context3DBitmap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DBuffer
#include <openfl/display/_internal/Context3DBuffer.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DShape
#include <openfl/display/_internal/Context3DShape.h>
#endif
#ifndef INCLUDED_openfl_display__internal_Context3DTilemap
#include <openfl/display/_internal/Context3DTilemap.h>
#endif
#ifndef INCLUDED_openfl_display__internal_DOMTilemap
#include <openfl/display/_internal/DOMTilemap.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1cbb708783dfd99e_129_new,"openfl.display.Tilemap","new",0x34c22ff6,"openfl.display.Tilemap.new","openfl/display/Tilemap.hx",129,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_162_addTile,"openfl.display.Tilemap","addTile",0xfbdef085,"openfl.display.Tilemap.addTile","openfl/display/Tilemap.hx",162,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_184_addTileAt,"openfl.display.Tilemap","addTileAt",0xe5e014d8,"openfl.display.Tilemap.addTileAt","openfl/display/Tilemap.hx",184,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_197_addTiles,"openfl.display.Tilemap","addTiles",0x6733844e,"openfl.display.Tilemap.addTiles","openfl/display/Tilemap.hx",197,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_212_contains,"openfl.display.Tilemap","contains",0x0a1cbac9,"openfl.display.Tilemap.contains","openfl/display/Tilemap.hx",212,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_223_getTileAt,"openfl.display.Tilemap","getTileAt",0xaa12690d,"openfl.display.Tilemap.getTileAt","openfl/display/Tilemap.hx",223,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_234_getTileIndex,"openfl.display.Tilemap","getTileIndex",0x74b69338,"openfl.display.Tilemap.getTileIndex","openfl/display/Tilemap.hx",234,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_245_getTiles,"openfl.display.Tilemap","getTiles",0x4dad6db9,"openfl.display.Tilemap.getTiles","openfl/display/Tilemap.hx",245,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_258_removeTile,"openfl.display.Tilemap","removeTile",0x5b5664bc,"openfl.display.Tilemap.removeTile","openfl/display/Tilemap.hx",258,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_271_removeTileAt,"openfl.display.Tilemap","removeTileAt",0xa94644cf,"openfl.display.Tilemap.removeTileAt","openfl/display/Tilemap.hx",271,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_282_removeTiles,"openfl.display.Tilemap","removeTiles",0x9041c037,"openfl.display.Tilemap.removeTiles","openfl/display/Tilemap.hx",282,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_318_setTileIndex,"openfl.display.Tilemap","setTileIndex",0x89afb6ac,"openfl.display.Tilemap.setTileIndex","openfl/display/Tilemap.hx",318,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_328_setTiles,"openfl.display.Tilemap","setTiles",0xfc0ac72d,"openfl.display.Tilemap.setTiles","openfl/display/Tilemap.hx",328,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_358_sortTiles,"openfl.display.Tilemap","sortTiles",0x283c055d,"openfl.display.Tilemap.sortTiles","openfl/display/Tilemap.hx",358,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_371_swapTiles,"openfl.display.Tilemap","swapTiles",0x95754208,"openfl.display.Tilemap.swapTiles","openfl/display/Tilemap.hx",371,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_384_swapTilesAt,"openfl.display.Tilemap","swapTilesAt",0xced00d1b,"openfl.display.Tilemap.swapTilesAt","openfl/display/Tilemap.hx",384,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_390___enterFrame,"openfl.display.Tilemap","__enterFrame",0x56d37cbf,"openfl.display.Tilemap.__enterFrame","openfl/display/Tilemap.hx",390,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_399___getBounds,"openfl.display.Tilemap","__getBounds",0x92793e21,"openfl.display.Tilemap.__getBounds","openfl/display/Tilemap.hx",399,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_413___hitTest,"openfl.display.Tilemap","__hitTest",0x7360e53b,"openfl.display.Tilemap.__hitTest","openfl/display/Tilemap.hx",413,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_438___renderCairo,"openfl.display.Tilemap","__renderCairo",0xab509548,"openfl.display.Tilemap.__renderCairo","openfl/display/Tilemap.hx",438,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_457___renderCanvas,"openfl.display.Tilemap","__renderCanvas",0x3e831818,"openfl.display.Tilemap.__renderCanvas","openfl/display/Tilemap.hx",457,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_474___renderDOM,"openfl.display.Tilemap","__renderDOM",0x7d5cdb42,"openfl.display.Tilemap.__renderDOM","openfl/display/Tilemap.hx",474,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_495___renderDOMClear,"openfl.display.Tilemap","__renderDOMClear",0xfc3ff6eb,"openfl.display.Tilemap.__renderDOMClear","openfl/display/Tilemap.hx",495,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_501___renderFlash,"openfl.display.Tilemap","__renderFlash",0x6cc39a70,"openfl.display.Tilemap.__renderFlash","openfl/display/Tilemap.hx",501,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_506___renderGL,"openfl.display.Tilemap","__renderGL",0xe74e7d45,"openfl.display.Tilemap.__renderGL","openfl/display/Tilemap.hx",506,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_523___renderGLMask,"openfl.display.Tilemap","__renderGLMask",0xaaa670d1,"openfl.display.Tilemap.__renderGLMask","openfl/display/Tilemap.hx",523,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_540___shouldCacheHardware,"openfl.display.Tilemap","__shouldCacheHardware",0x4211accd,"openfl.display.Tilemap.__shouldCacheHardware","openfl/display/Tilemap.hx",540,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_544___updateCacheBitmap,"openfl.display.Tilemap","__updateCacheBitmap",0xcd407cbe,"openfl.display.Tilemap.__updateCacheBitmap","openfl/display/Tilemap.hx",544,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_558_get_height,"openfl.display.Tilemap","get_height",0x840dd6da,"openfl.display.Tilemap.get_height","openfl/display/Tilemap.hx",558,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_564_set_height,"openfl.display.Tilemap","set_height",0x878b754e,"openfl.display.Tilemap.set_height","openfl/display/Tilemap.hx",564,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_582_get_numTiles,"openfl.display.Tilemap","get_numTiles",0x9e4ec312,"openfl.display.Tilemap.get_numTiles","openfl/display/Tilemap.hx",582,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_587_get_tileset,"openfl.display.Tilemap","get_tileset",0x4d66c6e1,"openfl.display.Tilemap.get_tileset","openfl/display/Tilemap.hx",587,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_591_set_tileset,"openfl.display.Tilemap","set_tileset",0x57d3cded,"openfl.display.Tilemap.set_tileset","openfl/display/Tilemap.hx",591,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_609_get_width,"openfl.display.Tilemap","get_width",0x1d9f4673,"openfl.display.Tilemap.get_width","openfl/display/Tilemap.hx",609,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_615_set_width,"openfl.display.Tilemap","set_width",0x00f0327f,"openfl.display.Tilemap.set_width","openfl/display/Tilemap.hx",615,0xd55dffbc)
namespace openfl{
namespace display{

void Tilemap_obj::__construct(int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_1cbb708783dfd99e_129_new)
HXLINE( 130)		super::__construct();
HXLINE( 132)		this->_hx___tileset = tileset;
HXLINE( 133)		this->smoothing = smoothing;
HXLINE( 135)		this->tileAlphaEnabled = true;
HXLINE( 136)		this->tileBlendModeEnabled = true;
HXLINE( 137)		this->tileColorTransformEnabled = true;
HXLINE( 139)		this->_hx___group =  ::openfl::display::TileContainer_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE( 140)		this->_hx___group->set_tileset(tileset);
HXLINE( 142)		this->_hx___width = width;
HXLINE( 143)		this->_hx___height = height;
            	}

Dynamic Tilemap_obj::__CreateEmpty() { return new Tilemap_obj; }

void *Tilemap_obj::_hx_vtable = 0;

Dynamic Tilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tilemap_obj > _hx_result = new Tilemap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Tilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x099f8de4) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099f8de4;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

static ::openfl::display::ITileContainer_obj _hx_openfl_display_Tilemap__hx_openfl_display_ITileContainer= {
	( int (hx::Object::*)())&::openfl::display::Tilemap_obj::get_numTiles,
	(  ::openfl::display::Tile (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::addTile,
	(  ::openfl::display::Tile (hx::Object::*)( ::openfl::display::Tile,int))&::openfl::display::Tilemap_obj::addTileAt,
	( ::Array< ::Dynamic> (hx::Object::*)(::Array< ::Dynamic>))&::openfl::display::Tilemap_obj::addTiles,
	( bool (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::contains,
	(  ::openfl::display::Tile (hx::Object::*)(int))&::openfl::display::Tilemap_obj::getTileAt,
	( int (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::getTileIndex,
	(  ::openfl::display::Tile (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::removeTile,
	(  ::openfl::display::Tile (hx::Object::*)(int))&::openfl::display::Tilemap_obj::removeTileAt,
	( void (hx::Object::*)(hx::Null< int > ,hx::Null< int > ))&::openfl::display::Tilemap_obj::removeTiles,
	( void (hx::Object::*)( ::openfl::display::Tile,int))&::openfl::display::Tilemap_obj::setTileIndex,
	( void (hx::Object::*)( ::Dynamic))&::openfl::display::Tilemap_obj::sortTiles,
	( void (hx::Object::*)( ::openfl::display::Tile, ::openfl::display::Tile))&::openfl::display::Tilemap_obj::swapTiles,
	( void (hx::Object::*)(int,int))&::openfl::display::Tilemap_obj::swapTilesAt,
};

void *Tilemap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xcad54adc: return &_hx_openfl_display_Tilemap__hx_openfl_display_ITileContainer;
	}
	return super::_hx_getInterface(inHash);
}

 ::openfl::display::Tile Tilemap_obj::addTile( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_162_addTile)
HXDLIN( 162)		return this->_hx___group->addTile(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,addTile,return )

 ::openfl::display::Tile Tilemap_obj::addTileAt( ::openfl::display::Tile tile,int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_184_addTileAt)
HXDLIN( 184)		return this->_hx___group->addTileAt(tile,index);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,addTileAt,return )

::Array< ::Dynamic> Tilemap_obj::addTiles(::Array< ::Dynamic> tiles){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_197_addTiles)
HXDLIN( 197)		return this->_hx___group->addTiles(tiles);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,addTiles,return )

bool Tilemap_obj::contains( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_212_contains)
HXDLIN( 212)		return this->_hx___group->contains(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,contains,return )

 ::openfl::display::Tile Tilemap_obj::getTileAt(int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_223_getTileAt)
HXDLIN( 223)		return this->_hx___group->getTileAt(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,getTileAt,return )

int Tilemap_obj::getTileIndex( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_234_getTileIndex)
HXDLIN( 234)		return this->_hx___group->getTileIndex(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,getTileIndex,return )

 ::openfl::display::TileContainer Tilemap_obj::getTiles(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_245_getTiles)
HXDLIN( 245)		return Dynamic( this->_hx___group->clone()).StaticCast<  ::openfl::display::TileContainer >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,getTiles,return )

 ::openfl::display::Tile Tilemap_obj::removeTile( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_258_removeTile)
HXDLIN( 258)		return this->_hx___group->removeTile(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,removeTile,return )

 ::openfl::display::Tile Tilemap_obj::removeTileAt(int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_271_removeTileAt)
HXDLIN( 271)		return this->_hx___group->removeTileAt(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,removeTileAt,return )

void Tilemap_obj::removeTiles(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_282_removeTiles)
HXDLIN( 282)		this->_hx___group->removeTiles(beginIndex,endIndex);
HXDLIN( 282)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,removeTiles,(void))

void Tilemap_obj::setTileIndex( ::openfl::display::Tile tile,int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_318_setTileIndex)
HXDLIN( 318)		this->_hx___group->setTileIndex(tile,index);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,setTileIndex,(void))

void Tilemap_obj::setTiles( ::openfl::display::TileContainer group){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_328_setTiles)
HXLINE( 329)		{
HXLINE( 329)			int _g = 0;
HXDLIN( 329)			::Array< ::Dynamic> _g1 = this->_hx___group->_hx___tiles;
HXDLIN( 329)			while((_g < _g1->length)){
HXLINE( 329)				 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 329)				_g = (_g + 1);
HXLINE( 331)				this->removeTile(tile);
            			}
            		}
HXLINE( 334)		{
HXLINE( 334)			int _g2 = 0;
HXDLIN( 334)			::Array< ::Dynamic> _g3 = group->_hx___tiles;
HXDLIN( 334)			while((_g2 < _g3->length)){
HXLINE( 334)				 ::openfl::display::Tile tile1 = _g3->__get(_g2).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 334)				_g2 = (_g2 + 1);
HXLINE( 336)				this->addTile(tile1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,setTiles,(void))

void Tilemap_obj::sortTiles( ::Dynamic compareFunction){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_358_sortTiles)
HXDLIN( 358)		this->_hx___group->sortTiles(compareFunction);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,sortTiles,(void))

void Tilemap_obj::swapTiles( ::openfl::display::Tile tile1, ::openfl::display::Tile tile2){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_371_swapTiles)
HXDLIN( 371)		this->_hx___group->swapTiles(tile1,tile2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,swapTiles,(void))

void Tilemap_obj::swapTilesAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_384_swapTilesAt)
HXDLIN( 384)		this->_hx___group->swapTilesAt(index1,index2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,swapTilesAt,(void))

void Tilemap_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_390___enterFrame)
HXDLIN( 390)		if (this->_hx___group->_hx___dirty) {
HXLINE( 392)			if (!(this->_hx___renderDirty)) {
HXLINE( 392)				this->_hx___renderDirty = true;
HXDLIN( 392)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


void Tilemap_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_399___getBounds)
HXLINE( 400)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 401)		bounds->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_hx___width) ),( (Float)(this->_hx___height) ));
HXLINE( 402)		bounds->_hx___transform(bounds,matrix);
HXLINE( 404)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE( 406)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool Tilemap_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_413___hitTest)
HXLINE( 414)		bool _hx_tmp;
HXDLIN( 414)		if (!(!(hitObject->get_visible()))) {
HXLINE( 414)			_hx_tmp = this->_hx___isMask;
            		}
            		else {
HXLINE( 414)			_hx_tmp = true;
            		}
HXDLIN( 414)		if (_hx_tmp) {
HXLINE( 414)			return false;
            		}
HXLINE( 415)		bool _hx_tmp1;
HXDLIN( 415)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 415)			_hx_tmp1 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 415)			_hx_tmp1 = false;
            		}
HXDLIN( 415)		if (_hx_tmp1) {
HXLINE( 415)			return false;
            		}
HXLINE( 417)		this->_hx___getRenderTransform();
HXLINE( 419)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 419)		Float norm = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 419)		Float px;
HXDLIN( 419)		if ((norm == 0)) {
HXLINE( 419)			px = -(_this->tx);
            		}
            		else {
HXLINE( 419)			px = ((((Float)1.0) / norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 420)		 ::openfl::geom::Matrix _this1 = this->_hx___renderTransform;
HXDLIN( 420)		Float norm1 = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 420)		Float py;
HXDLIN( 420)		if ((norm1 == 0)) {
HXLINE( 420)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 420)			py = ((((Float)1.0) / norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 422)		bool _hx_tmp2;
HXDLIN( 422)		bool _hx_tmp3;
HXDLIN( 422)		bool _hx_tmp4;
HXDLIN( 422)		if ((px > 0)) {
HXLINE( 422)			_hx_tmp4 = (py > 0);
            		}
            		else {
HXLINE( 422)			_hx_tmp4 = false;
            		}
HXDLIN( 422)		if (_hx_tmp4) {
HXLINE( 422)			_hx_tmp3 = (px <= this->_hx___width);
            		}
            		else {
HXLINE( 422)			_hx_tmp3 = false;
            		}
HXDLIN( 422)		if (_hx_tmp3) {
HXLINE( 422)			_hx_tmp2 = (py <= this->_hx___height);
            		}
            		else {
HXLINE( 422)			_hx_tmp2 = false;
            		}
HXDLIN( 422)		if (_hx_tmp2) {
HXLINE( 424)			bool _hx_tmp5;
HXDLIN( 424)			if (hx::IsNotNull( stack )) {
HXLINE( 424)				_hx_tmp5 = !(interactiveOnly);
            			}
            			else {
HXLINE( 424)				_hx_tmp5 = false;
            			}
HXDLIN( 424)			if (_hx_tmp5) {
HXLINE( 426)				stack->push(hitObject);
            			}
HXLINE( 429)			return true;
            		}
HXLINE( 432)		return false;
            	}


void Tilemap_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_438___renderCairo)
HXLINE( 440)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 442)		bool _hx_tmp;
HXDLIN( 442)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 442)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 442)			_hx_tmp = false;
            		}
HXDLIN( 442)		if (_hx_tmp) {
HXLINE( 444)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN( 444)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 444)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 444)				bool _hx_tmp1;
HXDLIN( 444)				bool _hx_tmp2;
HXDLIN( 444)				if ((alpha > 0)) {
HXLINE( 444)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 444)					_hx_tmp2 = false;
            				}
HXDLIN( 444)				if (_hx_tmp2) {
HXLINE( 444)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 444)					_hx_tmp1 = false;
            				}
HXDLIN( 444)				if (_hx_tmp1) {
HXLINE( 444)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN( 444)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 444)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN( 444)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 444)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 444)					if (hx::IsNotNull( surface )) {
HXLINE( 444)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 444)						int _hx_tmp3;
HXDLIN( 444)						bool _hx_tmp4;
HXDLIN( 444)						if (renderer->_hx___allowSmoothing) {
HXLINE( 444)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE( 444)							_hx_tmp4 = false;
            						}
HXDLIN( 444)						if (_hx_tmp4) {
HXLINE( 444)							_hx_tmp3 = 1;
            						}
            						else {
HXLINE( 444)							_hx_tmp3 = 3;
            						}
HXDLIN( 444)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN( 444)						cairo->set_source(pattern);
HXDLIN( 444)						if ((alpha == 1)) {
HXLINE( 444)							cairo->paint();
            						}
            						else {
HXLINE( 444)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 444)					renderer->_hx___popMaskObject(bitmap,null());
HXDLIN( 444)					renderer->_hx___setBlendMode(10);
            				}
            			}
            		}
            		else {
HXLINE( 448)			::openfl::display::_internal::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
HXLINE( 449)			::openfl::display::_internal::CairoTilemap_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 452)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_457___renderCanvas)
HXLINE( 458)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 460)		bool _hx_tmp;
HXDLIN( 460)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 460)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 460)			_hx_tmp = false;
            		}
HXLINE( 470)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_474___renderDOM)
HXLINE( 475)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 477)		bool _hx_tmp;
HXDLIN( 477)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 477)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 477)			_hx_tmp = false;
            		}
HXDLIN( 477)		if (_hx_tmp) {
HXLINE( 479)			this->_hx___renderDOMClear(renderer);
HXLINE( 480)			this->_hx___cacheBitmap->stage = this->stage;
            		}
HXLINE( 490)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_495___renderDOMClear)
HXDLIN( 495)		::openfl::display::_internal::DOMTilemap_obj::clear(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void Tilemap_obj::_hx___renderFlash(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_501___renderFlash)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,_hx___renderFlash,(void))

void Tilemap_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_506___renderGL)
HXLINE( 507)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 509)		bool _hx_tmp;
HXDLIN( 509)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 509)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 509)			_hx_tmp = false;
            		}
HXDLIN( 509)		if (_hx_tmp) {
HXLINE( 511)			::openfl::display::_internal::Context3DBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE( 515)			bool _hx_tmp1;
HXDLIN( 515)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 515)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 515)				_hx_tmp1 = false;
            			}
HXDLIN( 515)			if (!(_hx_tmp1)) {
HXLINE( 515)				bool _hx_tmp2;
HXDLIN( 515)				if (!(!(this->_hx___renderable))) {
HXLINE( 515)					_hx_tmp2 = (this->_hx___worldAlpha <= 0);
            				}
            				else {
HXLINE( 515)					_hx_tmp2 = true;
            				}
HXDLIN( 515)				if (!(_hx_tmp2)) {
HXLINE( 515)					bool _hx_tmp3;
HXDLIN( 515)					bool _hx_tmp4;
HXDLIN( 515)					bool _hx_tmp5;
HXDLIN( 515)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 515)						_hx_tmp5 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE( 515)						_hx_tmp5 = false;
            					}
HXDLIN( 515)					if (_hx_tmp5) {
HXLINE( 515)						_hx_tmp4 = (this->get_width() > 0);
            					}
            					else {
HXLINE( 515)						_hx_tmp4 = false;
            					}
HXDLIN( 515)					if (_hx_tmp4) {
HXLINE( 515)						_hx_tmp3 = (this->get_height() > 0);
            					}
            					else {
HXLINE( 515)						_hx_tmp3 = false;
            					}
HXDLIN( 515)					if (_hx_tmp3) {
HXLINE( 515)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 515)						renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 515)						 ::openfl::display3D::Context3D context = renderer->_hx___context3D;
HXDLIN( 515)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get().StaticCast<  ::openfl::geom::Rectangle >();
HXDLIN( 515)						Float _hx_tmp6 = this->get_width();
HXDLIN( 515)						rect->setTo(( (Float)(0) ),( (Float)(0) ),_hx_tmp6,this->get_height());
HXDLIN( 515)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN( 515)						int color = ( (int)(this->opaqueBackground) );
HXDLIN( 515)						context->clear((( (Float)((hx::UShr(color,16) & 255)) ) / ( (Float)(255) )),(( (Float)((hx::UShr(color,8) & 255)) ) / ( (Float)(255) )),(( (Float)((color & 255)) ) / ( (Float)(255) )),1,0,0,1);
HXDLIN( 515)						renderer->_hx___popMaskRect();
HXDLIN( 515)						renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 515)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN( 515)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 515)						::openfl::display::_internal::Context3DShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
HXLINE( 516)			::openfl::display::_internal::Context3DTilemap_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 519)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_523___renderGLMask)
HXLINE( 532)		bool _hx_tmp;
HXDLIN( 532)		if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 532)			_hx_tmp = hx::IsNull( this->_hx___graphics );
            		}
            		else {
HXLINE( 532)			_hx_tmp = false;
            		}
HXDLIN( 532)		if (!(_hx_tmp)) {
HXLINE( 532)			bool _hx_tmp1;
HXDLIN( 532)			bool _hx_tmp2;
HXDLIN( 532)			bool _hx_tmp3;
HXDLIN( 532)			if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 532)				_hx_tmp3 = !(this->_hx___isCacheBitmapRender);
            			}
            			else {
HXLINE( 532)				_hx_tmp3 = false;
            			}
HXDLIN( 532)			if (_hx_tmp3) {
HXLINE( 532)				_hx_tmp2 = (this->get_width() > 0);
            			}
            			else {
HXLINE( 532)				_hx_tmp2 = false;
            			}
HXDLIN( 532)			if (_hx_tmp2) {
HXLINE( 532)				_hx_tmp1 = (this->get_height() > 0);
            			}
            			else {
HXLINE( 532)				_hx_tmp1 = false;
            			}
HXDLIN( 532)			if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 532)				::openfl::display::_internal::Context3DShape_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            			}
            		}
HXLINE( 533)		::openfl::display::_internal::Context3DTilemap_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


 ::Dynamic Tilemap_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_540___shouldCacheHardware)
HXDLIN( 540)		return true;
            	}


bool Tilemap_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_544___updateCacheBitmap)
HXLINE( 546)		bool _hx_tmp;
HXDLIN( 546)		bool _hx_tmp1;
HXDLIN( 546)		if (hx::IsNull( this->_hx___filters )) {
HXLINE( 546)			_hx_tmp1 = (renderer->_hx___type == HX_("opengl",6f,64,94,21));
            		}
            		else {
HXLINE( 546)			_hx_tmp1 = false;
            		}
HXDLIN( 546)		if (_hx_tmp1) {
HXLINE( 546)			_hx_tmp = hx::IsNull( this->_hx___cacheBitmap );
            		}
            		else {
HXLINE( 546)			_hx_tmp = false;
            		}
HXDLIN( 546)		if (_hx_tmp) {
HXLINE( 546)			return false;
            		}
HXLINE( 547)		return this->super::_hx___updateCacheBitmap(renderer,force);
            	}


Float Tilemap_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_558_get_height)
HXDLIN( 558)		int _hx_tmp = this->_hx___height;
HXDLIN( 558)		return (( (Float)(_hx_tmp) ) * ::Math_obj::abs(this->get_scaleY()));
            	}


Float Tilemap_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_564_set_height)
HXLINE( 565)		this->_hx___height = ::Std_obj::_hx_int(value);
HXLINE( 566)		int _hx_tmp = this->_hx___height;
HXDLIN( 566)		return (( (Float)(_hx_tmp) ) * ::Math_obj::abs(this->get_scaleY()));
            	}


int Tilemap_obj::get_numTiles(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_582_get_numTiles)
HXDLIN( 582)		return this->_hx___group->__length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,get_numTiles,return )

 ::openfl::display::Tileset Tilemap_obj::get_tileset(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_587_get_tileset)
HXDLIN( 587)		return this->_hx___tileset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,get_tileset,return )

 ::openfl::display::Tileset Tilemap_obj::set_tileset( ::openfl::display::Tileset value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_591_set_tileset)
HXLINE( 592)		if (hx::IsNotEq( value,this->_hx___tileset )) {
HXLINE( 594)			this->_hx___tileset = value;
HXLINE( 595)			this->_hx___group->set_tileset(value);
HXLINE( 596)			this->_hx___group->_hx___dirty = true;
HXLINE( 599)			if (!(this->_hx___renderDirty)) {
HXLINE( 599)				this->_hx___renderDirty = true;
HXDLIN( 599)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE( 603)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,set_tileset,return )

Float Tilemap_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_609_get_width)
HXDLIN( 609)		return (( (Float)(this->_hx___width) ) * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float Tilemap_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_615_set_width)
HXLINE( 616)		this->_hx___width = ::Std_obj::_hx_int(value);
HXLINE( 617)		return (( (Float)(this->_hx___width) ) * ::Math_obj::abs(this->_hx___scaleX));
            	}



hx::ObjectPtr< Tilemap_obj > Tilemap_obj::__new(int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing) {
	hx::ObjectPtr< Tilemap_obj > __this = new Tilemap_obj();
	__this->__construct(width,height,tileset,__o_smoothing);
	return __this;
}

hx::ObjectPtr< Tilemap_obj > Tilemap_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing) {
	Tilemap_obj *__this = (Tilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tilemap_obj), true, "openfl.display.Tilemap"));
	*(void **)__this = Tilemap_obj::_hx_vtable;
	__this->__construct(width,height,tileset,__o_smoothing);
	return __this;
}

Tilemap_obj::Tilemap_obj()
{
}

void Tilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tilemap);
	HX_MARK_MEMBER_NAME(tileAlphaEnabled,"tileAlphaEnabled");
	HX_MARK_MEMBER_NAME(tileBlendModeEnabled,"tileBlendModeEnabled");
	HX_MARK_MEMBER_NAME(tileColorTransformEnabled,"tileColorTransformEnabled");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(_hx___group,"__group");
	HX_MARK_MEMBER_NAME(_hx___tileset,"__tileset");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferDirty,"__bufferDirty");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Tilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileAlphaEnabled,"tileAlphaEnabled");
	HX_VISIT_MEMBER_NAME(tileBlendModeEnabled,"tileBlendModeEnabled");
	HX_VISIT_MEMBER_NAME(tileColorTransformEnabled,"tileColorTransformEnabled");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(_hx___group,"__group");
	HX_VISIT_MEMBER_NAME(_hx___tileset,"__tileset");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferDirty,"__bufferDirty");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Tilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tileset() ); }
		if (HX_FIELD_EQ(inName,"__group") ) { return hx::Val( _hx___group ); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"addTile") ) { return hx::Val( addTile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numTiles") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numTiles() ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"addTiles") ) { return hx::Val( addTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTiles") ) { return hx::Val( getTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTiles") ) { return hx::Val( setTiles_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return hx::Val( smoothing ); }
		if (HX_FIELD_EQ(inName,"__tileset") ) { return hx::Val( _hx___tileset ); }
		if (HX_FIELD_EQ(inName,"addTileAt") ) { return hx::Val( addTileAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileAt") ) { return hx::Val( getTileAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortTiles") ) { return hx::Val( sortTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapTiles") ) { return hx::Val( swapTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeTile") ) { return hx::Val( removeTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeTiles") ) { return hx::Val( removeTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapTilesAt") ) { return hx::Val( swapTilesAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tileset") ) { return hx::Val( get_tileset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tileset") ) { return hx::Val( set_tileset_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getTileIndex") ) { return hx::Val( getTileIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTileAt") ) { return hx::Val( removeTileAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTileIndex") ) { return hx::Val( setTileIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numTiles") ) { return hx::Val( get_numTiles_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferDirty") ) { return hx::Val( _hx___bufferDirty ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderFlash") ) { return hx::Val( _hx___renderFlash_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tileAlphaEnabled") ) { return hx::Val( tileAlphaEnabled ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"tileBlendModeEnabled") ) { return hx::Val( tileBlendModeEnabled ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tileColorTransformEnabled") ) { return hx::Val( tileColorTransformEnabled ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tileset(inValue.Cast<  ::openfl::display::Tileset >()) ); }
		if (HX_FIELD_EQ(inName,"__group") ) { _hx___group=inValue.Cast<  ::openfl::display::TileContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::openfl::display::_internal::Context3DBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tileset") ) { _hx___tileset=inValue.Cast<  ::openfl::display::Tileset >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferDirty") ) { _hx___bufferDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tileAlphaEnabled") ) { tileAlphaEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"tileBlendModeEnabled") ) { tileBlendModeEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tileColorTransformEnabled") ) { tileColorTransformEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("numTiles",5f,11,45,cd));
	outFields->push(HX_("tileAlphaEnabled",11,71,ce,dc));
	outFields->push(HX_("tileBlendModeEnabled",db,9d,a9,f4));
	outFields->push(HX_("tileColorTransformEnabled",ea,29,1c,dd));
	outFields->push(HX_("tileset",34,81,93,45));
	outFields->push(HX_("smoothing",74,d5,e1,95));
	outFields->push(HX_("__group",1f,0c,53,04));
	outFields->push(HX_("__tileset",14,d2,e1,c6));
	outFields->push(HX_("__buffer",20,28,c4,78));
	outFields->push(HX_("__bufferDirty",d2,23,94,bf));
	outFields->push(HX_("__height",07,73,7b,aa));
	outFields->push(HX_("__width",e6,0e,c1,34));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Tilemap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Tilemap_obj,tileAlphaEnabled),HX_("tileAlphaEnabled",11,71,ce,dc)},
	{hx::fsBool,(int)offsetof(Tilemap_obj,tileBlendModeEnabled),HX_("tileBlendModeEnabled",db,9d,a9,f4)},
	{hx::fsBool,(int)offsetof(Tilemap_obj,tileColorTransformEnabled),HX_("tileColorTransformEnabled",ea,29,1c,dd)},
	{hx::fsBool,(int)offsetof(Tilemap_obj,smoothing),HX_("smoothing",74,d5,e1,95)},
	{hx::fsObject /*  ::openfl::display::TileContainer */ ,(int)offsetof(Tilemap_obj,_hx___group),HX_("__group",1f,0c,53,04)},
	{hx::fsObject /*  ::openfl::display::Tileset */ ,(int)offsetof(Tilemap_obj,_hx___tileset),HX_("__tileset",14,d2,e1,c6)},
	{hx::fsObject /*  ::openfl::display::_internal::Context3DBuffer */ ,(int)offsetof(Tilemap_obj,_hx___buffer),HX_("__buffer",20,28,c4,78)},
	{hx::fsBool,(int)offsetof(Tilemap_obj,_hx___bufferDirty),HX_("__bufferDirty",d2,23,94,bf)},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___height),HX_("__height",07,73,7b,aa)},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___width),HX_("__width",e6,0e,c1,34)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String Tilemap_obj_sMemberFields[] = {
	HX_("tileAlphaEnabled",11,71,ce,dc),
	HX_("tileBlendModeEnabled",db,9d,a9,f4),
	HX_("tileColorTransformEnabled",ea,29,1c,dd),
	HX_("smoothing",74,d5,e1,95),
	HX_("__group",1f,0c,53,04),
	HX_("__tileset",14,d2,e1,c6),
	HX_("__buffer",20,28,c4,78),
	HX_("__bufferDirty",d2,23,94,bf),
	HX_("__height",07,73,7b,aa),
	HX_("__width",e6,0e,c1,34),
	HX_("addTile",ef,0d,3a,89),
	HX_("addTileAt",c2,e0,4c,d6),
	HX_("addTiles",a4,23,92,89),
	HX_("contains",1f,5a,7b,2c),
	HX_("getTileAt",f7,34,7f,9a),
	HX_("getTileIndex",8e,95,c6,58),
	HX_("getTiles",0f,0d,0c,70),
	HX_("removeTile",92,05,1c,ca),
	HX_("removeTileAt",25,47,56,8d),
	HX_("removeTiles",a1,da,68,0e),
	HX_("setTileIndex",02,b9,bf,6d),
	HX_("setTiles",83,66,69,1e),
	HX_("sortTiles",47,d1,a8,18),
	HX_("swapTiles",f2,0d,e2,85),
	HX_("swapTilesAt",85,27,f7,4c),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("__getBounds",8b,58,a0,10),
	HX_("__hitTest",25,b1,cd,63),
	HX_("__renderCairo",32,9e,42,55),
	HX_("__renderCanvas",ee,db,58,48),
	HX_("__renderDOM",ac,f5,83,fb),
	HX_("__renderDOMClear",41,dc,ee,79),
	HX_("__renderFlash",5a,a3,b5,16),
	HX_("__renderGL",1b,1e,14,56),
	HX_("__renderGLMask",a7,34,7c,b4),
	HX_("__shouldCacheHardware",b7,af,f5,89),
	HX_("__updateCacheBitmap",28,11,07,27),
	HX_("get_height",b0,77,d3,f2),
	HX_("set_height",24,16,51,f6),
	HX_("get_numTiles",68,c5,5e,82),
	HX_("get_tileset",4b,e1,8d,cb),
	HX_("set_tileset",57,e8,fa,d5),
	HX_("get_width",5d,12,0c,0e),
	HX_("set_width",69,fe,5c,f1),
	::String(null()) };

hx::Class Tilemap_obj::__mClass;

void Tilemap_obj::__register()
{
	Tilemap_obj _hx_dummy;
	Tilemap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.display.Tilemap",04,bd,49,b4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tilemap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
