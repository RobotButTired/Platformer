// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_Weapon
#include <Weapon.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_9_new,"Inventory","new",0x5d57e56e,"Inventory.new","Inventory.hx",9,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_55_update,"Inventory","update",0x0f3d8dbb,"Inventory.update","Inventory.hx",55,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_89_onDown,"Inventory","onDown",0x6d3008d3,"Inventory.onDown","Inventory.hx",89,0xbb8a21c2)
HX_LOCAL_STACK_FRAME(_hx_pos_8d3aaf1e948ef258_96_get_weapon,"Inventory","get_weapon",0x3c85cf57,"Inventory.get_weapon","Inventory.hx",96,0xbb8a21c2)

void Inventory_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_9_new)
HXLINE(  17)		this->indicatorSize = ((Float)50.0);
HXLINE(  11)		this->weapon = ::Weapon_obj::gun_dyn();
HXLINE(  21)		this->panel =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  22)		this->gunIndicator =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  23)		this->gunIndicator->get_graphics()->beginFill(12303291,null());
HXLINE(  24)		this->gunIndicator->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),this->indicatorSize,this->indicatorSize);
HXLINE(  25)		this->gunIndicator->get_graphics()->endFill();
HXLINE(  26)		this->panel->addChild(this->gunIndicator);
HXLINE(  27)		this->gunReload =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  29)		this->grenadeIndicator =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  30)		this->grenadeIndicator->get_graphics()->beginFill(12303291,null());
HXLINE(  31)		this->grenadeIndicator->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),this->indicatorSize,this->indicatorSize);
HXLINE(  32)		this->grenadeIndicator->get_graphics()->endFill();
HXLINE(  33)		this->grenadeIndicator->set_x(( (Float)(55) ));
HXLINE(  34)		this->panel->addChild(this->grenadeIndicator);
HXLINE(  35)		this->grenadeReload =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  37)		 ::openfl::text::TextField textGun =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  38)		textGun->set_text(HX_("GUN",60,2a,36,00));
HXLINE(  39)		textGun->set_width(( (Float)(50) ));
HXLINE(  40)		textGun->set_height(( (Float)(50) ));
HXLINE(  41)		textGun->mouseEnabled = false;
HXLINE(  42)		this->panel->addChild(textGun);
HXLINE(  43)		 ::openfl::text::TextField textGrenade =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  44)		textGrenade->set_text(HX_("GRE\nNA\nDE",a8,3a,37,1c));
HXLINE(  45)		textGrenade->set_width(( (Float)(50) ));
HXLINE(  46)		textGrenade->set_height(( (Float)(50) ));
HXLINE(  47)		textGrenade->set_x(( (Float)(55) ));
HXLINE(  48)		textGrenade->mouseEnabled = false;
HXLINE(  49)		this->panel->addChild(textGrenade);
HXLINE(  51)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onDown_dyn(),null(),null(),null());
            	}

Dynamic Inventory_obj::__CreateEmpty() { return new Inventory_obj; }

void *Inventory_obj::_hx_vtable = 0;

Dynamic Inventory_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Inventory_obj > _hx_result = new Inventory_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Inventory_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07a02998;
}

void Inventory_obj::update( ::Player player){
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_55_update)
HXLINE(  56)		if ((player->get_gunCounter() != 0)) {
HXLINE(  58)			this->gunIndicator->addChild(this->gunReload);
HXLINE(  59)			this->gunReload->get_graphics()->clear();
HXLINE(  60)			this->gunReload->get_graphics()->beginFill(6710886,null());
HXLINE(  61)			 ::openfl::display::Graphics _hx_tmp = this->gunReload->get_graphics();
HXDLIN(  61)			Float _hx_tmp1 = this->indicatorSize;
HXDLIN(  61)			Float _hx_tmp2 = this->indicatorSize;
HXDLIN(  61)			int _hx_tmp3 = ::Main_obj::get_FPS();
HXDLIN(  61)			Float _hx_tmp4 = (_hx_tmp2 / (( (Float)(_hx_tmp3) ) / player->get_rateOfFire()));
HXDLIN(  61)			_hx_tmp->drawRect(( (Float)(0) ),( (Float)(0) ),_hx_tmp1,(_hx_tmp4 * ( (Float)(player->get_gunCounter()) )));
HXLINE(  62)			this->gunReload->get_graphics()->endFill();
            		}
HXLINE(  64)		if ((player->get_grenadeCounter() != 0)) {
HXLINE(  66)			this->grenadeIndicator->addChild(this->grenadeReload);
HXLINE(  67)			this->grenadeReload->get_graphics()->clear();
HXLINE(  68)			this->grenadeReload->get_graphics()->beginFill(6710886,null());
HXLINE(  69)			 ::openfl::display::Graphics _hx_tmp5 = this->grenadeReload->get_graphics();
HXDLIN(  69)			Float _hx_tmp6 = this->indicatorSize;
HXDLIN(  69)			Float _hx_tmp7 = this->indicatorSize;
HXDLIN(  69)			int _hx_tmp8 = ::Main_obj::get_FPS();
HXDLIN(  69)			Float _hx_tmp9 = (_hx_tmp7 / (( (Float)(_hx_tmp8) ) / player->get_rateOfThrow()));
HXDLIN(  69)			_hx_tmp5->drawRect(( (Float)(0) ),( (Float)(0) ),_hx_tmp6,(_hx_tmp9 * ( (Float)(player->get_grenadeCounter()) )));
HXLINE(  70)			this->grenadeReload->get_graphics()->endFill();
            		}
HXLINE(  73)		this->panel->get_graphics()->clear();
HXLINE(  74)		if (hx::IsEq( this->weapon,::Weapon_obj::gun_dyn() )) {
HXLINE(  76)			this->panel->get_graphics()->lineStyle(4,16777215,null(),null(),null(),null(),null(),null());
HXLINE(  77)			this->panel->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(50) ),( (Float)(50) ));
HXLINE(  78)			this->panel->get_graphics()->endFill();
            		}
            		else {
HXLINE(  80)			if (hx::IsEq( this->weapon,::Weapon_obj::grenade_dyn() )) {
HXLINE(  82)				this->panel->get_graphics()->lineStyle(4,16777215,null(),null(),null(),null(),null(),null());
HXLINE(  83)				this->panel->get_graphics()->drawRect(( (Float)(55) ),( (Float)(0) ),( (Float)(50) ),( (Float)(50) ));
HXLINE(  84)				this->panel->get_graphics()->endFill();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,update,(void))

void Inventory_obj::onDown( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_89_onDown)
HXDLIN(  89)		if ((e->keyCode == 49)) {
HXLINE(  90)			this->weapon = ::Weapon_obj::gun_dyn();
            		}
            		else {
HXLINE(  91)			if ((e->keyCode == 50)) {
HXLINE(  92)				this->weapon = ::Weapon_obj::grenade_dyn();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Inventory_obj,onDown,(void))

 ::Weapon Inventory_obj::get_weapon(){
            	HX_STACKFRAME(&_hx_pos_8d3aaf1e948ef258_96_get_weapon)
HXDLIN(  96)		return this->weapon;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Inventory_obj,get_weapon,return )


hx::ObjectPtr< Inventory_obj > Inventory_obj::__new() {
	hx::ObjectPtr< Inventory_obj > __this = new Inventory_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Inventory_obj > Inventory_obj::__alloc(hx::Ctx *_hx_ctx) {
	Inventory_obj *__this = (Inventory_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Inventory_obj), true, "Inventory"));
	*(void **)__this = Inventory_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Inventory_obj::Inventory_obj()
{
}

void Inventory_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Inventory);
	HX_MARK_MEMBER_NAME(weapon,"weapon");
	HX_MARK_MEMBER_NAME(panel,"panel");
	HX_MARK_MEMBER_NAME(gunIndicator,"gunIndicator");
	HX_MARK_MEMBER_NAME(gunReload,"gunReload");
	HX_MARK_MEMBER_NAME(grenadeIndicator,"grenadeIndicator");
	HX_MARK_MEMBER_NAME(grenadeReload,"grenadeReload");
	HX_MARK_MEMBER_NAME(indicatorSize,"indicatorSize");
	HX_MARK_END_CLASS();
}

void Inventory_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(weapon,"weapon");
	HX_VISIT_MEMBER_NAME(panel,"panel");
	HX_VISIT_MEMBER_NAME(gunIndicator,"gunIndicator");
	HX_VISIT_MEMBER_NAME(gunReload,"gunReload");
	HX_VISIT_MEMBER_NAME(grenadeIndicator,"grenadeIndicator");
	HX_VISIT_MEMBER_NAME(grenadeReload,"grenadeReload");
	HX_VISIT_MEMBER_NAME(indicatorSize,"indicatorSize");
}

hx::Val Inventory_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"panel") ) { return hx::Val( panel ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"weapon") ) { return hx::Val( weapon ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDown") ) { return hx::Val( onDown_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gunReload") ) { return hx::Val( gunReload ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_weapon") ) { return hx::Val( get_weapon_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gunIndicator") ) { return hx::Val( gunIndicator ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"grenadeReload") ) { return hx::Val( grenadeReload ); }
		if (HX_FIELD_EQ(inName,"indicatorSize") ) { return hx::Val( indicatorSize ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"grenadeIndicator") ) { return hx::Val( grenadeIndicator ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Inventory_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"panel") ) { panel=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"weapon") ) { weapon=inValue.Cast<  ::Weapon >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gunReload") ) { gunReload=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gunIndicator") ) { gunIndicator=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"grenadeReload") ) { grenadeReload=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indicatorSize") ) { indicatorSize=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"grenadeIndicator") ) { grenadeIndicator=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Inventory_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("weapon",dc,96,63,fc));
	outFields->push(HX_("panel",04,7b,52,bd));
	outFields->push(HX_("gunIndicator",2f,69,2c,2f));
	outFields->push(HX_("gunReload",f9,35,dc,19));
	outFields->push(HX_("grenadeIndicator",a1,02,d2,96));
	outFields->push(HX_("grenadeReload",47,21,0a,b5));
	outFields->push(HX_("indicatorSize",30,48,4c,65));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Inventory_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Weapon */ ,(int)offsetof(Inventory_obj,weapon),HX_("weapon",dc,96,63,fc)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Inventory_obj,panel),HX_("panel",04,7b,52,bd)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Inventory_obj,gunIndicator),HX_("gunIndicator",2f,69,2c,2f)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Inventory_obj,gunReload),HX_("gunReload",f9,35,dc,19)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Inventory_obj,grenadeIndicator),HX_("grenadeIndicator",a1,02,d2,96)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Inventory_obj,grenadeReload),HX_("grenadeReload",47,21,0a,b5)},
	{hx::fsFloat,(int)offsetof(Inventory_obj,indicatorSize),HX_("indicatorSize",30,48,4c,65)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Inventory_obj_sStaticStorageInfo = 0;
#endif

static ::String Inventory_obj_sMemberFields[] = {
	HX_("weapon",dc,96,63,fc),
	HX_("panel",04,7b,52,bd),
	HX_("gunIndicator",2f,69,2c,2f),
	HX_("gunReload",f9,35,dc,19),
	HX_("grenadeIndicator",a1,02,d2,96),
	HX_("grenadeReload",47,21,0a,b5),
	HX_("indicatorSize",30,48,4c,65),
	HX_("update",09,86,05,87),
	HX_("onDown",21,01,f8,e4),
	HX_("get_weapon",a5,06,eb,ec),
	::String(null()) };

hx::Class Inventory_obj::__mClass;

void Inventory_obj::__register()
{
	Inventory_obj _hx_dummy;
	Inventory_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Inventory",7c,56,89,ea);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Inventory_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Inventory_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inventory_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inventory_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

