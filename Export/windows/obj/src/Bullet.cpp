// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_916b41f5f19492cb_9_new,"Bullet","new",0xf3208054,"Bullet.new","Bullet.hx",9,0xb42ce59c)
HX_LOCAL_STACK_FRAME(_hx_pos_916b41f5f19492cb_20_move,"Bullet","move",0xc8ae289d,"Bullet.move","Bullet.hx",20,0xb42ce59c)
HX_LOCAL_STACK_FRAME(_hx_pos_916b41f5f19492cb_24_setBullet,"Bullet","setBullet",0x16a72678,"Bullet.setBullet","Bullet.hx",24,0xb42ce59c)
HX_LOCAL_STACK_FRAME(_hx_pos_916b41f5f19492cb_40_checkCollisionWithEnemy,"Bullet","checkCollisionWithEnemy",0x7bc7806c,"Bullet.checkCollisionWithEnemy","Bullet.hx",40,0xb42ce59c)

void Bullet_obj::__construct( ::Player player){
            	HX_STACKFRAME(&_hx_pos_916b41f5f19492cb_9_new)
HXLINE(  10)		super::__construct();
HXLINE(  12)		this->get_graphics()->beginFill(255,null());
HXLINE(  13)		this->get_graphics()->drawRect(((Float)-3.5),((Float)-0.5),( (Float)(7) ),( (Float)(4) ));
HXLINE(  14)		this->get_graphics()->endFill();
HXLINE(  15)		this->setBullet(player);
            	}

Dynamic Bullet_obj::__CreateEmpty() { return new Bullet_obj; }

void *Bullet_obj::_hx_vtable = 0;

Dynamic Bullet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bullet_obj > _hx_result = new Bullet_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Bullet_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x09250662) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x09250662;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Bullet_obj::move(){
            	HX_STACKFRAME(&_hx_pos_916b41f5f19492cb_20_move)
HXDLIN(  20)		 ::Bullet _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  20)		Float _hx_tmp = _g->get_x();
HXDLIN(  20)		_g->set_x((_hx_tmp + this->speed));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bullet_obj,move,(void))

void Bullet_obj::setBullet( ::Player player){
            	HX_STACKFRAME(&_hx_pos_916b41f5f19492cb_24_setBullet)
HXDLIN(  24)		if (hx::IsEq( player->get_direction(),::Direction_obj::right_dyn() )) {
HXLINE(  26)			this->set_x((player->get_x() + ((Float)10.0)));
HXLINE(  27)			this->set_y(player->get_y());
HXLINE(  28)			this->speed = ((Float)20.0);
            		}
            		else {
HXLINE(  32)			this->set_x((player->get_x() - ((Float)10.0)));
HXLINE(  33)			this->set_y(player->get_y());
HXLINE(  34)			this->speed = ((Float)-20.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bullet_obj,setBullet,(void))

bool Bullet_obj::checkCollisionWithEnemy( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_916b41f5f19492cb_40_checkCollisionWithEnemy)
HXDLIN(  40)		bool _hx_tmp;
HXDLIN(  40)		bool _hx_tmp1;
HXDLIN(  40)		bool _hx_tmp2;
HXDLIN(  40)		Float _hx_tmp3 = this->get_x();
HXDLIN(  40)		Float _hx_tmp4 = (_hx_tmp3 + (this->get_width() / ( (Float)(2) )));
HXDLIN(  40)		Float _hx_tmp5 = enemy->get_x();
HXDLIN(  40)		if ((_hx_tmp4 > (_hx_tmp5 - (enemy->get_width() / ( (Float)(2) ))))) {
HXDLIN(  40)			Float _hx_tmp6 = this->get_x();
HXDLIN(  40)			Float _hx_tmp7 = (_hx_tmp6 - (this->get_width() / ( (Float)(2) )));
HXDLIN(  40)			Float _hx_tmp8 = enemy->get_x();
HXDLIN(  40)			_hx_tmp2 = (_hx_tmp7 < (_hx_tmp8 + (enemy->get_width() / ( (Float)(2) ))));
            		}
            		else {
HXDLIN(  40)			_hx_tmp2 = false;
            		}
HXDLIN(  40)		if (_hx_tmp2) {
HXLINE(  41)			Float _hx_tmp9 = this->get_y();
HXDLIN(  41)			Float _hx_tmp10 = (_hx_tmp9 + (this->get_height() / ( (Float)(2) )));
HXDLIN(  41)			Float _hx_tmp11 = enemy->get_y();
HXLINE(  40)			_hx_tmp1 = (_hx_tmp10 > (_hx_tmp11 - (enemy->get_height() / ( (Float)(2) ))));
            		}
            		else {
HXDLIN(  40)			_hx_tmp1 = false;
            		}
HXDLIN(  40)		if (_hx_tmp1) {
HXLINE(  41)			Float _hx_tmp12 = this->get_y();
HXDLIN(  41)			Float _hx_tmp13 = (_hx_tmp12 - (this->get_height() / ( (Float)(2) )));
HXDLIN(  41)			Float _hx_tmp14 = enemy->get_y();
HXLINE(  40)			_hx_tmp = (_hx_tmp13 < (_hx_tmp14 + (enemy->get_height() / ( (Float)(2) ))));
            		}
            		else {
HXDLIN(  40)			_hx_tmp = false;
            		}
HXDLIN(  40)		if (_hx_tmp) {
HXLINE(  43)			return true;
            		}
            		else {
HXLINE(  46)			return false;
            		}
HXLINE(  40)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bullet_obj,checkCollisionWithEnemy,return )


hx::ObjectPtr< Bullet_obj > Bullet_obj::__new( ::Player player) {
	hx::ObjectPtr< Bullet_obj > __this = new Bullet_obj();
	__this->__construct(player);
	return __this;
}

hx::ObjectPtr< Bullet_obj > Bullet_obj::__alloc(hx::Ctx *_hx_ctx, ::Player player) {
	Bullet_obj *__this = (Bullet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bullet_obj), true, "Bullet"));
	*(void **)__this = Bullet_obj::_hx_vtable;
	__this->__construct(player);
	return __this;
}

Bullet_obj::Bullet_obj()
{
}

hx::Val Bullet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setBullet") ) { return hx::Val( setBullet_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"checkCollisionWithEnemy") ) { return hx::Val( checkCollisionWithEnemy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Bullet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bullet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("speed",87,97,69,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Bullet_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Bullet_obj,speed),HX_("speed",87,97,69,81)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Bullet_obj_sStaticStorageInfo = 0;
#endif

static ::String Bullet_obj_sMemberFields[] = {
	HX_("speed",87,97,69,81),
	HX_("move",11,e3,60,48),
	HX_("setBullet",84,07,38,34),
	HX_("checkCollisionWithEnemy",78,9e,8b,58),
	::String(null()) };

hx::Class Bullet_obj::__mClass;

void Bullet_obj::__register()
{
	Bullet_obj _hx_dummy;
	Bullet_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Bullet",62,06,25,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bullet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bullet_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bullet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bullet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

