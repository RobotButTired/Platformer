// Generated by Haxe 4.0.1
#ifndef INCLUDED_Bird
#define INCLUDED_Bird

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
HX_DECLARE_CLASS0(Bird)
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Point)



class HXCPP_CLASS_ATTRIBUTES Bird_obj : public  ::Enemy_obj
{
	public:
		typedef  ::Enemy_obj super;
		typedef Bird_obj OBJ_;
		Bird_obj();

	public:
		enum { _hx_ClassId = 0x2bf02559 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Bird")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Bird"); }
		static hx::ObjectPtr< Bird_obj > __new();
		static hx::ObjectPtr< Bird_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bird_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bird",59,25,f0,2b); }

		 ::openfl::geom::Point TV;
		int rate;
		int speedMax;
		void move( ::Player player,::Array< ::Dynamic> level);

};


#endif /* INCLUDED_Bird */ 
