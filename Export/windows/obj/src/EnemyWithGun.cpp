// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bonus
#include <Bonus.h>
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyWithGun
#include <EnemyWithGun.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09fd3534755066e2_5_new,"EnemyWithGun","new",0x89f404c4,"EnemyWithGun.new","EnemyWithGun.hx",5,0xf2d7bf2c)
HX_LOCAL_STACK_FRAME(_hx_pos_09fd3534755066e2_28_move,"EnemyWithGun","move",0x2aee862d,"EnemyWithGun.move","EnemyWithGun.hx",28,0xf2d7bf2c)
HX_LOCAL_STACK_FRAME(_hx_pos_09fd3534755066e2_68_doShot,"EnemyWithGun","doShot",0xf7e81c41,"EnemyWithGun.doShot","EnemyWithGun.hx",68,0xf2d7bf2c)

void EnemyWithGun_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_09fd3534755066e2_5_new)
HXLINE(  11)		this->counter = 0;
HXLINE(  10)		this->shot = false;
HXLINE(   9)		this->shooting = false;
HXLINE(   8)		this->shootingTime = ((Float)1.0);
HXLINE(   7)		this->rateOfFire = ((Float)0.5);
HXLINE(  14)		super::__construct();
HXLINE(  15)		this->color = 16711935;
HXLINE(  16)		this->hitBox =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-15.),((Float)-20.),30,40);
HXLINE(  17)		this->drawHitBox();
HXLINE(  18)		this->speedX = ((Float)1.5);
HXLINE(  19)		if (::Bonus_obj::bonusIsUsed) {
HXLINE(  21)			 ::EnemyWithGun _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  21)			_hx_tmp->speedY = (_hx_tmp->speedY * ((Float)0.25));
HXLINE(  22)			this->speedX = ((Float)0.375);
HXLINE(  23)			 ::EnemyWithGun _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  23)			_hx_tmp1->gravity = (_hx_tmp1->gravity * ((Float)0.25));
            		}
            	}

Dynamic EnemyWithGun_obj::__CreateEmpty() { return new EnemyWithGun_obj; }

void *EnemyWithGun_obj::_hx_vtable = 0;

Dynamic EnemyWithGun_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EnemyWithGun_obj > _hx_result = new EnemyWithGun_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EnemyWithGun_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x03a88228) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3b129936) {
			if (inClassId<=(int)0x3882f6a4) {
				return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3882f6a4;
			} else {
				return inClassId==(int)0x3b129936;
			}
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void EnemyWithGun_obj::move( ::Player player,::Array< ::Dynamic> level){
            	HX_STACKFRAME(&_hx_pos_09fd3534755066e2_28_move)
HXLINE(  29)		if (!(this->shooting)) {
HXLINE(  31)			Float _hx_tmp = player->get_x();
HXDLIN(  31)			if ((_hx_tmp < this->get_x())) {
HXLINE(  33)				{
HXLINE(  33)					 ::EnemyWithGun _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)					Float _hx_tmp1 = _g->get_x();
HXDLIN(  33)					_g->set_x((_hx_tmp1 - this->speedX));
            				}
HXLINE(  34)				this->direction = ::Direction_obj::left_dyn();
            			}
            			else {
HXLINE(  36)				Float _hx_tmp2 = player->get_x();
HXDLIN(  36)				if ((_hx_tmp2 > this->get_x())) {
HXLINE(  38)					{
HXLINE(  38)						 ::EnemyWithGun _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  38)						Float _hx_tmp3 = _g1->get_x();
HXDLIN(  38)						_g1->set_x((_hx_tmp3 + this->speedX));
            					}
HXLINE(  39)					this->direction = ::Direction_obj::right_dyn();
            				}
            			}
HXLINE(  41)			++this->counter;
HXLINE(  42)			int _hx_tmp4 = this->counter;
HXDLIN(  42)			int _hx_tmp5 = ::Main_obj::get_FPS();
HXDLIN(  42)			if ((_hx_tmp4 >= (( (Float)(_hx_tmp5) ) / this->rateOfFire))) {
HXLINE(  44)				this->shooting = true;
HXLINE(  45)				this->counter = 0;
            			}
            		}
            		else {
HXLINE(  50)			int _hx_tmp6 = this->counter;
HXDLIN(  50)			int _hx_tmp7 = ::Main_obj::get_FPS();
HXDLIN(  50)			if ((_hx_tmp6 == ::Math_obj::floor((((( (Float)(_hx_tmp7) ) * this->shootingTime) / ( (Float)(6) )) * ( (Float)(5) ))))) {
HXLINE(  52)				this->shot = true;
            			}
HXLINE(  54)			++this->counter;
HXLINE(  55)			int _hx_tmp8 = this->counter;
HXDLIN(  55)			int _hx_tmp9 = ::Main_obj::get_FPS();
HXDLIN(  55)			if ((_hx_tmp8 >= (( (Float)(_hx_tmp9) ) * this->shootingTime))) {
HXLINE(  57)				this->shooting = false;
HXLINE(  58)				this->counter = 0;
            			}
            		}
HXLINE(  61)		 ::EnemyWithGun _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  61)		_hx_tmp10->speedY = (_hx_tmp10->speedY + this->gravity);
HXLINE(  62)		{
HXLINE(  62)			 ::EnemyWithGun _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  62)			Float _hx_tmp11 = _g2->get_y();
HXDLIN(  62)			_g2->set_y((_hx_tmp11 + this->speedY));
            		}
HXLINE(  63)		this->doCollisionsWithTiles(level);
            	}


void EnemyWithGun_obj::doShot( ::Game game){
            	HX_GC_STACKFRAME(&_hx_pos_09fd3534755066e2_68_doShot)
HXDLIN(  68)		if (this->shot) {
HXLINE(  70)			 ::Bullet bullet;
HXLINE(  71)			if ((game->spentEnemyBullets->length > 0)) {
HXLINE(  73)				::Array< ::Dynamic> game1 = game->enemyBullets;
HXDLIN(  73)				game1->push(game->spentEnemyBullets->pop().StaticCast<  ::Bullet >());
HXLINE(  74)				game->enemyBullets->__get((game->enemyBullets->length - 1)).StaticCast<  ::Bullet >()->setBullet(hx::ObjectPtr<OBJ_>(this));
HXLINE(  75)				game->addChild(game->enemyBullets->__get((game->enemyBullets->length - 1)).StaticCast<  ::Bullet >());
            			}
            			else {
HXLINE(  79)				bullet =  ::Bullet_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),1);
HXLINE(  80)				game->enemyBullets->push(bullet);
HXLINE(  81)				game->addChild(bullet);
            			}
HXLINE(  83)			this->shot = false;
            		}
            	}



hx::ObjectPtr< EnemyWithGun_obj > EnemyWithGun_obj::__new() {
	hx::ObjectPtr< EnemyWithGun_obj > __this = new EnemyWithGun_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< EnemyWithGun_obj > EnemyWithGun_obj::__alloc(hx::Ctx *_hx_ctx) {
	EnemyWithGun_obj *__this = (EnemyWithGun_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EnemyWithGun_obj), true, "EnemyWithGun"));
	*(void **)__this = EnemyWithGun_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EnemyWithGun_obj::EnemyWithGun_obj()
{
}

hx::Val EnemyWithGun_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"shot") ) { return hx::Val( shot ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"doShot") ) { return hx::Val( doShot_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"counter") ) { return hx::Val( counter ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shooting") ) { return hx::Val( shooting ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rateOfFire") ) { return hx::Val( rateOfFire ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shootingTime") ) { return hx::Val( shootingTime ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EnemyWithGun_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"shot") ) { shot=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"counter") ) { counter=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shooting") ) { shooting=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rateOfFire") ) { rateOfFire=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shootingTime") ) { shootingTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EnemyWithGun_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rateOfFire",6d,67,1b,61));
	outFields->push(HX_("shootingTime",10,26,d7,34));
	outFields->push(HX_("shooting",63,c0,75,2e));
	outFields->push(HX_("shot",fa,d4,52,4c));
	outFields->push(HX_("counter",fc,ae,59,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo EnemyWithGun_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(EnemyWithGun_obj,rateOfFire),HX_("rateOfFire",6d,67,1b,61)},
	{hx::fsFloat,(int)offsetof(EnemyWithGun_obj,shootingTime),HX_("shootingTime",10,26,d7,34)},
	{hx::fsBool,(int)offsetof(EnemyWithGun_obj,shooting),HX_("shooting",63,c0,75,2e)},
	{hx::fsBool,(int)offsetof(EnemyWithGun_obj,shot),HX_("shot",fa,d4,52,4c)},
	{hx::fsInt,(int)offsetof(EnemyWithGun_obj,counter),HX_("counter",fc,ae,59,1d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EnemyWithGun_obj_sStaticStorageInfo = 0;
#endif

static ::String EnemyWithGun_obj_sMemberFields[] = {
	HX_("rateOfFire",6d,67,1b,61),
	HX_("shootingTime",10,26,d7,34),
	HX_("shooting",63,c0,75,2e),
	HX_("shot",fa,d4,52,4c),
	HX_("counter",fc,ae,59,1d),
	HX_("move",11,e3,60,48),
	HX_("doShot",25,7a,56,1c),
	::String(null()) };

hx::Class EnemyWithGun_obj::__mClass;

void EnemyWithGun_obj::__register()
{
	EnemyWithGun_obj _hx_dummy;
	EnemyWithGun_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("EnemyWithGun",d2,92,e1,fb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EnemyWithGun_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EnemyWithGun_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnemyWithGun_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnemyWithGun_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

