// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_BackGround
#include <BackGround.h>
#endif
#ifndef INCLUDED_Bonus
#include <Bonus.h>
#endif
#ifndef INCLUDED_BonusType
#include <BonusType.h>
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_CollisionDirection
#include <CollisionDirection.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_GameLevel
#include <GameLevel.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_State
#include <State.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69efd8c9269cf369_14_new,"Game","new",0x79ba3204,"Game.new","Game.hx",14,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_117_pause,"Game","pause",0x2654e99a,"Game.pause","Game.hx",117,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_127_quitButtonClick,"Game","quitButtonClick",0x3679e10b,"Game.quitButtonClick","Game.hx",127,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_130_quitButtonOver,"Game","quitButtonOver",0x51ad35f1,"Game.quitButtonOver","Game.hx",130,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_135_quitButtonOut,"Game","quitButtonOut",0x0f4a3e91,"Game.quitButtonOut","Game.hx",135,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_142_get_quitButtonIsPressed,"Game","get_quitButtonIsPressed",0x5edb1ab2,"Game.get_quitButtonIsPressed","Game.hx",142,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_146_update,"Game","update",0xfb78c2e5,"Game.update","Game.hx",146,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_183_checkCollisionWithTile,"Game","checkCollisionWithTile",0xb72889da,"Game.checkCollisionWithTile","Game.hx",183,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_216_doCollisionsWithTiles,"Game","doCollisionsWithTiles",0xff7a0377,"Game.doCollisionsWithTiles","Game.hx",216,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_230_playerJump,"Game","playerJump",0x8a147bcb,"Game.playerJump","Game.hx",230,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_241_bulletsMove,"Game","bulletsMove",0x74d16946,"Game.bulletsMove","Game.hx",241,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_259_generateEnemies,"Game","generateEnemies",0x480cf995,"Game.generateEnemies","Game.hx",259,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_273_generateEnemy,"Game","generateEnemy",0x60fe3977,"Game.generateEnemy","Game.hx",273,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_299_moveEnemies,"Game","moveEnemies",0x96614739,"Game.moveEnemies","Game.hx",299,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_309_doCollisionsWithBullet,"Game","doCollisionsWithBullet",0x41b0c010,"Game.doCollisionsWithBullet","Game.hx",309,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_338_get_gameIsOver,"Game","get_gameIsOver",0x9b104115,"Game.get_gameIsOver","Game.hx",338,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_342_get_gamePoints,"Game","get_gamePoints",0x2b1efcda,"Game.get_gamePoints","Game.hx",342,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_346_doCollidionWithEnemies,"Game","doCollidionWithEnemies",0x085f8ba6,"Game.doCollidionWithEnemies","Game.hx",346,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_360_bonusBuf,"Game","bonusBuf",0x77d8edb0,"Game.bonusBuf","Game.hx",360,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_378_spawnBonus,"Game","spawnBonus",0xd1f89d40,"Game.spawnBonus","Game.hx",378,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_390_doBonusDestroy,"Game","doBonusDestroy",0x45505122,"Game.doBonusDestroy","Game.hx",390,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_24_boot,"Game","boot",0x014a920e,"Game.boot","Game.hx",24,0x56a4f9ec)

void Game_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_14_new)
HXLINE(  42)		this->counter = 0;
HXLINE(  40)		this->spawnDelay = ((Float)1.0);
HXLINE(  39)		this->maxEnemies = 4;
HXLINE(  31)		this->gamePoints = 0;
HXLINE(  27)		this->gameIsOver = false;
HXLINE(  21)		this->pauseIsPressed = false;
HXLINE(  20)		this->quitButtonIsPressed = false;
HXLINE(  46)		super::__construct();
HXLINE(  47)		this->sizeWidth = width;
HXLINE(  48)		this->sizeHeight = height;
HXLINE(  50)		this->backGround =  ::BackGround_obj::__alloc( HX_CTX ,HX_("gameScreen",fe,24,d3,89));
HXLINE(  52)		this->addChild(this->backGround);
HXLINE(  55)		this->gameLevel =  ::GameLevel_obj::__alloc( HX_CTX ,this->sizeWidth,this->sizeHeight);
HXLINE(  56)		this->addChild(this->gameLevel);
HXLINE(  59)		this->bullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  60)		this->spentBullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  64)		::Game_obj::jumpPower = ((Float)15.0);
HXLINE(  65)		this->player =  ::Player_obj::__alloc( HX_CTX );
HXLINE(  66)		this->player->set_x(( (Float)(100) ));
HXLINE(  67)		this->player->set_y((( (Float)(::Main_obj::sizeHeight) ) / ( (Float)(2) )));
HXLINE(  68)		this->addChild(this->player);
HXLINE(  71)		this->enemies = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  72)		this->deadEnemies = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		::Bonus_obj::bonusIsUsed = false;
HXLINE(  77)		::Bonus_obj::haveBonus = false;
HXLINE(  84)		this->pointsField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  85)		 ::openfl::text::TextField _hx_tmp = this->pointsField;
HXDLIN(  85)		_hx_tmp->set_text(::Std_obj::string(this->gamePoints));
HXLINE(  86)		this->pointsField->set_x((( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(2) )));
HXLINE(  87)		this->pointsField->set_y(( (Float)(0) ));
HXLINE(  88)		this->pointsField->set_scaleX(((Float)2.0));
HXLINE(  89)		this->pointsField->set_scaleY(((Float)2.0));
HXLINE(  90)		this->pointsField->mouseEnabled = false;
HXLINE(  91)		this->addChild(this->pointsField);
HXLINE(  95)		this->quitButton =  ::Button_obj::__alloc( HX_CTX ,(( (Float)(this->sizeWidth) ) / ( (Float)(2) )),(( (Float)(this->sizeHeight) ) / ( (Float)(2) )),HX_("QUIT",cf,07,cb,35));
HXLINE(  96)		this->quitButton->set_x((( (Float)((this->sizeWidth * 7)) ) / ( (Float)(8) )));
HXLINE(  97)		this->quitButton->set_y((( (Float)(this->sizeHeight) ) / ( (Float)(25) )));
HXLINE(  99)		this->addChild(this->quitButton);
HXLINE( 101)		this->quitButton->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->quitButtonOver_dyn(),null(),null(),null());
HXLINE( 102)		this->quitButton->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->quitButtonOut_dyn(),null(),null(),null());
HXLINE( 103)		this->quitButton->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->quitButtonClick_dyn(),null(),null(),null());
HXLINE( 104)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->pause_dyn(),null(),null(),null());
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

void *Game_obj::_hx_vtable = 0;

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Game_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2f382012) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2f382012;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Game_obj::pause( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_117_pause)
HXDLIN( 117)		if ((e->keyCode == 120)) {
HXLINE( 119)			if (!(this->pauseIsPressed)) {
HXLINE( 120)				this->pauseIsPressed = true;
            			}
            			else {
HXLINE( 122)				this->pauseIsPressed = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,pause,(void))

void Game_obj::quitButtonClick( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_127_quitButtonClick)
HXDLIN( 127)		this->quitButtonIsPressed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonClick,(void))

void Game_obj::quitButtonOver( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_130_quitButtonOver)
HXLINE( 131)		this->quitButton->set_scaleX(((Float)1.25));
HXLINE( 132)		this->quitButton->set_scaleY(((Float)1.25));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonOver,(void))

void Game_obj::quitButtonOut( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_135_quitButtonOut)
HXLINE( 136)		this->quitButton->set_scaleX(((Float)1.0));
HXLINE( 137)		this->quitButton->set_scaleY(((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonOut,(void))

bool Game_obj::get_quitButtonIsPressed(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_142_get_quitButtonIsPressed)
HXDLIN( 142)		return this->quitButtonIsPressed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_quitButtonIsPressed,return )

void Game_obj::update(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_146_update)
HXDLIN( 146)		if (!(this->pauseIsPressed)) {
HXLINE( 148)			this->bonusBuf();
HXLINE( 149)			this->player->move();
HXLINE( 151)			this->player->doCollisionsWithTilesForPLayer(this->gameLevel->level);
HXLINE( 152)			this->doCollidionWithEnemies();
HXLINE( 153)			this->playerJump(::Game_obj::jumpPower);
HXLINE( 154)			 ::Player _hx_tmp = this->player;
HXDLIN( 154)			_hx_tmp->spriteAnimated(this->player->get_state());
HXLINE( 155)			this->player->doShot(hx::ObjectPtr<OBJ_>(this));
HXLINE( 157)			this->bulletsMove();
HXLINE( 158)			this->generateEnemies();
HXLINE( 159)			this->moveEnemies();
HXLINE( 160)			this->doCollisionsWithBullet();
HXLINE( 163)			if (this->contains(this->bonus)) {
HXLINE( 165)				this->bonus->fall(this->gameLevel->level);
HXLINE( 166)				if (this->bonus->checkCollisionWithPlayer(this->player)) {
HXLINE( 168)					this->removeChild(this->bonus);
HXLINE( 169)					this->bonus = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update,(void))

bool Game_obj::checkCollisionWithTile( ::openfl::geom::Rectangle playerHitBox, ::openfl::display::Tile tile){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_183_checkCollisionWithTile)
HXLINE( 184)		 ::openfl::geom::Point hitBox =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 185)		 ::Player hitBox1 = this->player;
HXDLIN( 185)		hitBox = hitBox1->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,playerHitBox->x,playerHitBox->y));
HXLINE( 186)		if (hx::IsEq( this->player->get_direction(),::Direction_obj::right_dyn() )) {
HXLINE( 188)			bool _hx_tmp;
HXDLIN( 188)			Float _hx_tmp1 = (hitBox->x + playerHitBox->width);
HXDLIN( 188)			if ((_hx_tmp1 > tile->get_x())) {
HXLINE( 189)				Float hitBox2 = hitBox->x;
HXDLIN( 189)				Float _hx_tmp2 = tile->get_x();
HXLINE( 188)				_hx_tmp = (hitBox2 < (_hx_tmp2 + tile->get_width()));
            			}
            			else {
HXLINE( 188)				_hx_tmp = false;
            			}
HXDLIN( 188)			if (_hx_tmp) {
HXLINE( 191)				bool _hx_tmp3;
HXDLIN( 191)				Float _hx_tmp4 = (hitBox->y + playerHitBox->height);
HXDLIN( 191)				if ((_hx_tmp4 > tile->get_y())) {
HXLINE( 192)					Float hitBox3 = hitBox->y;
HXLINE( 191)					_hx_tmp3 = (hitBox3 < tile->get_y());
            				}
            				else {
HXLINE( 191)					_hx_tmp3 = false;
            				}
HXDLIN( 191)				if (_hx_tmp3) {
HXLINE( 195)					return true;
            				}
            			}
            		}
            		else {
HXLINE( 201)			bool _hx_tmp5;
HXDLIN( 201)			Float hitBox4 = hitBox->x;
HXDLIN( 201)			if ((hitBox4 > tile->get_x())) {
HXLINE( 202)				Float _hx_tmp6 = (hitBox->x - playerHitBox->width);
HXDLIN( 202)				Float _hx_tmp7 = tile->get_x();
HXLINE( 201)				_hx_tmp5 = (_hx_tmp6 < (_hx_tmp7 + tile->get_width()));
            			}
            			else {
HXLINE( 201)				_hx_tmp5 = false;
            			}
HXDLIN( 201)			if (_hx_tmp5) {
HXLINE( 204)				bool _hx_tmp8;
HXDLIN( 204)				Float _hx_tmp9 = (hitBox->y + playerHitBox->height);
HXDLIN( 204)				if ((_hx_tmp9 > tile->get_y())) {
HXLINE( 205)					Float hitBox5 = hitBox->y;
HXLINE( 204)					_hx_tmp8 = (hitBox5 < tile->get_y());
            				}
            				else {
HXLINE( 204)					_hx_tmp8 = false;
            				}
HXDLIN( 204)				if (_hx_tmp8) {
HXLINE( 208)					return true;
            				}
            			}
            		}
HXLINE( 213)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Game_obj,checkCollisionWithTile,return )

void Game_obj::doCollisionsWithTiles(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_216_doCollisionsWithTiles)
HXLINE( 217)		::Game_obj::haveCollision = false;
HXLINE( 218)		{
HXLINE( 218)			int _g = 0;
HXDLIN( 218)			int _g1 = this->gameLevel->tilemap->get_numTiles();
HXDLIN( 218)			while((_g < _g1)){
HXLINE( 218)				_g = (_g + 1);
HXDLIN( 218)				int i = (_g - 1);
HXLINE( 220)				 ::openfl::geom::Rectangle _hx_tmp = this->player->get_hitBox();
HXDLIN( 220)				if (this->checkCollisionWithTile(_hx_tmp,this->gameLevel->tilemap->getTileAt(i))) {
HXLINE( 222)					 ::Player _hx_tmp1 = this->player;
HXDLIN( 222)					Float _hx_tmp2 = this->gameLevel->tilemap->getTileAt(i)->get_y();
HXDLIN( 222)					_hx_tmp1->set_y(((_hx_tmp2 - (this->player->get_hitBox()->height / ( (Float)(2) ))) + ((Float)2.5)));
HXLINE( 223)					this->player->set_speedY(((Float)0.0));
HXLINE( 224)					::Game_obj::haveCollision = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionsWithTiles,(void))

void Game_obj::playerJump(Float jumpPower){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_230_playerJump)
HXLINE( 232)		bool _hx_tmp;
HXDLIN( 232)		bool _hx_tmp1;
HXDLIN( 232)		if (this->player->get_jump()) {
HXLINE( 232)			_hx_tmp1 = ::Game_obj::haveCollision;
            		}
            		else {
HXLINE( 232)			_hx_tmp1 = false;
            		}
HXDLIN( 232)		if (_hx_tmp1) {
HXLINE( 232)			_hx_tmp = hx::IsEq( this->player->get_collisionDirection(),::CollisionDirection_obj::up_dyn() );
            		}
            		else {
HXLINE( 232)			_hx_tmp = false;
            		}
HXDLIN( 232)		if (_hx_tmp) {
HXLINE( 234)			::haxe::Log_obj::trace(HX_("jump",ee,c4,69,46),hx::SourceInfo(HX_("Source/Game.hx",98,05,24,39),234,HX_("Game",12,20,38,2f),HX_("playerJump",ef,a0,2b,a9)));
HXLINE( 235)			 ::Player _hx_tmp2 = this->player;
HXDLIN( 235)			_hx_tmp2->set_speedY((this->player->get_speedY() - jumpPower));
            		}
HXLINE( 237)		if (!(::Game_obj::haveCollision)) {
HXLINE( 238)			this->player->set_state(::State_obj::jump_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,playerJump,(void))

void Game_obj::bulletsMove(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_241_bulletsMove)
HXLINE( 242)		int i = 0;
HXLINE( 243)		while((i < this->bullets->length)){
HXLINE( 245)			this->bullets->__get(i).StaticCast<  ::Bullet >()->move();
HXLINE( 246)			bool _hx_tmp;
HXDLIN( 246)			Float _hx_tmp1 = this->bullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 246)			Float _hx_tmp2 = (_hx_tmp1 - (this->bullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) )));
HXDLIN( 246)			if (!((_hx_tmp2 >= ::Main_obj::sizeWidth))) {
HXLINE( 246)				Float _hx_tmp3 = this->bullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 246)				_hx_tmp = ((_hx_tmp3 + (this->bullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) ))) <= 0);
            			}
            			else {
HXLINE( 246)				_hx_tmp = true;
            			}
HXDLIN( 246)			if (_hx_tmp) {
HXLINE( 248)				this->removeChild(this->bullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 249)				this->spentBullets->push(this->bullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 250)				this->bullets->remove(this->bullets->__get(i).StaticCast<  ::Bullet >());
            			}
HXLINE( 252)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,bulletsMove,(void))

void Game_obj::generateEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_259_generateEnemies)
HXDLIN( 259)		int _hx_tmp = this->counter;
HXDLIN( 259)		int _hx_tmp1 = ::Main_obj::get_FPS();
HXDLIN( 259)		if ((_hx_tmp >= (( (Float)(_hx_tmp1) ) * this->spawnDelay))) {
HXLINE( 261)			if ((this->enemies->length < this->maxEnemies)) {
HXLINE( 263)				this->generateEnemy();
            			}
HXLINE( 265)			this->counter = 0;
            		}
            		else {
HXLINE( 269)			++this->counter;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,generateEnemies,(void))

void Game_obj::generateEnemy(){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_273_generateEnemy)
HXLINE( 274)		 ::Enemy enemy;
HXLINE( 275)		if ((this->deadEnemies->length > 0)) {
HXLINE( 277)			enemy = this->deadEnemies->pop().StaticCast<  ::Enemy >();
            		}
            		else {
HXLINE( 281)			enemy =  ::Enemy_obj::__alloc( HX_CTX );
            		}
HXLINE( 283)		enemy->set_y(( (Float)(100) ));
HXLINE( 284)		enemy->set_speedY(((Float)0.0));
HXLINE( 285)		this->enemies->push(enemy);
HXLINE( 286)		this->addChild(this->enemies->__get((this->enemies->length - 1)).StaticCast<  ::Enemy >());
HXLINE( 287)		if ((::Math_obj::random() >= ((Float)0.5))) {
HXLINE( 289)			enemy->set_x(( (Float)(800) ));
            		}
            		else {
HXLINE( 293)			enemy->set_x(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,generateEnemy,(void))

void Game_obj::moveEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_299_moveEnemies)
HXLINE( 300)		int i = 0;
HXLINE( 301)		while((i < this->enemies->length)){
HXLINE( 303)			this->enemies->__get(i).StaticCast<  ::Enemy >()->move(this->player,this->gameLevel->level);
HXLINE( 304)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,moveEnemies,(void))

void Game_obj::doCollisionsWithBullet(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_309_doCollisionsWithBullet)
HXLINE( 310)		int b = 0;
HXLINE( 311)		while((b < this->bullets->length)){
HXLINE( 313)			int e = 0;
HXLINE( 314)			while((e < this->enemies->length)){
HXLINE( 316)				if (this->bullets->__get(b).StaticCast<  ::Bullet >()->checkCollisionWithEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 318)					this->removeChild(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 319)					this->spentBullets->push(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 320)					this->bullets->remove(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 321)					this->removeChild(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 322)					this->spawnBonus(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 323)					++this->gamePoints;
HXLINE( 324)					 ::openfl::text::TextField _hx_tmp = this->pointsField;
HXDLIN( 324)					_hx_tmp->set_text(::Std_obj::string(this->gamePoints));
HXLINE( 325)					this->deadEnemies->push(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 326)					this->enemies->remove(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 327)					b = (b - 1);
HXLINE( 328)					goto _hx_goto_18;
            				}
HXLINE( 330)				e = (e + 1);
            			}
            			_hx_goto_18:;
HXLINE( 332)			b = (b + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionsWithBullet,(void))

bool Game_obj::get_gameIsOver(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_338_get_gameIsOver)
HXDLIN( 338)		return this->gameIsOver;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_gameIsOver,return )

int Game_obj::get_gamePoints(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_342_get_gamePoints)
HXDLIN( 342)		return this->gamePoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_gamePoints,return )

void Game_obj::doCollidionWithEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_346_doCollidionWithEnemies)
HXLINE( 347)		int e = 0;
HXLINE( 348)		while((e < this->enemies->length)){
HXLINE( 350)			if (this->player->checkCollisionWithEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 352)				this->gameIsOver = true;
            			}
HXLINE( 354)			e = (e + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollidionWithEnemies,(void))

void Game_obj::bonusBuf(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_360_bonusBuf)
HXDLIN( 360)		if (::Bonus_obj::bonusIsUsed) {
HXLINE( 362)			if (hx::IsEq( ::Bonus_obj::get_bonusType(),::BonusType_obj::slow_dyn() )) {
HXLINE( 363)				::Bonus_obj::doBonusSlow(this->player,this->enemies,this->deadEnemies,this->bullets);
            			}
            			else {
HXLINE( 364)				if (hx::IsEq( ::Bonus_obj::get_bonusType(),::BonusType_obj::destroy_dyn() )) {
HXLINE( 365)					this->doBonusDestroy();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,bonusBuf,(void))

void Game_obj::spawnBonus( ::Enemy enemy){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_378_spawnBonus)
HXDLIN( 378)		bool _hx_tmp;
HXDLIN( 378)		bool _hx_tmp1;
HXDLIN( 378)		if (!(::Bonus_obj::bonusIsUsed)) {
HXDLIN( 378)			_hx_tmp1 = !(::Bonus_obj::haveBonus);
            		}
            		else {
HXDLIN( 378)			_hx_tmp1 = false;
            		}
HXDLIN( 378)		if (_hx_tmp1) {
HXDLIN( 378)			_hx_tmp = (::Math_obj::random() < ((Float)0.08));
            		}
            		else {
HXDLIN( 378)			_hx_tmp = false;
            		}
HXDLIN( 378)		if (_hx_tmp) {
HXLINE( 380)			::Bonus_obj::bonusIsUsed = false;
HXLINE( 381)			::Bonus_obj::haveBonus = true;
HXLINE( 382)			this->bonus =  ::Bonus_obj::__alloc( HX_CTX );
HXLINE( 383)			this->bonus->set_speedY(((Float)-10.0));
HXLINE( 384)			 ::Bonus _hx_tmp2 = this->bonus;
HXDLIN( 384)			_hx_tmp2->set_x(enemy->get_x());
HXLINE( 385)			 ::Bonus _hx_tmp3 = this->bonus;
HXDLIN( 385)			_hx_tmp3->set_y(enemy->get_y());
HXLINE( 386)			this->addChild(this->bonus);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,spawnBonus,(void))

void Game_obj::doBonusDestroy(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_390_doBonusDestroy)
HXLINE( 391)		int e = 0;
HXLINE( 392)		while((e < this->enemies->length)){
HXLINE( 395)			this->removeChild(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 396)			++this->gamePoints;
HXLINE( 397)			 ::openfl::text::TextField _hx_tmp = this->pointsField;
HXDLIN( 397)			_hx_tmp->set_text(::Std_obj::string(this->gamePoints));
HXLINE( 398)			this->deadEnemies->push(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 399)			this->enemies->remove(this->enemies->__get(e).StaticCast<  ::Enemy >());
            		}
HXLINE( 403)		::Bonus_obj::haveBonus = false;
HXLINE( 404)		::Bonus_obj::bonusIsUsed = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doBonusDestroy,(void))

bool Game_obj::haveCollision;

Float Game_obj::jumpPower;


hx::ObjectPtr< Game_obj > Game_obj::__new(int width,int height) {
	hx::ObjectPtr< Game_obj > __this = new Game_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< Game_obj > Game_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	Game_obj *__this = (Game_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Game_obj), true, "Game"));
	*(void **)__this = Game_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

Game_obj::Game_obj()
{
}

void Game_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Game);
	HX_MARK_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_MARK_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_MARK_MEMBER_NAME(backGround,"backGround");
	HX_MARK_MEMBER_NAME(quitButton,"quitButton");
	HX_MARK_MEMBER_NAME(quitButtonIsPressed,"quitButtonIsPressed");
	HX_MARK_MEMBER_NAME(pauseIsPressed,"pauseIsPressed");
	HX_MARK_MEMBER_NAME(gameLevel,"gameLevel");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(gameIsOver,"gameIsOver");
	HX_MARK_MEMBER_NAME(bonus,"bonus");
	HX_MARK_MEMBER_NAME(gamePoints,"gamePoints");
	HX_MARK_MEMBER_NAME(pointsField,"pointsField");
	HX_MARK_MEMBER_NAME(bullets,"bullets");
	HX_MARK_MEMBER_NAME(spentBullets,"spentBullets");
	HX_MARK_MEMBER_NAME(enemies,"enemies");
	HX_MARK_MEMBER_NAME(deadEnemies,"deadEnemies");
	HX_MARK_MEMBER_NAME(maxEnemies,"maxEnemies");
	HX_MARK_MEMBER_NAME(spawnDelay,"spawnDelay");
	HX_MARK_MEMBER_NAME(counter,"counter");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Game_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_VISIT_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_VISIT_MEMBER_NAME(backGround,"backGround");
	HX_VISIT_MEMBER_NAME(quitButton,"quitButton");
	HX_VISIT_MEMBER_NAME(quitButtonIsPressed,"quitButtonIsPressed");
	HX_VISIT_MEMBER_NAME(pauseIsPressed,"pauseIsPressed");
	HX_VISIT_MEMBER_NAME(gameLevel,"gameLevel");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(gameIsOver,"gameIsOver");
	HX_VISIT_MEMBER_NAME(bonus,"bonus");
	HX_VISIT_MEMBER_NAME(gamePoints,"gamePoints");
	HX_VISIT_MEMBER_NAME(pointsField,"pointsField");
	HX_VISIT_MEMBER_NAME(bullets,"bullets");
	HX_VISIT_MEMBER_NAME(spentBullets,"spentBullets");
	HX_VISIT_MEMBER_NAME(enemies,"enemies");
	HX_VISIT_MEMBER_NAME(deadEnemies,"deadEnemies");
	HX_VISIT_MEMBER_NAME(maxEnemies,"maxEnemies");
	HX_VISIT_MEMBER_NAME(spawnDelay,"spawnDelay");
	HX_VISIT_MEMBER_NAME(counter,"counter");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bonus") ) { return hx::Val( bonus ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bullets") ) { return hx::Val( bullets ); }
		if (HX_FIELD_EQ(inName,"enemies") ) { return hx::Val( enemies ); }
		if (HX_FIELD_EQ(inName,"counter") ) { return hx::Val( counter ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bonusBuf") ) { return hx::Val( bonusBuf_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { return hx::Val( sizeWidth ); }
		if (HX_FIELD_EQ(inName,"gameLevel") ) { return hx::Val( gameLevel ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { return hx::Val( sizeHeight ); }
		if (HX_FIELD_EQ(inName,"backGround") ) { return hx::Val( backGround ); }
		if (HX_FIELD_EQ(inName,"quitButton") ) { return hx::Val( quitButton ); }
		if (HX_FIELD_EQ(inName,"gameIsOver") ) { return hx::Val( inCallProp == hx::paccAlways ? get_gameIsOver() : gameIsOver ); }
		if (HX_FIELD_EQ(inName,"gamePoints") ) { return hx::Val( gamePoints ); }
		if (HX_FIELD_EQ(inName,"maxEnemies") ) { return hx::Val( maxEnemies ); }
		if (HX_FIELD_EQ(inName,"spawnDelay") ) { return hx::Val( spawnDelay ); }
		if (HX_FIELD_EQ(inName,"playerJump") ) { return hx::Val( playerJump_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnBonus") ) { return hx::Val( spawnBonus_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointsField") ) { return hx::Val( pointsField ); }
		if (HX_FIELD_EQ(inName,"deadEnemies") ) { return hx::Val( deadEnemies ); }
		if (HX_FIELD_EQ(inName,"bulletsMove") ) { return hx::Val( bulletsMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveEnemies") ) { return hx::Val( moveEnemies_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"spentBullets") ) { return hx::Val( spentBullets ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"quitButtonOut") ) { return hx::Val( quitButtonOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateEnemy") ) { return hx::Val( generateEnemy_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pauseIsPressed") ) { return hx::Val( pauseIsPressed ); }
		if (HX_FIELD_EQ(inName,"quitButtonOver") ) { return hx::Val( quitButtonOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gameIsOver") ) { return hx::Val( get_gameIsOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gamePoints") ) { return hx::Val( get_gamePoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"doBonusDestroy") ) { return hx::Val( doBonusDestroy_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"quitButtonClick") ) { return hx::Val( quitButtonClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateEnemies") ) { return hx::Val( generateEnemies_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quitButtonIsPressed") ) { return hx::Val( quitButtonIsPressed ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"doCollisionsWithTiles") ) { return hx::Val( doCollisionsWithTiles_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"checkCollisionWithTile") ) { return hx::Val( checkCollisionWithTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollisionsWithBullet") ) { return hx::Val( doCollisionsWithBullet_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollidionWithEnemies") ) { return hx::Val( doCollidionWithEnemies_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_quitButtonIsPressed") ) { return hx::Val( get_quitButtonIsPressed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Game_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"jumpPower") ) { outValue = ( jumpPower ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"haveCollision") ) { outValue = ( haveCollision ); return true; }
	}
	return false;
}

hx::Val Game_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bonus") ) { bonus=inValue.Cast<  ::Bonus >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bullets") ) { bullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemies") ) { enemies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"counter") ) { counter=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { sizeWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameLevel") ) { gameLevel=inValue.Cast<  ::GameLevel >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { sizeHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backGround") ) { backGround=inValue.Cast<  ::BackGround >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quitButton") ) { quitButton=inValue.Cast<  ::Button >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameIsOver") ) { gameIsOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamePoints") ) { gamePoints=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxEnemies") ) { maxEnemies=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnDelay") ) { spawnDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointsField") ) { pointsField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deadEnemies") ) { deadEnemies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"spentBullets") ) { spentBullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pauseIsPressed") ) { pauseIsPressed=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quitButtonIsPressed") ) { quitButtonIsPressed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Game_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"jumpPower") ) { jumpPower=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"haveCollision") ) { haveCollision=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Game_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sizeWidth",85,29,f9,c8));
	outFields->push(HX_("sizeHeight",88,a3,5a,c7));
	outFields->push(HX_("backGround",0e,08,b2,5a));
	outFields->push(HX_("quitButton",21,5b,13,a5));
	outFields->push(HX_("quitButtonIsPressed",77,e8,7a,c2));
	outFields->push(HX_("pauseIsPressed",02,ca,44,47));
	outFields->push(HX_("gameLevel",32,04,7e,a7));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("gameIsOver",f0,3f,95,a9));
	outFields->push(HX_("bonus",9f,66,f7,b6));
	outFields->push(HX_("gamePoints",b5,fb,a3,39));
	outFields->push(HX_("pointsField",97,53,cf,40));
	outFields->push(HX_("bullets",f1,67,ef,29));
	outFields->push(HX_("spentBullets",23,da,85,4d));
	outFields->push(HX_("enemies",a6,68,0e,d3));
	outFields->push(HX_("deadEnemies",62,1e,d0,19));
	outFields->push(HX_("maxEnemies",62,e2,32,3d));
	outFields->push(HX_("spawnDelay",48,33,3f,11));
	outFields->push(HX_("counter",fc,ae,59,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Game_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Game_obj,sizeWidth),HX_("sizeWidth",85,29,f9,c8)},
	{hx::fsInt,(int)offsetof(Game_obj,sizeHeight),HX_("sizeHeight",88,a3,5a,c7)},
	{hx::fsObject /*  ::BackGround */ ,(int)offsetof(Game_obj,backGround),HX_("backGround",0e,08,b2,5a)},
	{hx::fsObject /*  ::Button */ ,(int)offsetof(Game_obj,quitButton),HX_("quitButton",21,5b,13,a5)},
	{hx::fsBool,(int)offsetof(Game_obj,quitButtonIsPressed),HX_("quitButtonIsPressed",77,e8,7a,c2)},
	{hx::fsBool,(int)offsetof(Game_obj,pauseIsPressed),HX_("pauseIsPressed",02,ca,44,47)},
	{hx::fsObject /*  ::GameLevel */ ,(int)offsetof(Game_obj,gameLevel),HX_("gameLevel",32,04,7e,a7)},
	{hx::fsObject /*  ::Player */ ,(int)offsetof(Game_obj,player),HX_("player",61,eb,b8,37)},
	{hx::fsBool,(int)offsetof(Game_obj,gameIsOver),HX_("gameIsOver",f0,3f,95,a9)},
	{hx::fsObject /*  ::Bonus */ ,(int)offsetof(Game_obj,bonus),HX_("bonus",9f,66,f7,b6)},
	{hx::fsInt,(int)offsetof(Game_obj,gamePoints),HX_("gamePoints",b5,fb,a3,39)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Game_obj,pointsField),HX_("pointsField",97,53,cf,40)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,bullets),HX_("bullets",f1,67,ef,29)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,spentBullets),HX_("spentBullets",23,da,85,4d)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,enemies),HX_("enemies",a6,68,0e,d3)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,deadEnemies),HX_("deadEnemies",62,1e,d0,19)},
	{hx::fsInt,(int)offsetof(Game_obj,maxEnemies),HX_("maxEnemies",62,e2,32,3d)},
	{hx::fsFloat,(int)offsetof(Game_obj,spawnDelay),HX_("spawnDelay",48,33,3f,11)},
	{hx::fsInt,(int)offsetof(Game_obj,counter),HX_("counter",fc,ae,59,1d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Game_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Game_obj::haveCollision,HX_("haveCollision",ea,c8,af,00)},
	{hx::fsFloat,(void *) &Game_obj::jumpPower,HX_("jumpPower",37,58,67,52)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_("sizeWidth",85,29,f9,c8),
	HX_("sizeHeight",88,a3,5a,c7),
	HX_("backGround",0e,08,b2,5a),
	HX_("quitButton",21,5b,13,a5),
	HX_("quitButtonIsPressed",77,e8,7a,c2),
	HX_("pauseIsPressed",02,ca,44,47),
	HX_("gameLevel",32,04,7e,a7),
	HX_("player",61,eb,b8,37),
	HX_("gameIsOver",f0,3f,95,a9),
	HX_("bonus",9f,66,f7,b6),
	HX_("gamePoints",b5,fb,a3,39),
	HX_("pointsField",97,53,cf,40),
	HX_("bullets",f1,67,ef,29),
	HX_("spentBullets",23,da,85,4d),
	HX_("enemies",a6,68,0e,d3),
	HX_("deadEnemies",62,1e,d0,19),
	HX_("maxEnemies",62,e2,32,3d),
	HX_("spawnDelay",48,33,3f,11),
	HX_("counter",fc,ae,59,1d),
	HX_("pause",f6,d6,57,bd),
	HX_("quitButtonClick",67,99,35,9d),
	HX_("quitButtonOver",15,bd,27,d6),
	HX_("quitButtonOut",ed,e7,43,c5),
	HX_("get_quitButtonIsPressed",0e,8f,d0,ca),
	HX_("update",09,86,05,87),
	HX_("checkCollisionWithTile",fe,d4,f4,3d),
	HX_("doCollisionsWithTiles",d3,68,86,03),
	HX_("playerJump",ef,a0,2b,a9),
	HX_("bulletsMove",a2,c3,fa,89),
	HX_("generateEnemies",f1,b1,c8,ae),
	HX_("generateEnemy",d3,e2,f7,16),
	HX_("moveEnemies",95,a1,8a,ab),
	HX_("doCollisionsWithBullet",34,0b,7d,c8),
	HX_("get_gameIsOver",39,c8,8a,1f),
	HX_("get_gamePoints",fe,83,99,af),
	HX_("doCollidionWithEnemies",ca,d6,2b,8f),
	HX_("bonusBuf",d4,c1,77,92),
	HX_("spawnBonus",64,c2,0f,f1),
	HX_("doBonusDestroy",46,d8,ca,c9),
	::String(null()) };

static void Game_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Game_obj::haveCollision,"haveCollision");
	HX_MARK_MEMBER_NAME(Game_obj::jumpPower,"jumpPower");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Game_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Game_obj::haveCollision,"haveCollision");
	HX_VISIT_MEMBER_NAME(Game_obj::jumpPower,"jumpPower");
};

#endif

hx::Class Game_obj::__mClass;

static ::String Game_obj_sStaticFields[] = {
	HX_("haveCollision",ea,c8,af,00),
	HX_("jumpPower",37,58,67,52),
	::String(null())
};

void Game_obj::__register()
{
	Game_obj _hx_dummy;
	Game_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Game",12,20,38,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Game_obj::__GetStatic;
	__mClass->mSetStaticField = &Game_obj::__SetStatic;
	__mClass->mMarkFunc = Game_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Game_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Game_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Game_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_24_boot)
HXDLIN(  24)		haveCollision = false;
            	}
}

