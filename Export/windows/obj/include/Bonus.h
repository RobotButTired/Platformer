// Generated by Haxe 4.0.1
#ifndef INCLUDED_Bonus
#define INCLUDED_Bonus

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
HX_DECLARE_CLASS0(Bonus)
HX_DECLARE_CLASS0(BonusType)
HX_DECLARE_CLASS0(Bullet)
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES Bonus_obj : public  ::Unit_obj
{
	public:
		typedef  ::Unit_obj super;
		typedef Bonus_obj OBJ_;
		Bonus_obj();

	public:
		enum { _hx_ClassId = 0x4a24d67f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Bonus")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Bonus"); }
		static hx::ObjectPtr< Bonus_obj > __new();
		static hx::ObjectPtr< Bonus_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bonus_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bonus",7f,d6,24,4a); }

		static void __boot();
		static int counter;
		static bool bonusIsUsed;
		static bool haveBonus;
		static  ::BonusType bonusType;
		static void doBonusSlow( ::Player player,::Array< ::Dynamic> enemies,::Array< ::Dynamic> deadEnemies,::Array< ::Dynamic> bullets);
		static ::Dynamic doBonusSlow_dyn();

		static  ::BonusType get_bonusType();
		static ::Dynamic get_bonusType_dyn();

		void drawHitBox();
		::Dynamic drawHitBox_dyn();

		void fall(::Array< ::Dynamic> level);
		::Dynamic fall_dyn();

		bool checkCollisionWithPlayer( ::Player player);
		::Dynamic checkCollisionWithPlayer_dyn();

};


#endif /* INCLUDED_Bonus */ 
