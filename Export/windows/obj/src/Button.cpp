// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95476733ad03172e_14_new,"Button","new",0x9489e804,"Button.new","Button.hx",14,0xf1be03ec)

void Button_obj::__construct(Float width,Float height,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_95476733ad03172e_14_new)
HXLINE(  15)		super::__construct();
HXLINE(  16)		Float buttonWidth = (width / ((Float)2.5));
HXLINE(  17)		Float buttonHeight = (height / ( (Float)(10) ));
HXLINE(  18)		this->get_graphics()->beginFill(16711935,null());
HXLINE(  19)		this->get_graphics()->drawRoundRect((-(buttonWidth) / ( (Float)(2) )),(-(buttonHeight) / ( (Float)(2) )),buttonWidth,buttonHeight,(width / ( (Float)(16) )),null());
HXLINE(  20)		this->get_graphics()->endFill();
HXLINE(  21)		this->get_graphics()->lineStyle(5,0,null(),null(),null(),null(),null(),null());
HXLINE(  22)		this->get_graphics()->drawRoundRect((-(buttonWidth) / ( (Float)(2) )),(-(buttonHeight) / ( (Float)(2) )),buttonWidth,buttonHeight,(width / ( (Float)(16) )),null());
HXLINE(  23)		this->get_graphics()->endFill();
HXLINE(  25)		 ::openfl::text::TextField textstart =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  26)		textstart->set_text(text);
HXLINE(  28)		textstart->set_textColor(0);
HXLINE(  29)		textstart->set_x((-(buttonWidth) / ( (Float)(6) )));
HXLINE(  30)		textstart->set_y((-(buttonHeight) / ((Float)2.5)));
HXLINE(  31)		textstart->mouseEnabled = false;
HXLINE(  32)		textstart->set_scaleX(((width / ( (Float)(800) )) * ((Float)2.5)));
HXLINE(  33)		textstart->set_scaleY(((height / ( (Float)(600) )) * ((Float)2.5)));
HXLINE(  34)		textstart->set_height((buttonHeight / ( (Float)(3) )));
HXLINE(  35)		textstart->set_width((buttonWidth / ( (Float)(5) )));
HXLINE(  36)		this->addChild(textstart);
            	}

Dynamic Button_obj::__CreateEmpty() { return new Button_obj; }

void *Button_obj::_hx_vtable = 0;

Dynamic Button_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Button_obj > _hx_result = new Button_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Button_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0e74d612) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0e74d612;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}


hx::ObjectPtr< Button_obj > Button_obj::__new(Float width,Float height,::String text) {
	hx::ObjectPtr< Button_obj > __this = new Button_obj();
	__this->__construct(width,height,text);
	return __this;
}

hx::ObjectPtr< Button_obj > Button_obj::__alloc(hx::Ctx *_hx_ctx,Float width,Float height,::String text) {
	Button_obj *__this = (Button_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Button_obj), true, "Button"));
	*(void **)__this = Button_obj::_hx_vtable;
	__this->__construct(width,height,text);
	return __this;
}

Button_obj::Button_obj()
{
}

hx::Val Button_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { return hx::Val( sizeWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { return hx::Val( sizeHeight ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Button_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { sizeWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { sizeHeight=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Button_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sizeWidth",85,29,f9,c8));
	outFields->push(HX_("sizeHeight",88,a3,5a,c7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Button_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Button_obj,sizeWidth),HX_("sizeWidth",85,29,f9,c8)},
	{hx::fsInt,(int)offsetof(Button_obj,sizeHeight),HX_("sizeHeight",88,a3,5a,c7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Button_obj_sStaticStorageInfo = 0;
#endif

static ::String Button_obj_sMemberFields[] = {
	HX_("sizeWidth",85,29,f9,c8),
	HX_("sizeHeight",88,a3,5a,c7),
	::String(null()) };

hx::Class Button_obj::__mClass;

void Button_obj::__register()
{
	Button_obj _hx_dummy;
	Button_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Button",12,d6,74,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Button_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Button_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Button_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Button_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

