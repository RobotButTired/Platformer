// Generated by Haxe 4.0.1
#ifndef INCLUDED_Inventory
#define INCLUDED_Inventory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Inventory)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS0(Weapon)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)



class HXCPP_CLASS_ATTRIBUTES Inventory_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Inventory_obj OBJ_;
		Inventory_obj();

	public:
		enum { _hx_ClassId = 0x07a02998 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Inventory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Inventory"); }
		static hx::ObjectPtr< Inventory_obj > __new();
		static hx::ObjectPtr< Inventory_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Inventory_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Inventory",7c,56,89,ea); }

		 ::Weapon weapon;
		 ::openfl::display::Sprite panel;
		 ::openfl::display::Sprite gunIndicator;
		 ::openfl::display::Sprite gunReload;
		 ::openfl::display::Sprite grenadeIndicator;
		 ::openfl::display::Sprite grenadeReload;
		Float indicatorSize;
		void update( ::Player player);
		::Dynamic update_dyn();

		void onDown( ::openfl::events::KeyboardEvent e);
		::Dynamic onDown_dyn();

		 ::Weapon get_weapon();
		::Dynamic get_weapon_dyn();

};


#endif /* INCLUDED_Inventory */ 
