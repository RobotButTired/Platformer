// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_BackGround
#include <BackGround.h>
#endif
#ifndef INCLUDED_Bonus
#include <Bonus.h>
#endif
#ifndef INCLUDED_BonusType
#include <BonusType.h>
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_CollisionDirection
#include <CollisionDirection.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyWithGun
#include <EnemyWithGun.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_GameLevel
#include <GameLevel.h>
#endif
#ifndef INCLUDED_Grenade
#include <Grenade.h>
#endif
#ifndef INCLUDED_GrenadeState
#include <GrenadeState.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_State
#include <State.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69efd8c9269cf369_14_new,"Game","new",0x79ba3204,"Game.new","Game.hx",14,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_150_pause,"Game","pause",0x2654e99a,"Game.pause","Game.hx",150,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_166_quitButtonClick,"Game","quitButtonClick",0x3679e10b,"Game.quitButtonClick","Game.hx",166,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_169_quitButtonOver,"Game","quitButtonOver",0x51ad35f1,"Game.quitButtonOver","Game.hx",169,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_174_quitButtonOut,"Game","quitButtonOut",0x0f4a3e91,"Game.quitButtonOut","Game.hx",174,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_181_get_quitButtonIsPressed,"Game","get_quitButtonIsPressed",0x5edb1ab2,"Game.get_quitButtonIsPressed","Game.hx",181,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_185_update,"Game","update",0xfb78c2e5,"Game.update","Game.hx",185,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_287_playerJump,"Game","playerJump",0x8a147bcb,"Game.playerJump","Game.hx",287,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_298_bulletsMove,"Game","bulletsMove",0x74d16946,"Game.bulletsMove","Game.hx",298,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_326_grenadeMove,"Game","grenadeMove",0x4a6d5f23,"Game.grenadeMove","Game.hx",326,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_338_generateEnemies,"Game","generateEnemies",0x480cf995,"Game.generateEnemies","Game.hx",338,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_352_generateEnemy,"Game","generateEnemy",0x60fe3977,"Game.generateEnemy","Game.hx",352,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_393_moveEnemies,"Game","moveEnemies",0x96614739,"Game.moveEnemies","Game.hx",393,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_404_doCollisionsWithBullet,"Game","doCollisionsWithBullet",0x41b0c010,"Game.doCollisionsWithBullet","Game.hx",404,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_426_doCollisionWithEnemyBullet,"Game","doCollisionWithEnemyBullet",0xc025d179,"Game.doCollisionWithEnemyBullet","Game.hx",426,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_446_doCollisionWithGrenade,"Game","doCollisionWithGrenade",0xb0596a9d,"Game.doCollisionWithGrenade","Game.hx",446,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_460_killEnemy,"Game","killEnemy",0x2d7e7a6e,"Game.killEnemy","Game.hx",460,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_474_get_gameIsOver,"Game","get_gameIsOver",0x9b104115,"Game.get_gameIsOver","Game.hx",474,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_478_get_gamePoints,"Game","get_gamePoints",0x2b1efcda,"Game.get_gamePoints","Game.hx",478,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_482_doCollidionWithEnemies,"Game","doCollidionWithEnemies",0x085f8ba6,"Game.doCollidionWithEnemies","Game.hx",482,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_498_showHealthIndicator,"Game","showHealthIndicator",0x2121ecba,"Game.showHealthIndicator","Game.hx",498,0x56a4f9ec)
static const int _hx_array_data_2f382012_29[] = {
	(int)65280,(int)16777215,
};
static const Float _hx_array_data_2f382012_30[] = {
	1.0,1.0,
};
static const int _hx_array_data_2f382012_31[] = {
	(int)0,(int)85,
};
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_507_bonusBuf,"Game","bonusBuf",0x77d8edb0,"Game.bonusBuf","Game.hx",507,0x56a4f9ec)
static const int _hx_array_data_2f382012_33[] = {
	(int)16711680,(int)16777215,
};
static const Float _hx_array_data_2f382012_34[] = {
	1.0,1.0,
};
static const int _hx_array_data_2f382012_35[] = {
	(int)0,(int)95,
};
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_534_spawnBonus,"Game","spawnBonus",0xd1f89d40,"Game.spawnBonus","Game.hx",534,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_546_doBonusDestroy,"Game","doBonusDestroy",0x45505122,"Game.doBonusDestroy","Game.hx",546,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_564_doCollisionsWithPLatforms,"Game","doCollisionsWithPLatforms",0x39d84d72,"Game.doCollisionsWithPLatforms","Game.hx",564,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_571_set_Pause,"Game","set_Pause",0x4724c3dd,"Game.set_Pause","Game.hx",571,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_577_set_Unpause,"Game","set_Unpause",0x027802a4,"Game.set_Unpause","Game.hx",577,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_24_boot,"Game","boot",0x014a920e,"Game.boot","Game.hx",24,0x56a4f9ec)

void Game_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_14_new)
HXLINE(  51)		this->counter = 0;
HXLINE(  49)		this->spawnDelay = ((Float)1.0);
HXLINE(  48)		this->maxEnemies = 4;
HXLINE(  34)		this->gamePoints = 0;
HXLINE(  27)		this->gameIsOver = false;
HXLINE(  21)		this->pauseIsPressed = false;
HXLINE(  20)		this->quitButtonIsPressed = false;
HXLINE(  61)		super::__construct();
HXLINE(  62)		this->sizeWidth = width;
HXLINE(  63)		this->sizeHeight = height;
HXLINE(  65)		this->backGround =  ::BackGround_obj::__alloc( HX_CTX ,HX_("gameScreen",fe,24,d3,89));
HXLINE(  67)		this->addChild(this->backGround);
HXLINE(  70)		this->gameLevel =  ::GameLevel_obj::__alloc( HX_CTX ,this->sizeWidth,this->sizeHeight);
HXLINE(  71)		this->addChild(this->gameLevel);
HXLINE(  74)		this->bullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  75)		this->spentBullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		this->enemyBullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  77)		this->spentEnemyBullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  81)		::Game_obj::jumpPower = ((Float)15.0);
HXLINE(  82)		this->player =  ::Player_obj::__alloc( HX_CTX );
HXLINE(  83)		this->player->set_x(( (Float)(100) ));
HXLINE(  84)		this->player->set_y((( (Float)(::Main_obj::sizeHeight) ) / ( (Float)(2) )));
HXLINE(  85)		this->addChild(this->player);
HXLINE(  89)		this->addChild(this->player->inventory->panel);
HXLINE(  92)		this->enemies = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  93)		this->deadEnemies = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  94)		this->deadEnemiesWithGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  98)		::Bonus_obj::bonusIsUsed = false;
HXLINE(  99)		::Bonus_obj::haveBonus = false;
HXLINE( 100)		this->bonusIndicator =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 101)		this->bonusIndicator->set_x(( (Float)(10) ));
HXLINE( 102)		this->bonusIndicator->set_y(( (Float)(55) ));
HXLINE( 105)		this->healthIndicator =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 106)		this->healthIndicator->set_x(( (Float)(10) ));
HXLINE( 107)		this->healthIndicator->set_y(( (Float)(10) ));
HXLINE( 109)		this->pointsField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 110)		 ::openfl::text::TextField _hx_tmp = this->pointsField;
HXDLIN( 110)		_hx_tmp->set_text(::Std_obj::string(this->gamePoints));
HXLINE( 111)		this->pointsField->set_x((( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(2) )));
HXLINE( 112)		this->pointsField->set_y(( (Float)(0) ));
HXLINE( 113)		this->pointsField->set_scaleX(((Float)2.0));
HXLINE( 114)		this->pointsField->set_scaleY(((Float)2.0));
HXLINE( 115)		this->pointsField->mouseEnabled = false;
HXLINE( 116)		this->addChild(this->pointsField);
HXLINE( 119)		this->pauseScreen =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 120)		this->pauseScreen->get_graphics()->beginFill(0,null());
HXLINE( 121)		this->pauseScreen->get_graphics()->drawRect(( (Float)(0) ),( (Float)(0) ),( (Float)(::Main_obj::sizeWidth) ),( (Float)(::Main_obj::sizeHeight) ));
HXLINE( 122)		this->pauseScreen->get_graphics()->endFill();
HXLINE( 123)		this->pauseScreen->set_alpha(((Float)0.35));
HXLINE( 127)		this->quitButton =  ::Button_obj::__alloc( HX_CTX ,(( (Float)(this->sizeWidth) ) / ( (Float)(2) )),(( (Float)(this->sizeHeight) ) / ( (Float)(2) )),HX_("QUIT",cf,07,cb,35));
HXLINE( 128)		this->quitButton->set_x((( (Float)((this->sizeWidth * 7)) ) / ( (Float)(8) )));
HXLINE( 129)		this->quitButton->set_y((( (Float)(this->sizeHeight) ) / ( (Float)(25) )));
HXLINE( 131)		this->addChild(this->quitButton);
HXLINE( 133)		this->quitButton->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->quitButtonOver_dyn(),null(),null(),null());
HXLINE( 134)		this->quitButton->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->quitButtonOut_dyn(),null(),null(),null());
HXLINE( 135)		this->quitButton->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->quitButtonClick_dyn(),null(),null(),null());
HXLINE( 136)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->pause_dyn(),null(),null(),null());
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

void *Game_obj::_hx_vtable = 0;

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Game_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2f382012) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2f382012;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Game_obj::pause( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_150_pause)
HXDLIN( 150)		if ((e->keyCode == 120)) {
HXLINE( 152)			if (!(this->pauseIsPressed)) {
HXLINE( 154)				this->pauseIsPressed = true;
HXLINE( 155)				this->set_Pause();
            			}
            			else {
HXLINE( 159)				this->pauseIsPressed = false;
HXLINE( 160)				this->set_Unpause();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,pause,(void))

void Game_obj::quitButtonClick( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_166_quitButtonClick)
HXDLIN( 166)		this->quitButtonIsPressed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonClick,(void))

void Game_obj::quitButtonOver( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_169_quitButtonOver)
HXLINE( 170)		this->quitButton->set_scaleX(((Float)1.25));
HXLINE( 171)		this->quitButton->set_scaleY(((Float)1.25));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonOver,(void))

void Game_obj::quitButtonOut( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_174_quitButtonOut)
HXLINE( 175)		this->quitButton->set_scaleX(((Float)1.0));
HXLINE( 176)		this->quitButton->set_scaleY(((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonOut,(void))

bool Game_obj::get_quitButtonIsPressed(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_181_get_quitButtonIsPressed)
HXDLIN( 181)		return this->quitButtonIsPressed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_quitButtonIsPressed,return )

void Game_obj::update(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_185_update)
HXDLIN( 185)		if (!(this->pauseIsPressed)) {
HXLINE( 188)			this->bonusBuf();
HXLINE( 189)			this->showHealthIndicator();
HXLINE( 190)			this->player->move();
HXLINE( 192)			this->player->doCollisionsWithTilesForPLayer(this->gameLevel->level);
HXLINE( 193)			this->doCollisionsWithPLatforms();
HXLINE( 194)			if (!(this->player->get_invulnerability())) {
HXLINE( 196)				this->doCollidionWithEnemies();
HXLINE( 197)				this->doCollisionWithEnemyBullet();
            			}
HXLINE( 200)			this->playerJump(::Game_obj::jumpPower);
HXLINE( 201)			 ::Player _hx_tmp = this->player;
HXDLIN( 201)			_hx_tmp->spriteAnimated(this->player->get_state());
HXLINE( 202)			this->player->doShot(hx::ObjectPtr<OBJ_>(this));
HXLINE( 203)			if (this->player->get_invulnerability()) {
HXLINE( 205)				this->player->doInvulnerability();
            			}
HXLINE( 210)			this->bulletsMove();
HXLINE( 211)			this->grenadeMove();
HXLINE( 213)			this->generateEnemies();
HXLINE( 214)			this->moveEnemies();
HXLINE( 216)			this->doCollisionsWithBullet();
HXLINE( 221)			if (this->contains(this->bonus)) {
HXLINE( 223)				this->bonus->fall(this->gameLevel->level);
HXLINE( 224)				if (this->bonus->checkCollisionWithPlayer(this->player)) {
HXLINE( 226)					this->removeChild(this->bonus);
HXLINE( 227)					this->bonus = null();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update,(void))

void Game_obj::playerJump(Float jumpPower){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_287_playerJump)
HXLINE( 289)		bool _hx_tmp;
HXDLIN( 289)		bool _hx_tmp1;
HXDLIN( 289)		if (this->player->get_jump()) {
HXLINE( 289)			_hx_tmp1 = ::Game_obj::haveCollision;
            		}
            		else {
HXLINE( 289)			_hx_tmp1 = false;
            		}
HXDLIN( 289)		if (_hx_tmp1) {
HXLINE( 289)			_hx_tmp = hx::IsEq( this->player->get_collisionDirection(),::CollisionDirection_obj::up_dyn() );
            		}
            		else {
HXLINE( 289)			_hx_tmp = false;
            		}
HXDLIN( 289)		if (_hx_tmp) {
HXLINE( 291)			::haxe::Log_obj::trace(HX_("jump",ee,c4,69,46),hx::SourceInfo(HX_("Source/Game.hx",98,05,24,39),291,HX_("Game",12,20,38,2f),HX_("playerJump",ef,a0,2b,a9)));
HXLINE( 292)			 ::Player _hx_tmp2 = this->player;
HXDLIN( 292)			_hx_tmp2->set_speedY((this->player->get_speedY() - jumpPower));
            		}
HXLINE( 294)		if (!(::Game_obj::haveCollision)) {
HXLINE( 295)			this->player->set_state(::State_obj::jump_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,playerJump,(void))

void Game_obj::bulletsMove(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_298_bulletsMove)
HXLINE( 299)		int i = 0;
HXLINE( 300)		while((i < this->bullets->length)){
HXLINE( 302)			this->bullets->__get(i).StaticCast<  ::Bullet >()->move();
HXLINE( 303)			bool _hx_tmp;
HXDLIN( 303)			Float _hx_tmp1 = this->bullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 303)			Float _hx_tmp2 = (_hx_tmp1 - (this->bullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) )));
HXDLIN( 303)			if (!((_hx_tmp2 >= ::Main_obj::sizeWidth))) {
HXLINE( 303)				Float _hx_tmp3 = this->bullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 303)				_hx_tmp = ((_hx_tmp3 + (this->bullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) ))) <= 0);
            			}
            			else {
HXLINE( 303)				_hx_tmp = true;
            			}
HXDLIN( 303)			if (_hx_tmp) {
HXLINE( 305)				this->removeChild(this->bullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 306)				this->spentBullets->push(this->bullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 307)				this->bullets->remove(this->bullets->__get(i).StaticCast<  ::Bullet >());
            			}
HXLINE( 309)			i = (i + 1);
            		}
HXLINE( 311)		i = 0;
HXLINE( 312)		while((i < this->enemyBullets->length)){
HXLINE( 314)			this->enemyBullets->__get(i).StaticCast<  ::Bullet >()->move();
HXLINE( 315)			bool _hx_tmp4;
HXDLIN( 315)			Float _hx_tmp5 = this->enemyBullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 315)			Float _hx_tmp6 = (_hx_tmp5 - (this->enemyBullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) )));
HXDLIN( 315)			if (!((_hx_tmp6 >= ::Main_obj::sizeWidth))) {
HXLINE( 315)				Float _hx_tmp7 = this->enemyBullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 315)				_hx_tmp4 = ((_hx_tmp7 + (this->enemyBullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) ))) <= 0);
            			}
            			else {
HXLINE( 315)				_hx_tmp4 = true;
            			}
HXDLIN( 315)			if (_hx_tmp4) {
HXLINE( 317)				this->removeChild(this->enemyBullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 318)				this->spentEnemyBullets->push(this->enemyBullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 319)				this->enemyBullets->remove(this->enemyBullets->__get(i).StaticCast<  ::Bullet >());
            			}
HXLINE( 321)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,bulletsMove,(void))

void Game_obj::grenadeMove(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_326_grenadeMove)
HXDLIN( 326)		if (this->contains(this->grenade)) {
HXLINE( 328)			this->grenade->move();
HXLINE( 329)			this->grenade->doCollisionWithTiles(this->gameLevel->level);
HXLINE( 330)			this->doCollisionWithGrenade();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,grenadeMove,(void))

void Game_obj::generateEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_338_generateEnemies)
HXDLIN( 338)		int _hx_tmp = this->counter;
HXDLIN( 338)		int _hx_tmp1 = ::Main_obj::get_FPS();
HXDLIN( 338)		if ((_hx_tmp >= (( (Float)(_hx_tmp1) ) * this->spawnDelay))) {
HXLINE( 340)			if ((this->enemies->length < this->maxEnemies)) {
HXLINE( 342)				this->generateEnemy();
            			}
HXLINE( 344)			this->counter = 0;
            		}
            		else {
HXLINE( 348)			++this->counter;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,generateEnemies,(void))

void Game_obj::generateEnemy(){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_352_generateEnemy)
HXLINE( 353)		 ::Enemy enemy;
HXLINE( 354)		if ((::Math_obj::random() > ((Float)0.2))) {
HXLINE( 356)			if ((this->deadEnemies->length > 0)) {
HXLINE( 358)				enemy = this->deadEnemies->pop().StaticCast<  ::Enemy >();
            			}
            			else {
HXLINE( 362)				enemy =  ::Enemy_obj::__alloc( HX_CTX );
            			}
            		}
            		else {
HXLINE( 367)			if ((this->deadEnemiesWithGun->length > 0)) {
HXLINE( 369)				enemy = this->deadEnemiesWithGun->pop().StaticCast<  ::Enemy >();
            			}
            			else {
HXLINE( 373)				enemy =  ::EnemyWithGun_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE( 376)		enemy->set_y(( (Float)(100) ));
HXLINE( 377)		enemy->set_speedY(((Float)0.0));
HXLINE( 378)		this->enemies->push(enemy);
HXLINE( 379)		this->addChild(this->enemies->__get((this->enemies->length - 1)).StaticCast<  ::Enemy >());
HXLINE( 380)		if ((::Math_obj::random() >= ((Float)0.5))) {
HXLINE( 382)			enemy->set_x(( (Float)(800) ));
            		}
            		else {
HXLINE( 386)			enemy->set_x(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,generateEnemy,(void))

void Game_obj::moveEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_393_moveEnemies)
HXLINE( 394)		int i = 0;
HXLINE( 395)		while((i < this->enemies->length)){
HXLINE( 397)			this->enemies->__get(i).StaticCast<  ::Enemy >()->move(this->player,this->gameLevel->level);
HXLINE( 398)			this->enemies->__get(i).StaticCast<  ::Enemy >()->doShot(hx::ObjectPtr<OBJ_>(this));
HXLINE( 399)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,moveEnemies,(void))

void Game_obj::doCollisionsWithBullet(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_404_doCollisionsWithBullet)
HXLINE( 405)		int b = 0;
HXLINE( 406)		while((b < this->bullets->length)){
HXLINE( 408)			int e = 0;
HXLINE( 409)			while((e < this->enemies->length)){
HXLINE( 411)				if (this->bullets->__get(b).StaticCast<  ::Bullet >()->checkCollisionWithUnit(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 413)					this->removeChild(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 414)					this->spentBullets->push(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 415)					this->bullets->remove(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 416)					this->killEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 417)					b = (b - 1);
HXLINE( 418)					goto _hx_goto_17;
            				}
HXLINE( 420)				e = (e + 1);
            			}
            			_hx_goto_17:;
HXLINE( 422)			b = (b + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionsWithBullet,(void))

void Game_obj::doCollisionWithEnemyBullet(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_426_doCollisionWithEnemyBullet)
HXLINE( 427)		int b = 0;
HXLINE( 428)		while((b < this->enemyBullets->length)){
HXLINE( 430)			if (this->enemyBullets->__get(b).StaticCast<  ::Bullet >()->checkCollisionWithUnit(this->player)) {
HXLINE( 432)				this->spentEnemyBullets->push(this->enemyBullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 433)				this->removeChild(this->enemyBullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 434)				this->enemyBullets->remove(this->enemyBullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 436)				 ::Player _hx_tmp = this->player;
HXDLIN( 436)				_hx_tmp->set_healthPoints((this->player->get_healthPoints() - 1));
HXLINE( 437)				this->player->set_invulnerability(true);
HXLINE( 438)				if ((this->player->get_healthPoints() == 0)) {
HXLINE( 439)					this->gameIsOver = true;
            				}
HXLINE( 440)				goto _hx_goto_19;
            			}
HXLINE( 442)			b = (b + 1);
            		}
            		_hx_goto_19:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionWithEnemyBullet,(void))

void Game_obj::doCollisionWithGrenade(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_446_doCollisionWithGrenade)
HXLINE( 447)		int e = 0;
HXLINE( 448)		while((e < this->enemies->length)){
HXLINE( 450)			if (this->grenade->checkCollisionWithEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 452)				this->killEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 453)				this->grenade->set_state(::GrenadeState_obj::explosion_dyn());
HXLINE( 454)				goto _hx_goto_21;
            			}
HXLINE( 456)			e = (e + 1);
            		}
            		_hx_goto_21:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionWithGrenade,(void))

void Game_obj::killEnemy( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_460_killEnemy)
HXLINE( 461)		this->removeChild(enemy);
HXLINE( 462)		this->spawnBonus(enemy);
HXLINE( 463)		++this->gamePoints;
HXLINE( 464)		 ::openfl::text::TextField _hx_tmp = this->pointsField;
HXDLIN( 464)		_hx_tmp->set_text(::Std_obj::string(this->gamePoints));
HXLINE( 465)		if ((enemy->color == 16711935)) {
HXLINE( 466)			this->deadEnemiesWithGun->push(enemy);
            		}
            		else {
HXLINE( 468)			this->deadEnemies->push(enemy);
            		}
HXLINE( 469)		this->enemies->remove(enemy);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,killEnemy,(void))

bool Game_obj::get_gameIsOver(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_474_get_gameIsOver)
HXDLIN( 474)		return this->gameIsOver;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_gameIsOver,return )

int Game_obj::get_gamePoints(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_478_get_gamePoints)
HXDLIN( 478)		return this->gamePoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_gamePoints,return )

void Game_obj::doCollidionWithEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_482_doCollidionWithEnemies)
HXLINE( 483)		int e = 0;
HXLINE( 484)		while((e < this->enemies->length)){
HXLINE( 486)			if (this->player->checkCollisionWithEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 488)				 ::Player _hx_tmp = this->player;
HXDLIN( 488)				_hx_tmp->set_healthPoints((this->player->get_healthPoints() - 1));
HXLINE( 489)				this->player->set_invulnerability(true);
HXLINE( 490)				if ((this->player->get_healthPoints() == 0)) {
HXLINE( 491)					this->gameIsOver = true;
            				}
            			}
HXLINE( 493)			e = (e + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollidionWithEnemies,(void))

void Game_obj::showHealthIndicator(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_498_showHealthIndicator)
HXLINE( 499)		this->healthIndicator->get_graphics()->clear();
HXLINE( 500)		this->healthIndicator->get_graphics()->beginGradientFill(1,::Array_obj< int >::fromData( _hx_array_data_2f382012_29,2),::Array_obj< Float >::fromData( _hx_array_data_2f382012_30,2),::Array_obj< int >::fromData( _hx_array_data_2f382012_31,2),null(),null(),null(),null());
HXLINE( 501)		 ::openfl::display::Graphics _hx_tmp = this->healthIndicator->get_graphics();
HXDLIN( 501)		Float _hx_tmp1 = (( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(4) ));
HXDLIN( 501)		Float _hx_tmp2 = (_hx_tmp1 / ( (Float)(this->player->get_maxHealthPoints()) ));
HXDLIN( 501)		_hx_tmp->drawRect(( (Float)(0) ),( (Float)(0) ),(_hx_tmp2 * ( (Float)(this->player->get_healthPoints()) )),( (Float)(20) ));
HXLINE( 502)		this->addChild(this->healthIndicator);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,showHealthIndicator,(void))

void Game_obj::bonusBuf(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_507_bonusBuf)
HXDLIN( 507)		if (::Bonus_obj::bonusIsUsed) {
HXLINE( 509)			if (hx::IsEq( ::Bonus_obj::get_bonusType(),::BonusType_obj::slow_dyn() )) {
HXLINE( 511)				::Bonus_obj::doBonusSlow(this->player,this->enemies,this->deadEnemies,this->deadEnemiesWithGun,this->bullets,this->enemyBullets,this->grenade);
HXLINE( 512)				this->bonusIndicator->get_graphics()->clear();
HXLINE( 513)				this->bonusIndicator->get_graphics()->beginGradientFill(1,::Array_obj< int >::fromData( _hx_array_data_2f382012_33,2),::Array_obj< Float >::fromData( _hx_array_data_2f382012_34,2),::Array_obj< int >::fromData( _hx_array_data_2f382012_35,2),null(),null(),null(),null());
HXLINE( 514)				 ::openfl::display::Graphics _hx_tmp = this->bonusIndicator->get_graphics();
HXDLIN( 514)				Float _hx_tmp1 = ((( (Float)(::Main_obj::sizeWidth) ) / ((Float)3.5)) / ( (Float)(600) ));
HXDLIN( 514)				_hx_tmp->drawRect(( (Float)(0) ),( (Float)(0) ),(_hx_tmp1 * ( (Float)((600 - ::Bonus_obj::get_counter())) )),( (Float)(20) ));
HXLINE( 515)				this->addChild(this->bonusIndicator);
HXLINE( 516)				if ((::Bonus_obj::get_counter() < 1)) {
HXLINE( 517)					this->removeChild(this->bonusIndicator);
            				}
            			}
            			else {
HXLINE( 520)				if (hx::IsEq( ::Bonus_obj::get_bonusType(),::BonusType_obj::destroy_dyn() )) {
HXLINE( 521)					this->doBonusDestroy();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,bonusBuf,(void))

void Game_obj::spawnBonus( ::Enemy enemy){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_534_spawnBonus)
HXDLIN( 534)		bool _hx_tmp;
HXDLIN( 534)		bool _hx_tmp1;
HXDLIN( 534)		if (!(::Bonus_obj::bonusIsUsed)) {
HXDLIN( 534)			_hx_tmp1 = !(::Bonus_obj::haveBonus);
            		}
            		else {
HXDLIN( 534)			_hx_tmp1 = false;
            		}
HXDLIN( 534)		if (_hx_tmp1) {
HXDLIN( 534)			_hx_tmp = (::Math_obj::random() < ((Float)0.15));
            		}
            		else {
HXDLIN( 534)			_hx_tmp = false;
            		}
HXDLIN( 534)		if (_hx_tmp) {
HXLINE( 536)			::Bonus_obj::bonusIsUsed = false;
HXLINE( 537)			::Bonus_obj::haveBonus = true;
HXLINE( 538)			this->bonus =  ::Bonus_obj::__alloc( HX_CTX );
HXLINE( 539)			this->bonus->set_speedY(((Float)-10.0));
HXLINE( 540)			 ::Bonus _hx_tmp2 = this->bonus;
HXDLIN( 540)			_hx_tmp2->set_x(enemy->get_x());
HXLINE( 541)			 ::Bonus _hx_tmp3 = this->bonus;
HXDLIN( 541)			_hx_tmp3->set_y(enemy->get_y());
HXLINE( 542)			this->addChild(this->bonus);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,spawnBonus,(void))

void Game_obj::doBonusDestroy(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_546_doBonusDestroy)
HXLINE( 547)		int e = 0;
HXLINE( 548)		while((e < this->enemies->length)){
HXLINE( 551)			this->removeChild(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 552)			++this->gamePoints;
HXLINE( 553)			 ::openfl::text::TextField _hx_tmp = this->pointsField;
HXDLIN( 553)			_hx_tmp->set_text(::Std_obj::string(this->gamePoints));
HXLINE( 554)			this->deadEnemies->push(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 555)			this->enemies->remove(this->enemies->__get(e).StaticCast<  ::Enemy >());
            		}
HXLINE( 559)		::Bonus_obj::haveBonus = false;
HXLINE( 560)		::Bonus_obj::bonusIsUsed = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doBonusDestroy,(void))

void Game_obj::doCollisionsWithPLatforms(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_564_doCollisionsWithPLatforms)
HXDLIN( 564)		int _g = 0;
HXDLIN( 564)		int _g1 = this->gameLevel->platforms->length;
HXDLIN( 564)		while((_g < _g1)){
HXDLIN( 564)			_g = (_g + 1);
HXDLIN( 564)			int i = (_g - 1);
HXLINE( 566)			this->player->doCollisionWithPlatform(this->gameLevel->platforms->__get(i).StaticCast<  ::openfl::display::Sprite >());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionsWithPLatforms,(void))

void Game_obj::set_Pause(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_571_set_Pause)
HXDLIN( 571)		this->addChild(this->pauseScreen);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,set_Pause,(void))

void Game_obj::set_Unpause(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_577_set_Unpause)
HXDLIN( 577)		this->removeChild(this->pauseScreen);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,set_Unpause,(void))

bool Game_obj::haveCollision;

Float Game_obj::jumpPower;


hx::ObjectPtr< Game_obj > Game_obj::__new(int width,int height) {
	hx::ObjectPtr< Game_obj > __this = new Game_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< Game_obj > Game_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	Game_obj *__this = (Game_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Game_obj), true, "Game"));
	*(void **)__this = Game_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

Game_obj::Game_obj()
{
}

void Game_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Game);
	HX_MARK_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_MARK_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_MARK_MEMBER_NAME(backGround,"backGround");
	HX_MARK_MEMBER_NAME(quitButton,"quitButton");
	HX_MARK_MEMBER_NAME(quitButtonIsPressed,"quitButtonIsPressed");
	HX_MARK_MEMBER_NAME(pauseIsPressed,"pauseIsPressed");
	HX_MARK_MEMBER_NAME(gameLevel,"gameLevel");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(gameIsOver,"gameIsOver");
	HX_MARK_MEMBER_NAME(bonus,"bonus");
	HX_MARK_MEMBER_NAME(bonusIndicator,"bonusIndicator");
	HX_MARK_MEMBER_NAME(gamePoints,"gamePoints");
	HX_MARK_MEMBER_NAME(pointsField,"pointsField");
	HX_MARK_MEMBER_NAME(bullets,"bullets");
	HX_MARK_MEMBER_NAME(spentBullets,"spentBullets");
	HX_MARK_MEMBER_NAME(enemyBullets,"enemyBullets");
	HX_MARK_MEMBER_NAME(spentEnemyBullets,"spentEnemyBullets");
	HX_MARK_MEMBER_NAME(grenade,"grenade");
	HX_MARK_MEMBER_NAME(enemies,"enemies");
	HX_MARK_MEMBER_NAME(deadEnemies,"deadEnemies");
	HX_MARK_MEMBER_NAME(deadEnemiesWithGun,"deadEnemiesWithGun");
	HX_MARK_MEMBER_NAME(maxEnemies,"maxEnemies");
	HX_MARK_MEMBER_NAME(spawnDelay,"spawnDelay");
	HX_MARK_MEMBER_NAME(counter,"counter");
	HX_MARK_MEMBER_NAME(healthIndicator,"healthIndicator");
	HX_MARK_MEMBER_NAME(pauseScreen,"pauseScreen");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Game_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_VISIT_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_VISIT_MEMBER_NAME(backGround,"backGround");
	HX_VISIT_MEMBER_NAME(quitButton,"quitButton");
	HX_VISIT_MEMBER_NAME(quitButtonIsPressed,"quitButtonIsPressed");
	HX_VISIT_MEMBER_NAME(pauseIsPressed,"pauseIsPressed");
	HX_VISIT_MEMBER_NAME(gameLevel,"gameLevel");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(gameIsOver,"gameIsOver");
	HX_VISIT_MEMBER_NAME(bonus,"bonus");
	HX_VISIT_MEMBER_NAME(bonusIndicator,"bonusIndicator");
	HX_VISIT_MEMBER_NAME(gamePoints,"gamePoints");
	HX_VISIT_MEMBER_NAME(pointsField,"pointsField");
	HX_VISIT_MEMBER_NAME(bullets,"bullets");
	HX_VISIT_MEMBER_NAME(spentBullets,"spentBullets");
	HX_VISIT_MEMBER_NAME(enemyBullets,"enemyBullets");
	HX_VISIT_MEMBER_NAME(spentEnemyBullets,"spentEnemyBullets");
	HX_VISIT_MEMBER_NAME(grenade,"grenade");
	HX_VISIT_MEMBER_NAME(enemies,"enemies");
	HX_VISIT_MEMBER_NAME(deadEnemies,"deadEnemies");
	HX_VISIT_MEMBER_NAME(deadEnemiesWithGun,"deadEnemiesWithGun");
	HX_VISIT_MEMBER_NAME(maxEnemies,"maxEnemies");
	HX_VISIT_MEMBER_NAME(spawnDelay,"spawnDelay");
	HX_VISIT_MEMBER_NAME(counter,"counter");
	HX_VISIT_MEMBER_NAME(healthIndicator,"healthIndicator");
	HX_VISIT_MEMBER_NAME(pauseScreen,"pauseScreen");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bonus") ) { return hx::Val( bonus ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bullets") ) { return hx::Val( bullets ); }
		if (HX_FIELD_EQ(inName,"grenade") ) { return hx::Val( grenade ); }
		if (HX_FIELD_EQ(inName,"enemies") ) { return hx::Val( enemies ); }
		if (HX_FIELD_EQ(inName,"counter") ) { return hx::Val( counter ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bonusBuf") ) { return hx::Val( bonusBuf_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { return hx::Val( sizeWidth ); }
		if (HX_FIELD_EQ(inName,"gameLevel") ) { return hx::Val( gameLevel ); }
		if (HX_FIELD_EQ(inName,"killEnemy") ) { return hx::Val( killEnemy_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_Pause") ) { return hx::Val( set_Pause_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { return hx::Val( sizeHeight ); }
		if (HX_FIELD_EQ(inName,"backGround") ) { return hx::Val( backGround ); }
		if (HX_FIELD_EQ(inName,"quitButton") ) { return hx::Val( quitButton ); }
		if (HX_FIELD_EQ(inName,"gameIsOver") ) { return hx::Val( inCallProp == hx::paccAlways ? get_gameIsOver() : gameIsOver ); }
		if (HX_FIELD_EQ(inName,"gamePoints") ) { return hx::Val( gamePoints ); }
		if (HX_FIELD_EQ(inName,"maxEnemies") ) { return hx::Val( maxEnemies ); }
		if (HX_FIELD_EQ(inName,"spawnDelay") ) { return hx::Val( spawnDelay ); }
		if (HX_FIELD_EQ(inName,"playerJump") ) { return hx::Val( playerJump_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnBonus") ) { return hx::Val( spawnBonus_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointsField") ) { return hx::Val( pointsField ); }
		if (HX_FIELD_EQ(inName,"deadEnemies") ) { return hx::Val( deadEnemies ); }
		if (HX_FIELD_EQ(inName,"pauseScreen") ) { return hx::Val( pauseScreen ); }
		if (HX_FIELD_EQ(inName,"bulletsMove") ) { return hx::Val( bulletsMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"grenadeMove") ) { return hx::Val( grenadeMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveEnemies") ) { return hx::Val( moveEnemies_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_Unpause") ) { return hx::Val( set_Unpause_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"spentBullets") ) { return hx::Val( spentBullets ); }
		if (HX_FIELD_EQ(inName,"enemyBullets") ) { return hx::Val( enemyBullets ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"quitButtonOut") ) { return hx::Val( quitButtonOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateEnemy") ) { return hx::Val( generateEnemy_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pauseIsPressed") ) { return hx::Val( pauseIsPressed ); }
		if (HX_FIELD_EQ(inName,"bonusIndicator") ) { return hx::Val( bonusIndicator ); }
		if (HX_FIELD_EQ(inName,"quitButtonOver") ) { return hx::Val( quitButtonOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gameIsOver") ) { return hx::Val( get_gameIsOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gamePoints") ) { return hx::Val( get_gamePoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"doBonusDestroy") ) { return hx::Val( doBonusDestroy_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"healthIndicator") ) { return hx::Val( healthIndicator ); }
		if (HX_FIELD_EQ(inName,"quitButtonClick") ) { return hx::Val( quitButtonClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateEnemies") ) { return hx::Val( generateEnemies_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"spentEnemyBullets") ) { return hx::Val( spentEnemyBullets ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"deadEnemiesWithGun") ) { return hx::Val( deadEnemiesWithGun ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quitButtonIsPressed") ) { return hx::Val( quitButtonIsPressed ); }
		if (HX_FIELD_EQ(inName,"showHealthIndicator") ) { return hx::Val( showHealthIndicator_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"doCollisionsWithBullet") ) { return hx::Val( doCollisionsWithBullet_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollisionWithGrenade") ) { return hx::Val( doCollisionWithGrenade_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollidionWithEnemies") ) { return hx::Val( doCollidionWithEnemies_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_quitButtonIsPressed") ) { return hx::Val( get_quitButtonIsPressed_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"doCollisionsWithPLatforms") ) { return hx::Val( doCollisionsWithPLatforms_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"doCollisionWithEnemyBullet") ) { return hx::Val( doCollisionWithEnemyBullet_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Game_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"jumpPower") ) { outValue = ( jumpPower ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"haveCollision") ) { outValue = ( haveCollision ); return true; }
	}
	return false;
}

hx::Val Game_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"bonus") ) { bonus=inValue.Cast<  ::Bonus >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bullets") ) { bullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grenade") ) { grenade=inValue.Cast<  ::Grenade >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemies") ) { enemies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"counter") ) { counter=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { sizeWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameLevel") ) { gameLevel=inValue.Cast<  ::GameLevel >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { sizeHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backGround") ) { backGround=inValue.Cast<  ::BackGround >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quitButton") ) { quitButton=inValue.Cast<  ::Button >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameIsOver") ) { gameIsOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamePoints") ) { gamePoints=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxEnemies") ) { maxEnemies=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnDelay") ) { spawnDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pointsField") ) { pointsField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deadEnemies") ) { deadEnemies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pauseScreen") ) { pauseScreen=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"spentBullets") ) { spentBullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemyBullets") ) { enemyBullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pauseIsPressed") ) { pauseIsPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bonusIndicator") ) { bonusIndicator=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"healthIndicator") ) { healthIndicator=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"spentEnemyBullets") ) { spentEnemyBullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"deadEnemiesWithGun") ) { deadEnemiesWithGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quitButtonIsPressed") ) { quitButtonIsPressed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Game_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"jumpPower") ) { jumpPower=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"haveCollision") ) { haveCollision=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Game_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sizeWidth",85,29,f9,c8));
	outFields->push(HX_("sizeHeight",88,a3,5a,c7));
	outFields->push(HX_("backGround",0e,08,b2,5a));
	outFields->push(HX_("quitButton",21,5b,13,a5));
	outFields->push(HX_("quitButtonIsPressed",77,e8,7a,c2));
	outFields->push(HX_("pauseIsPressed",02,ca,44,47));
	outFields->push(HX_("gameLevel",32,04,7e,a7));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("gameIsOver",f0,3f,95,a9));
	outFields->push(HX_("bonus",9f,66,f7,b6));
	outFields->push(HX_("bonusIndicator",30,15,ad,81));
	outFields->push(HX_("gamePoints",b5,fb,a3,39));
	outFields->push(HX_("pointsField",97,53,cf,40));
	outFields->push(HX_("bullets",f1,67,ef,29));
	outFields->push(HX_("spentBullets",23,da,85,4d));
	outFields->push(HX_("enemyBullets",89,d6,5b,fe));
	outFields->push(HX_("spentEnemyBullets",17,2f,00,c8));
	outFields->push(HX_("grenade",4e,eb,49,c0));
	outFields->push(HX_("enemies",a6,68,0e,d3));
	outFields->push(HX_("deadEnemies",62,1e,d0,19));
	outFields->push(HX_("deadEnemiesWithGun",d8,51,93,bb));
	outFields->push(HX_("maxEnemies",62,e2,32,3d));
	outFields->push(HX_("spawnDelay",48,33,3f,11));
	outFields->push(HX_("counter",fc,ae,59,1d));
	outFields->push(HX_("healthIndicator",93,ab,d6,37));
	outFields->push(HX_("pauseScreen",02,23,6e,3b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Game_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Game_obj,sizeWidth),HX_("sizeWidth",85,29,f9,c8)},
	{hx::fsInt,(int)offsetof(Game_obj,sizeHeight),HX_("sizeHeight",88,a3,5a,c7)},
	{hx::fsObject /*  ::BackGround */ ,(int)offsetof(Game_obj,backGround),HX_("backGround",0e,08,b2,5a)},
	{hx::fsObject /*  ::Button */ ,(int)offsetof(Game_obj,quitButton),HX_("quitButton",21,5b,13,a5)},
	{hx::fsBool,(int)offsetof(Game_obj,quitButtonIsPressed),HX_("quitButtonIsPressed",77,e8,7a,c2)},
	{hx::fsBool,(int)offsetof(Game_obj,pauseIsPressed),HX_("pauseIsPressed",02,ca,44,47)},
	{hx::fsObject /*  ::GameLevel */ ,(int)offsetof(Game_obj,gameLevel),HX_("gameLevel",32,04,7e,a7)},
	{hx::fsObject /*  ::Player */ ,(int)offsetof(Game_obj,player),HX_("player",61,eb,b8,37)},
	{hx::fsBool,(int)offsetof(Game_obj,gameIsOver),HX_("gameIsOver",f0,3f,95,a9)},
	{hx::fsObject /*  ::Bonus */ ,(int)offsetof(Game_obj,bonus),HX_("bonus",9f,66,f7,b6)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Game_obj,bonusIndicator),HX_("bonusIndicator",30,15,ad,81)},
	{hx::fsInt,(int)offsetof(Game_obj,gamePoints),HX_("gamePoints",b5,fb,a3,39)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(Game_obj,pointsField),HX_("pointsField",97,53,cf,40)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,bullets),HX_("bullets",f1,67,ef,29)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,spentBullets),HX_("spentBullets",23,da,85,4d)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,enemyBullets),HX_("enemyBullets",89,d6,5b,fe)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,spentEnemyBullets),HX_("spentEnemyBullets",17,2f,00,c8)},
	{hx::fsObject /*  ::Grenade */ ,(int)offsetof(Game_obj,grenade),HX_("grenade",4e,eb,49,c0)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,enemies),HX_("enemies",a6,68,0e,d3)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,deadEnemies),HX_("deadEnemies",62,1e,d0,19)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,deadEnemiesWithGun),HX_("deadEnemiesWithGun",d8,51,93,bb)},
	{hx::fsInt,(int)offsetof(Game_obj,maxEnemies),HX_("maxEnemies",62,e2,32,3d)},
	{hx::fsFloat,(int)offsetof(Game_obj,spawnDelay),HX_("spawnDelay",48,33,3f,11)},
	{hx::fsInt,(int)offsetof(Game_obj,counter),HX_("counter",fc,ae,59,1d)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Game_obj,healthIndicator),HX_("healthIndicator",93,ab,d6,37)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Game_obj,pauseScreen),HX_("pauseScreen",02,23,6e,3b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Game_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Game_obj::haveCollision,HX_("haveCollision",ea,c8,af,00)},
	{hx::fsFloat,(void *) &Game_obj::jumpPower,HX_("jumpPower",37,58,67,52)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_("sizeWidth",85,29,f9,c8),
	HX_("sizeHeight",88,a3,5a,c7),
	HX_("backGround",0e,08,b2,5a),
	HX_("quitButton",21,5b,13,a5),
	HX_("quitButtonIsPressed",77,e8,7a,c2),
	HX_("pauseIsPressed",02,ca,44,47),
	HX_("gameLevel",32,04,7e,a7),
	HX_("player",61,eb,b8,37),
	HX_("gameIsOver",f0,3f,95,a9),
	HX_("bonus",9f,66,f7,b6),
	HX_("bonusIndicator",30,15,ad,81),
	HX_("gamePoints",b5,fb,a3,39),
	HX_("pointsField",97,53,cf,40),
	HX_("bullets",f1,67,ef,29),
	HX_("spentBullets",23,da,85,4d),
	HX_("enemyBullets",89,d6,5b,fe),
	HX_("spentEnemyBullets",17,2f,00,c8),
	HX_("grenade",4e,eb,49,c0),
	HX_("enemies",a6,68,0e,d3),
	HX_("deadEnemies",62,1e,d0,19),
	HX_("deadEnemiesWithGun",d8,51,93,bb),
	HX_("maxEnemies",62,e2,32,3d),
	HX_("spawnDelay",48,33,3f,11),
	HX_("counter",fc,ae,59,1d),
	HX_("healthIndicator",93,ab,d6,37),
	HX_("pauseScreen",02,23,6e,3b),
	HX_("pause",f6,d6,57,bd),
	HX_("quitButtonClick",67,99,35,9d),
	HX_("quitButtonOver",15,bd,27,d6),
	HX_("quitButtonOut",ed,e7,43,c5),
	HX_("get_quitButtonIsPressed",0e,8f,d0,ca),
	HX_("update",09,86,05,87),
	HX_("playerJump",ef,a0,2b,a9),
	HX_("bulletsMove",a2,c3,fa,89),
	HX_("grenadeMove",7f,b9,96,5f),
	HX_("generateEnemies",f1,b1,c8,ae),
	HX_("generateEnemy",d3,e2,f7,16),
	HX_("moveEnemies",95,a1,8a,ab),
	HX_("doCollisionsWithBullet",34,0b,7d,c8),
	HX_("doCollisionWithEnemyBullet",9d,7e,e0,64),
	HX_("doCollisionWithGrenade",c1,b5,25,37),
	HX_("killEnemy",ca,45,d9,5d),
	HX_("get_gameIsOver",39,c8,8a,1f),
	HX_("get_gamePoints",fe,83,99,af),
	HX_("doCollidionWithEnemies",ca,d6,2b,8f),
	HX_("showHealthIndicator",16,03,f7,b4),
	HX_("bonusBuf",d4,c1,77,92),
	HX_("spawnBonus",64,c2,0f,f1),
	HX_("doBonusDestroy",46,d8,ca,c9),
	HX_("doCollisionsWithPLatforms",ce,90,58,a5),
	HX_("set_Pause",39,8f,7f,77),
	HX_("set_Unpause",00,5d,a1,17),
	::String(null()) };

static void Game_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Game_obj::haveCollision,"haveCollision");
	HX_MARK_MEMBER_NAME(Game_obj::jumpPower,"jumpPower");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Game_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Game_obj::haveCollision,"haveCollision");
	HX_VISIT_MEMBER_NAME(Game_obj::jumpPower,"jumpPower");
};

#endif

hx::Class Game_obj::__mClass;

static ::String Game_obj_sStaticFields[] = {
	HX_("haveCollision",ea,c8,af,00),
	HX_("jumpPower",37,58,67,52),
	::String(null())
};

void Game_obj::__register()
{
	Game_obj _hx_dummy;
	Game_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Game",12,20,38,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Game_obj::__GetStatic;
	__mClass->mSetStaticField = &Game_obj::__SetStatic;
	__mClass->mMarkFunc = Game_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Game_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Game_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Game_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_24_boot)
HXDLIN(  24)		haveCollision = false;
            	}
}

