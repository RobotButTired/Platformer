// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_BackGround
#include <BackGround.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_RulesScreen
#include <RulesScreen.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_315d3e4978fede0a_6_new,"RulesScreen","new",0x963fad15,"RulesScreen.new","RulesScreen.hx",6,0x0c274bfb)
HX_LOCAL_STACK_FRAME(_hx_pos_315d3e4978fede0a_34_backButtonOver,"RulesScreen","backButtonOver",0x1329dad8,"RulesScreen.backButtonOver","RulesScreen.hx",34,0x0c274bfb)
HX_LOCAL_STACK_FRAME(_hx_pos_315d3e4978fede0a_39_backButtonOut,"RulesScreen","backButtonOut",0x4f4bf38a,"RulesScreen.backButtonOut","RulesScreen.hx",39,0x0c274bfb)
HX_LOCAL_STACK_FRAME(_hx_pos_315d3e4978fede0a_45_backButtonClick,"RulesScreen","backButtonClick",0xc20d8644,"RulesScreen.backButtonClick","RulesScreen.hx",45,0x0c274bfb)
HX_LOCAL_STACK_FRAME(_hx_pos_315d3e4978fede0a_49_get_backButtonIsPressed,"RulesScreen","get_backButtonIsPressed",0x9486aceb,"RulesScreen.get_backButtonIsPressed","RulesScreen.hx",49,0x0c274bfb)
HX_LOCAL_STACK_FRAME(_hx_pos_315d3e4978fede0a_53_reset,"RulesScreen","reset",0xb4ec7dc4,"RulesScreen.reset","RulesScreen.hx",53,0x0c274bfb)

void RulesScreen_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_315d3e4978fede0a_6_new)
HXLINE(  12)		this->backButtonIsPressed = false;
HXLINE(  17)		super::__construct();
HXLINE(  18)		this->sizeWidth = width;
HXLINE(  19)		this->sizeHeight = height;
HXLINE(  21)		this->backGround =  ::BackGround_obj::__alloc( HX_CTX ,HX_("rulesScreen",c3,e6,e9,fd));
HXLINE(  22)		this->addChild(this->backGround);
HXLINE(  23)		this->backButton =  ::Button_obj::__alloc( HX_CTX ,( (Float)(this->sizeWidth) ),( (Float)(this->sizeHeight) ),HX_("BACK",27,a2,d1,2b));
HXLINE(  24)		this->backButton->set_x((( (Float)(this->sizeWidth) ) / ( (Float)(2) )));
HXLINE(  25)		this->backButton->set_y(((( (Float)(this->sizeHeight) ) * ((Float)3.5)) / ( (Float)(4) )));
HXLINE(  26)		this->addChild(this->backButton);
HXLINE(  27)		this->backButton->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->backButtonOver_dyn(),null(),null(),null());
HXLINE(  28)		this->backButton->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->backButtonOut_dyn(),null(),null(),null());
HXLINE(  29)		this->backButton->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->backButtonClick_dyn(),null(),null(),null());
            	}

Dynamic RulesScreen_obj::__CreateEmpty() { return new RulesScreen_obj; }

void *RulesScreen_obj::_hx_vtable = 0;

Dynamic RulesScreen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RulesScreen_obj > _hx_result = new RulesScreen_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool RulesScreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x3faa22db;
		}
	}
}

void RulesScreen_obj::backButtonOver( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_315d3e4978fede0a_34_backButtonOver)
HXLINE(  35)		this->backButton->set_scaleX(((Float)1.25));
HXLINE(  36)		this->backButton->set_scaleY(((Float)1.25));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RulesScreen_obj,backButtonOver,(void))

void RulesScreen_obj::backButtonOut( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_315d3e4978fede0a_39_backButtonOut)
HXLINE(  40)		this->backButton->set_scaleX(((Float)1.0));
HXLINE(  41)		this->backButton->set_scaleY(((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(RulesScreen_obj,backButtonOut,(void))

void RulesScreen_obj::backButtonClick( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_315d3e4978fede0a_45_backButtonClick)
HXDLIN(  45)		this->backButtonIsPressed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RulesScreen_obj,backButtonClick,(void))

bool RulesScreen_obj::get_backButtonIsPressed(){
            	HX_STACKFRAME(&_hx_pos_315d3e4978fede0a_49_get_backButtonIsPressed)
HXDLIN(  49)		return this->backButtonIsPressed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RulesScreen_obj,get_backButtonIsPressed,return )

void RulesScreen_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_315d3e4978fede0a_53_reset)
HXDLIN(  53)		this->backButtonIsPressed = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RulesScreen_obj,reset,(void))


hx::ObjectPtr< RulesScreen_obj > RulesScreen_obj::__new(int width,int height) {
	hx::ObjectPtr< RulesScreen_obj > __this = new RulesScreen_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< RulesScreen_obj > RulesScreen_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	RulesScreen_obj *__this = (RulesScreen_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RulesScreen_obj), true, "RulesScreen"));
	*(void **)__this = RulesScreen_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

RulesScreen_obj::RulesScreen_obj()
{
}

void RulesScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RulesScreen);
	HX_MARK_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_MARK_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_MARK_MEMBER_NAME(backButton,"backButton");
	HX_MARK_MEMBER_NAME(backButtonIsPressed,"backButtonIsPressed");
	HX_MARK_MEMBER_NAME(backGround,"backGround");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RulesScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_VISIT_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_VISIT_MEMBER_NAME(backButton,"backButton");
	HX_VISIT_MEMBER_NAME(backButtonIsPressed,"backButtonIsPressed");
	HX_VISIT_MEMBER_NAME(backGround,"backGround");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val RulesScreen_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { return hx::Val( sizeWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { return hx::Val( sizeHeight ); }
		if (HX_FIELD_EQ(inName,"backButton") ) { return hx::Val( backButton ); }
		if (HX_FIELD_EQ(inName,"backGround") ) { return hx::Val( backGround ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"backButtonOut") ) { return hx::Val( backButtonOut_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backButtonOver") ) { return hx::Val( backButtonOver_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backButtonClick") ) { return hx::Val( backButtonClick_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"backButtonIsPressed") ) { return hx::Val( backButtonIsPressed ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_backButtonIsPressed") ) { return hx::Val( get_backButtonIsPressed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RulesScreen_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { sizeWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { sizeHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backButton") ) { backButton=inValue.Cast<  ::Button >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backGround") ) { backGround=inValue.Cast<  ::BackGround >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"backButtonIsPressed") ) { backButtonIsPressed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RulesScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sizeWidth",85,29,f9,c8));
	outFields->push(HX_("sizeHeight",88,a3,5a,c7));
	outFields->push(HX_("backButton",79,47,6a,18));
	outFields->push(HX_("backButtonIsPressed",1f,b1,7f,f4));
	outFields->push(HX_("backGround",0e,08,b2,5a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo RulesScreen_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(RulesScreen_obj,sizeWidth),HX_("sizeWidth",85,29,f9,c8)},
	{hx::fsInt,(int)offsetof(RulesScreen_obj,sizeHeight),HX_("sizeHeight",88,a3,5a,c7)},
	{hx::fsObject /*  ::Button */ ,(int)offsetof(RulesScreen_obj,backButton),HX_("backButton",79,47,6a,18)},
	{hx::fsBool,(int)offsetof(RulesScreen_obj,backButtonIsPressed),HX_("backButtonIsPressed",1f,b1,7f,f4)},
	{hx::fsObject /*  ::BackGround */ ,(int)offsetof(RulesScreen_obj,backGround),HX_("backGround",0e,08,b2,5a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RulesScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String RulesScreen_obj_sMemberFields[] = {
	HX_("sizeWidth",85,29,f9,c8),
	HX_("sizeHeight",88,a3,5a,c7),
	HX_("backButton",79,47,6a,18),
	HX_("backButtonIsPressed",1f,b1,7f,f4),
	HX_("backGround",0e,08,b2,5a),
	HX_("backButtonOver",6d,b5,a7,e8),
	HX_("backButtonOut",95,42,33,c4),
	HX_("backButtonClick",0f,ee,ae,ba),
	HX_("get_backButtonIsPressed",b6,57,d5,fc),
	HX_("reset",cf,49,c8,e6),
	::String(null()) };

hx::Class RulesScreen_obj::__mClass;

void RulesScreen_obj::__register()
{
	RulesScreen_obj _hx_dummy;
	RulesScreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("RulesScreen",a3,7e,1c,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RulesScreen_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RulesScreen_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RulesScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RulesScreen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

