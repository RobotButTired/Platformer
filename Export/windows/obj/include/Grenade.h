// Generated by Haxe 4.0.1
#ifndef INCLUDED_Grenade
#define INCLUDED_Grenade

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(Grenade)
HX_DECLARE_CLASS0(GrenadeState)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES Grenade_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Grenade_obj OBJ_;
		Grenade_obj();

	public:
		enum { _hx_ClassId = 0x3d043b66 };

		void __construct( ::Player player);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Grenade")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Grenade"); }
		static hx::ObjectPtr< Grenade_obj > __new( ::Player player);
		static hx::ObjectPtr< Grenade_obj > __alloc(hx::Ctx *_hx_ctx, ::Player player);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Grenade_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Grenade",2e,13,9b,8d); }

		Float radius;
		Float speedX;
		Float speedY;
		Float gravity;
		 ::GrenadeState state;
		Float explosionTime;
		Float explosionRadius;
		Float currentRadius;
		int explosionCounter;
		void move();
		::Dynamic move_dyn();

		void setGrenade( ::Player player);
		::Dynamic setGrenade_dyn();

		void doCollisionWithTiles(::Array< ::Dynamic> level);
		::Dynamic doCollisionWithTiles_dyn();

		bool checkCollisionWithTile(int tileType,Float tileX,Float tileY);
		::Dynamic checkCollisionWithTile_dyn();

		bool checkCollisionWithEnemy( ::Enemy enemy);
		::Dynamic checkCollisionWithEnemy_dyn();

		Float clamp(Float value,Float min,Float max);
		::Dynamic clamp_dyn();

		 ::GrenadeState get_state();
		::Dynamic get_state_dyn();

		void set_state( ::GrenadeState value);
		::Dynamic set_state_dyn();

		Float get_explosionRadius();
		::Dynamic get_explosionRadius_dyn();

		void set_speedX(Float value);
		::Dynamic set_speedX_dyn();

		Float get_speedX();
		::Dynamic get_speedX_dyn();

		void set_speedY(Float value);
		::Dynamic set_speedY_dyn();

		Float get_speedY();
		::Dynamic get_speedY_dyn();

		void set_gravity(Float value);
		::Dynamic set_gravity_dyn();

		Float get_gravity();
		::Dynamic get_gravity_dyn();

};


#endif /* INCLUDED_Grenade */ 
