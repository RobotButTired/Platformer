// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_BackGround
#include <BackGround.h>
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_GameLevel
#include <GameLevel.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_State
#include <State.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69efd8c9269cf369_10_new,"Game","new",0x79ba3204,"Game.new","Game.hx",10,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_83_quitButtonClick,"Game","quitButtonClick",0x3679e10b,"Game.quitButtonClick","Game.hx",83,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_86_quitButtonOver,"Game","quitButtonOver",0x51ad35f1,"Game.quitButtonOver","Game.hx",86,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_91_quitButtonOut,"Game","quitButtonOut",0x0f4a3e91,"Game.quitButtonOut","Game.hx",91,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_98_get_quitButtonIsPressed,"Game","get_quitButtonIsPressed",0x5edb1ab2,"Game.get_quitButtonIsPressed","Game.hx",98,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_101_update,"Game","update",0xfb78c2e5,"Game.update","Game.hx",101,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_116_checkCollisionWithTile,"Game","checkCollisionWithTile",0xb72889da,"Game.checkCollisionWithTile","Game.hx",116,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_149_doCollisionsWithTiles,"Game","doCollisionsWithTiles",0xff7a0377,"Game.doCollisionsWithTiles","Game.hx",149,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_163_playerJump,"Game","playerJump",0x8a147bcb,"Game.playerJump","Game.hx",163,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_174_bulletsMove,"Game","bulletsMove",0x74d16946,"Game.bulletsMove","Game.hx",174,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_191_generateEnemies,"Game","generateEnemies",0x480cf995,"Game.generateEnemies","Game.hx",191,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_202_generateEnemy,"Game","generateEnemy",0x60fe3977,"Game.generateEnemy","Game.hx",202,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_228_moveEnemies,"Game","moveEnemies",0x96614739,"Game.moveEnemies","Game.hx",228,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_238_doCollisionsWithBullet,"Game","doCollisionsWithBullet",0x41b0c010,"Game.doCollisionsWithBullet","Game.hx",238,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_262_get_gameIsOver,"Game","get_gameIsOver",0x9b104115,"Game.get_gameIsOver","Game.hx",262,0x56a4f9ec)
HX_LOCAL_STACK_FRAME(_hx_pos_69efd8c9269cf369_266_doCollidionWithEnemies,"Game","doCollidionWithEnemies",0x085f8ba6,"Game.doCollidionWithEnemies","Game.hx",266,0x56a4f9ec)

void Game_obj::__construct(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_10_new)
HXLINE(  28)		this->spawnDelay = ((Float)2.0);
HXLINE(  27)		this->maxEnemies = 2;
HXLINE(  20)		this->gameIsOver = false;
HXLINE(  19)		this->haveCollision = false;
HXLINE(  16)		this->quitButtonIsPressed = false;
HXLINE(  33)		super::__construct();
HXLINE(  34)		this->sizeWidth = width;
HXLINE(  35)		this->sizeHeight = height;
HXLINE(  37)		this->backGround =  ::BackGround_obj::__alloc( HX_CTX ,HX_("gameScreen",fe,24,d3,89));
HXLINE(  39)		this->addChild(this->backGround);
HXLINE(  42)		this->gameLevel =  ::GameLevel_obj::__alloc( HX_CTX ,this->sizeWidth,this->sizeHeight);
HXLINE(  43)		this->addChild(this->gameLevel);
HXLINE(  46)		this->bullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  47)		this->spentBullets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  51)		this->player =  ::Player_obj::__alloc( HX_CTX );
HXLINE(  52)		this->player->set_x(( (Float)(100) ));
HXLINE(  53)		this->player->set_y(( (Float)(100) ));
HXLINE(  54)		this->addChild(this->player);
HXLINE(  57)		this->enemies = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  58)		this->deadEnemies = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  59)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  59)		Float _hx_tmp;
HXDLIN(  59)		if ((timer > 0)) {
HXLINE(  59)			_hx_tmp = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  59)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN(  59)		this->enemiesTimeFlag = _hx_tmp;
HXLINE(  63)		this->quitButton =  ::Button_obj::__alloc( HX_CTX ,(( (Float)(this->sizeWidth) ) / ( (Float)(2) )),(( (Float)(this->sizeHeight) ) / ( (Float)(2) )),HX_("QUIT",cf,07,cb,35));
HXLINE(  64)		this->quitButton->set_x((( (Float)((this->sizeWidth * 7)) ) / ( (Float)(8) )));
HXLINE(  65)		this->quitButton->set_y((( (Float)(this->sizeHeight) ) / ( (Float)(25) )));
HXLINE(  67)		this->addChild(this->quitButton);
HXLINE(  69)		this->quitButton->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->quitButtonOver_dyn(),null(),null(),null());
HXLINE(  70)		this->quitButton->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->quitButtonOut_dyn(),null(),null(),null());
HXLINE(  71)		this->quitButton->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->quitButtonClick_dyn(),null(),null(),null());
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

void *Game_obj::_hx_vtable = 0;

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Game_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x2f382012) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2f382012;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Game_obj::quitButtonClick( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_83_quitButtonClick)
HXDLIN(  83)		this->quitButtonIsPressed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonClick,(void))

void Game_obj::quitButtonOver( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_86_quitButtonOver)
HXLINE(  87)		this->quitButton->set_scaleX(((Float)1.25));
HXLINE(  88)		this->quitButton->set_scaleY(((Float)1.25));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonOver,(void))

void Game_obj::quitButtonOut( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_91_quitButtonOut)
HXLINE(  92)		this->quitButton->set_scaleX(((Float)1.0));
HXLINE(  93)		this->quitButton->set_scaleY(((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,quitButtonOut,(void))

bool Game_obj::get_quitButtonIsPressed(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_98_get_quitButtonIsPressed)
HXDLIN(  98)		return this->quitButtonIsPressed;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_quitButtonIsPressed,return )

void Game_obj::update(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_101_update)
HXLINE( 102)		this->player->move();
HXLINE( 103)		this->doCollisionsWithTiles();
HXLINE( 104)		this->doCollidionWithEnemies();
HXLINE( 105)		this->playerJump();
HXLINE( 106)		 ::Player _hx_tmp = this->player;
HXDLIN( 106)		_hx_tmp->spriteAnimated(this->player->get_state());
HXLINE( 107)		this->player->doShot(hx::ObjectPtr<OBJ_>(this));
HXLINE( 108)		this->bulletsMove();
HXLINE( 109)		this->generateEnemies();
HXLINE( 110)		this->moveEnemies();
HXLINE( 111)		this->doCollisionsWithBullet();
HXLINE( 112)		::haxe::Log_obj::trace(((this->enemies->length + HX_(" ",20,00,00,00)) + this->deadEnemies->length),hx::SourceInfo(HX_("Source/Game.hx",98,05,24,39),112,HX_("Game",12,20,38,2f),HX_("update",09,86,05,87)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,update,(void))

bool Game_obj::checkCollisionWithTile( ::openfl::geom::Rectangle playerHitBox, ::openfl::display::Tile tile){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_116_checkCollisionWithTile)
HXLINE( 117)		 ::openfl::geom::Point hitBox =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 118)		 ::Player hitBox1 = this->player;
HXDLIN( 118)		hitBox = hitBox1->localToGlobal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,playerHitBox->x,playerHitBox->y));
HXLINE( 119)		if (hx::IsEq( this->player->get_direction(),::Direction_obj::right_dyn() )) {
HXLINE( 121)			bool _hx_tmp;
HXDLIN( 121)			Float _hx_tmp1 = (hitBox->x + playerHitBox->width);
HXDLIN( 121)			if ((_hx_tmp1 > tile->get_x())) {
HXLINE( 122)				Float hitBox2 = hitBox->x;
HXDLIN( 122)				Float _hx_tmp2 = tile->get_x();
HXLINE( 121)				_hx_tmp = (hitBox2 < (_hx_tmp2 + tile->get_width()));
            			}
            			else {
HXLINE( 121)				_hx_tmp = false;
            			}
HXDLIN( 121)			if (_hx_tmp) {
HXLINE( 124)				bool _hx_tmp3;
HXDLIN( 124)				Float _hx_tmp4 = (hitBox->y + playerHitBox->height);
HXDLIN( 124)				if ((_hx_tmp4 > tile->get_y())) {
HXLINE( 125)					Float hitBox3 = hitBox->y;
HXLINE( 124)					_hx_tmp3 = (hitBox3 < tile->get_y());
            				}
            				else {
HXLINE( 124)					_hx_tmp3 = false;
            				}
HXDLIN( 124)				if (_hx_tmp3) {
HXLINE( 128)					return true;
            				}
            			}
            		}
            		else {
HXLINE( 134)			bool _hx_tmp5;
HXDLIN( 134)			Float hitBox4 = hitBox->x;
HXDLIN( 134)			if ((hitBox4 > tile->get_x())) {
HXLINE( 135)				Float _hx_tmp6 = (hitBox->x - playerHitBox->width);
HXDLIN( 135)				Float _hx_tmp7 = tile->get_x();
HXLINE( 134)				_hx_tmp5 = (_hx_tmp6 < (_hx_tmp7 + tile->get_width()));
            			}
            			else {
HXLINE( 134)				_hx_tmp5 = false;
            			}
HXDLIN( 134)			if (_hx_tmp5) {
HXLINE( 137)				bool _hx_tmp8;
HXDLIN( 137)				Float _hx_tmp9 = (hitBox->y + playerHitBox->height);
HXDLIN( 137)				if ((_hx_tmp9 > tile->get_y())) {
HXLINE( 138)					Float hitBox5 = hitBox->y;
HXLINE( 137)					_hx_tmp8 = (hitBox5 < tile->get_y());
            				}
            				else {
HXLINE( 137)					_hx_tmp8 = false;
            				}
HXDLIN( 137)				if (_hx_tmp8) {
HXLINE( 141)					return true;
            				}
            			}
            		}
HXLINE( 146)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Game_obj,checkCollisionWithTile,return )

void Game_obj::doCollisionsWithTiles(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_149_doCollisionsWithTiles)
HXLINE( 150)		this->haveCollision = false;
HXLINE( 151)		{
HXLINE( 151)			int _g = 0;
HXDLIN( 151)			int _g1 = this->gameLevel->tilemap->get_numTiles();
HXDLIN( 151)			while((_g < _g1)){
HXLINE( 151)				_g = (_g + 1);
HXDLIN( 151)				int i = (_g - 1);
HXLINE( 153)				 ::openfl::geom::Rectangle _hx_tmp = this->player->get_hitBox();
HXDLIN( 153)				if (this->checkCollisionWithTile(_hx_tmp,this->gameLevel->tilemap->getTileAt(i))) {
HXLINE( 155)					 ::Player _hx_tmp1 = this->player;
HXDLIN( 155)					Float _hx_tmp2 = this->gameLevel->tilemap->getTileAt(i)->get_y();
HXDLIN( 155)					_hx_tmp1->set_y(((_hx_tmp2 - (this->player->get_hitBox()->height / ( (Float)(2) ))) + ((Float)2.5)));
HXLINE( 156)					this->player->set_speedY(((Float)0.0));
HXLINE( 157)					this->haveCollision = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionsWithTiles,(void))

void Game_obj::playerJump(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_163_playerJump)
HXLINE( 165)		bool _hx_tmp;
HXDLIN( 165)		if (this->player->get_jump()) {
HXLINE( 165)			_hx_tmp = this->haveCollision;
            		}
            		else {
HXLINE( 165)			_hx_tmp = false;
            		}
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 167)			::haxe::Log_obj::trace(HX_("jump",ee,c4,69,46),hx::SourceInfo(HX_("Source/Game.hx",98,05,24,39),167,HX_("Game",12,20,38,2f),HX_("playerJump",ef,a0,2b,a9)));
HXLINE( 168)			 ::Player _hx_tmp1 = this->player;
HXDLIN( 168)			_hx_tmp1->set_speedY((this->player->get_speedY() - ((Float)15.0)));
            		}
HXLINE( 170)		if (!(this->haveCollision)) {
HXLINE( 171)			this->player->set_state(::State_obj::jump_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,playerJump,(void))

void Game_obj::bulletsMove(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_174_bulletsMove)
HXLINE( 175)		int i = 0;
HXLINE( 176)		while((i < this->bullets->length)){
HXLINE( 178)			this->bullets->__get(i).StaticCast<  ::Bullet >()->move();
HXLINE( 179)			bool _hx_tmp;
HXDLIN( 179)			Float _hx_tmp1 = this->bullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 179)			Float _hx_tmp2 = (_hx_tmp1 - (this->bullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) )));
HXDLIN( 179)			if (!((_hx_tmp2 >= ::Main_obj::sizeWidth))) {
HXLINE( 179)				Float _hx_tmp3 = this->bullets->__get(i).StaticCast<  ::Bullet >()->get_x();
HXDLIN( 179)				_hx_tmp = ((_hx_tmp3 + (this->bullets->__get(i).StaticCast<  ::Bullet >()->get_width() / ( (Float)(2) ))) <= 0);
            			}
            			else {
HXLINE( 179)				_hx_tmp = true;
            			}
HXDLIN( 179)			if (_hx_tmp) {
HXLINE( 181)				this->removeChild(this->bullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 182)				this->spentBullets->push(this->bullets->__get(i).StaticCast<  ::Bullet >());
HXLINE( 183)				this->bullets->remove(this->bullets->__get(i).StaticCast<  ::Bullet >());
            			}
HXLINE( 185)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,bulletsMove,(void))

void Game_obj::generateEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_191_generateEnemies)
HXDLIN( 191)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 191)		Float _hx_tmp;
HXDLIN( 191)		if ((timer > 0)) {
HXDLIN( 191)			_hx_tmp = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXDLIN( 191)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN( 191)		if (((_hx_tmp - this->enemiesTimeFlag) >= this->spawnDelay)) {
HXLINE( 193)			if ((this->enemies->length < this->maxEnemies)) {
HXLINE( 195)				this->generateEnemy();
            			}
HXLINE( 197)			int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 197)			Float _hx_tmp1;
HXDLIN( 197)			if ((timer1 > 0)) {
HXLINE( 197)				_hx_tmp1 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            			}
            			else {
HXLINE( 197)				_hx_tmp1 = ( (Float)(0) );
            			}
HXDLIN( 197)			this->enemiesTimeFlag = _hx_tmp1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,generateEnemies,(void))

void Game_obj::generateEnemy(){
            	HX_GC_STACKFRAME(&_hx_pos_69efd8c9269cf369_202_generateEnemy)
HXLINE( 203)		 ::Enemy enemy;
HXLINE( 204)		if ((this->deadEnemies->length > 0)) {
HXLINE( 206)			enemy = this->deadEnemies->pop().StaticCast<  ::Enemy >();
            		}
            		else {
HXLINE( 210)			enemy =  ::Enemy_obj::__alloc( HX_CTX );
            		}
HXLINE( 212)		enemy->set_y(( (Float)(100) ));
HXLINE( 213)		enemy->set_speedY(((Float)0.0));
HXLINE( 214)		this->enemies->push(enemy);
HXLINE( 215)		this->addChild(this->enemies->__get((this->enemies->length - 1)).StaticCast<  ::Enemy >());
HXLINE( 216)		if ((::Math_obj::random() >= ((Float)0.5))) {
HXLINE( 218)			enemy->set_x(( (Float)(800) ));
            		}
            		else {
HXLINE( 222)			enemy->set_x(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,generateEnemy,(void))

void Game_obj::moveEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_228_moveEnemies)
HXLINE( 229)		int i = 0;
HXLINE( 230)		while((i < this->enemies->length)){
HXLINE( 232)			this->enemies->__get(i).StaticCast<  ::Enemy >()->move(this->player);
HXLINE( 233)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,moveEnemies,(void))

void Game_obj::doCollisionsWithBullet(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_238_doCollisionsWithBullet)
HXLINE( 239)		int b = 0;
HXLINE( 240)		while((b < this->bullets->length)){
HXLINE( 242)			int e = 0;
HXLINE( 243)			while((e < this->enemies->length)){
HXLINE( 245)				if (this->bullets->__get(b).StaticCast<  ::Bullet >()->checkCollisionWithEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 247)					this->removeChild(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 248)					this->spentBullets->push(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 249)					this->bullets->remove(this->bullets->__get(b).StaticCast<  ::Bullet >());
HXLINE( 250)					this->removeChild(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 251)					this->deadEnemies->push(this->enemies->__get(e).StaticCast<  ::Enemy >());
HXLINE( 252)					this->enemies->remove(this->enemies->__get(e).StaticCast<  ::Enemy >());
            				}
HXLINE( 254)				e = (e + 1);
            			}
HXLINE( 256)			b = (b + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollisionsWithBullet,(void))

bool Game_obj::get_gameIsOver(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_262_get_gameIsOver)
HXDLIN( 262)		return this->gameIsOver;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,get_gameIsOver,return )

void Game_obj::doCollidionWithEnemies(){
            	HX_STACKFRAME(&_hx_pos_69efd8c9269cf369_266_doCollidionWithEnemies)
HXLINE( 267)		int e = 0;
HXLINE( 268)		while((e < this->enemies->length)){
HXLINE( 270)			if (this->player->checkCollisionWithEnemy(this->enemies->__get(e).StaticCast<  ::Enemy >())) {
HXLINE( 272)				this->gameIsOver = true;
            			}
HXLINE( 274)			e = (e + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,doCollidionWithEnemies,(void))


hx::ObjectPtr< Game_obj > Game_obj::__new(int width,int height) {
	hx::ObjectPtr< Game_obj > __this = new Game_obj();
	__this->__construct(width,height);
	return __this;
}

hx::ObjectPtr< Game_obj > Game_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height) {
	Game_obj *__this = (Game_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Game_obj), true, "Game"));
	*(void **)__this = Game_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

Game_obj::Game_obj()
{
}

void Game_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Game);
	HX_MARK_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_MARK_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_MARK_MEMBER_NAME(backGround,"backGround");
	HX_MARK_MEMBER_NAME(quitButton,"quitButton");
	HX_MARK_MEMBER_NAME(quitButtonIsPressed,"quitButtonIsPressed");
	HX_MARK_MEMBER_NAME(gameLevel,"gameLevel");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(haveCollision,"haveCollision");
	HX_MARK_MEMBER_NAME(gameIsOver,"gameIsOver");
	HX_MARK_MEMBER_NAME(bullets,"bullets");
	HX_MARK_MEMBER_NAME(spentBullets,"spentBullets");
	HX_MARK_MEMBER_NAME(enemies,"enemies");
	HX_MARK_MEMBER_NAME(deadEnemies,"deadEnemies");
	HX_MARK_MEMBER_NAME(maxEnemies,"maxEnemies");
	HX_MARK_MEMBER_NAME(spawnDelay,"spawnDelay");
	HX_MARK_MEMBER_NAME(enemiesTimeFlag,"enemiesTimeFlag");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Game_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sizeWidth,"sizeWidth");
	HX_VISIT_MEMBER_NAME(sizeHeight,"sizeHeight");
	HX_VISIT_MEMBER_NAME(backGround,"backGround");
	HX_VISIT_MEMBER_NAME(quitButton,"quitButton");
	HX_VISIT_MEMBER_NAME(quitButtonIsPressed,"quitButtonIsPressed");
	HX_VISIT_MEMBER_NAME(gameLevel,"gameLevel");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(haveCollision,"haveCollision");
	HX_VISIT_MEMBER_NAME(gameIsOver,"gameIsOver");
	HX_VISIT_MEMBER_NAME(bullets,"bullets");
	HX_VISIT_MEMBER_NAME(spentBullets,"spentBullets");
	HX_VISIT_MEMBER_NAME(enemies,"enemies");
	HX_VISIT_MEMBER_NAME(deadEnemies,"deadEnemies");
	HX_VISIT_MEMBER_NAME(maxEnemies,"maxEnemies");
	HX_VISIT_MEMBER_NAME(spawnDelay,"spawnDelay");
	HX_VISIT_MEMBER_NAME(enemiesTimeFlag,"enemiesTimeFlag");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bullets") ) { return hx::Val( bullets ); }
		if (HX_FIELD_EQ(inName,"enemies") ) { return hx::Val( enemies ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { return hx::Val( sizeWidth ); }
		if (HX_FIELD_EQ(inName,"gameLevel") ) { return hx::Val( gameLevel ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { return hx::Val( sizeHeight ); }
		if (HX_FIELD_EQ(inName,"backGround") ) { return hx::Val( backGround ); }
		if (HX_FIELD_EQ(inName,"quitButton") ) { return hx::Val( quitButton ); }
		if (HX_FIELD_EQ(inName,"gameIsOver") ) { return hx::Val( inCallProp == hx::paccAlways ? get_gameIsOver() : gameIsOver ); }
		if (HX_FIELD_EQ(inName,"maxEnemies") ) { return hx::Val( maxEnemies ); }
		if (HX_FIELD_EQ(inName,"spawnDelay") ) { return hx::Val( spawnDelay ); }
		if (HX_FIELD_EQ(inName,"playerJump") ) { return hx::Val( playerJump_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"deadEnemies") ) { return hx::Val( deadEnemies ); }
		if (HX_FIELD_EQ(inName,"bulletsMove") ) { return hx::Val( bulletsMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveEnemies") ) { return hx::Val( moveEnemies_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"spentBullets") ) { return hx::Val( spentBullets ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"haveCollision") ) { return hx::Val( haveCollision ); }
		if (HX_FIELD_EQ(inName,"quitButtonOut") ) { return hx::Val( quitButtonOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateEnemy") ) { return hx::Val( generateEnemy_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"quitButtonOver") ) { return hx::Val( quitButtonOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gameIsOver") ) { return hx::Val( get_gameIsOver_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"enemiesTimeFlag") ) { return hx::Val( enemiesTimeFlag ); }
		if (HX_FIELD_EQ(inName,"quitButtonClick") ) { return hx::Val( quitButtonClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateEnemies") ) { return hx::Val( generateEnemies_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quitButtonIsPressed") ) { return hx::Val( quitButtonIsPressed ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"doCollisionsWithTiles") ) { return hx::Val( doCollisionsWithTiles_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"checkCollisionWithTile") ) { return hx::Val( checkCollisionWithTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollisionsWithBullet") ) { return hx::Val( doCollisionsWithBullet_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollidionWithEnemies") ) { return hx::Val( doCollidionWithEnemies_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_quitButtonIsPressed") ) { return hx::Val( get_quitButtonIsPressed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Game_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bullets") ) { bullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemies") ) { enemies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sizeWidth") ) { sizeWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameLevel") ) { gameLevel=inValue.Cast<  ::GameLevel >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sizeHeight") ) { sizeHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backGround") ) { backGround=inValue.Cast<  ::BackGround >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quitButton") ) { quitButton=inValue.Cast<  ::Button >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameIsOver") ) { gameIsOver=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxEnemies") ) { maxEnemies=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnDelay") ) { spawnDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"deadEnemies") ) { deadEnemies=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"spentBullets") ) { spentBullets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"haveCollision") ) { haveCollision=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"enemiesTimeFlag") ) { enemiesTimeFlag=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"quitButtonIsPressed") ) { quitButtonIsPressed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Game_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("sizeWidth",85,29,f9,c8));
	outFields->push(HX_("sizeHeight",88,a3,5a,c7));
	outFields->push(HX_("backGround",0e,08,b2,5a));
	outFields->push(HX_("quitButton",21,5b,13,a5));
	outFields->push(HX_("quitButtonIsPressed",77,e8,7a,c2));
	outFields->push(HX_("gameLevel",32,04,7e,a7));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("haveCollision",ea,c8,af,00));
	outFields->push(HX_("gameIsOver",f0,3f,95,a9));
	outFields->push(HX_("bullets",f1,67,ef,29));
	outFields->push(HX_("spentBullets",23,da,85,4d));
	outFields->push(HX_("enemies",a6,68,0e,d3));
	outFields->push(HX_("deadEnemies",62,1e,d0,19));
	outFields->push(HX_("maxEnemies",62,e2,32,3d));
	outFields->push(HX_("spawnDelay",48,33,3f,11));
	outFields->push(HX_("enemiesTimeFlag",1f,c9,11,2a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Game_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Game_obj,sizeWidth),HX_("sizeWidth",85,29,f9,c8)},
	{hx::fsInt,(int)offsetof(Game_obj,sizeHeight),HX_("sizeHeight",88,a3,5a,c7)},
	{hx::fsObject /*  ::BackGround */ ,(int)offsetof(Game_obj,backGround),HX_("backGround",0e,08,b2,5a)},
	{hx::fsObject /*  ::Button */ ,(int)offsetof(Game_obj,quitButton),HX_("quitButton",21,5b,13,a5)},
	{hx::fsBool,(int)offsetof(Game_obj,quitButtonIsPressed),HX_("quitButtonIsPressed",77,e8,7a,c2)},
	{hx::fsObject /*  ::GameLevel */ ,(int)offsetof(Game_obj,gameLevel),HX_("gameLevel",32,04,7e,a7)},
	{hx::fsObject /*  ::Player */ ,(int)offsetof(Game_obj,player),HX_("player",61,eb,b8,37)},
	{hx::fsBool,(int)offsetof(Game_obj,haveCollision),HX_("haveCollision",ea,c8,af,00)},
	{hx::fsBool,(int)offsetof(Game_obj,gameIsOver),HX_("gameIsOver",f0,3f,95,a9)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,bullets),HX_("bullets",f1,67,ef,29)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,spentBullets),HX_("spentBullets",23,da,85,4d)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,enemies),HX_("enemies",a6,68,0e,d3)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Game_obj,deadEnemies),HX_("deadEnemies",62,1e,d0,19)},
	{hx::fsInt,(int)offsetof(Game_obj,maxEnemies),HX_("maxEnemies",62,e2,32,3d)},
	{hx::fsFloat,(int)offsetof(Game_obj,spawnDelay),HX_("spawnDelay",48,33,3f,11)},
	{hx::fsFloat,(int)offsetof(Game_obj,enemiesTimeFlag),HX_("enemiesTimeFlag",1f,c9,11,2a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Game_obj_sStaticStorageInfo = 0;
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_("sizeWidth",85,29,f9,c8),
	HX_("sizeHeight",88,a3,5a,c7),
	HX_("backGround",0e,08,b2,5a),
	HX_("quitButton",21,5b,13,a5),
	HX_("quitButtonIsPressed",77,e8,7a,c2),
	HX_("gameLevel",32,04,7e,a7),
	HX_("player",61,eb,b8,37),
	HX_("haveCollision",ea,c8,af,00),
	HX_("gameIsOver",f0,3f,95,a9),
	HX_("bullets",f1,67,ef,29),
	HX_("spentBullets",23,da,85,4d),
	HX_("enemies",a6,68,0e,d3),
	HX_("deadEnemies",62,1e,d0,19),
	HX_("maxEnemies",62,e2,32,3d),
	HX_("spawnDelay",48,33,3f,11),
	HX_("enemiesTimeFlag",1f,c9,11,2a),
	HX_("quitButtonClick",67,99,35,9d),
	HX_("quitButtonOver",15,bd,27,d6),
	HX_("quitButtonOut",ed,e7,43,c5),
	HX_("get_quitButtonIsPressed",0e,8f,d0,ca),
	HX_("update",09,86,05,87),
	HX_("checkCollisionWithTile",fe,d4,f4,3d),
	HX_("doCollisionsWithTiles",d3,68,86,03),
	HX_("playerJump",ef,a0,2b,a9),
	HX_("bulletsMove",a2,c3,fa,89),
	HX_("generateEnemies",f1,b1,c8,ae),
	HX_("generateEnemy",d3,e2,f7,16),
	HX_("moveEnemies",95,a1,8a,ab),
	HX_("doCollisionsWithBullet",34,0b,7d,c8),
	HX_("get_gameIsOver",39,c8,8a,1f),
	HX_("doCollidionWithEnemies",ca,d6,2b,8f),
	::String(null()) };

hx::Class Game_obj::__mClass;

void Game_obj::__register()
{
	Game_obj _hx_dummy;
	Game_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Game",12,20,38,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

