// Generated by Haxe 4.0.1
#ifndef INCLUDED_RulesScreen
#define INCLUDED_RulesScreen

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(BackGround)
HX_DECLARE_CLASS0(Button)
HX_DECLARE_CLASS0(RulesScreen)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)



class HXCPP_CLASS_ATTRIBUTES RulesScreen_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef RulesScreen_obj OBJ_;
		RulesScreen_obj();

	public:
		enum { _hx_ClassId = 0x3faa22db };

		void __construct(int width,int height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="RulesScreen")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"RulesScreen"); }
		static hx::ObjectPtr< RulesScreen_obj > __new(int width,int height);
		static hx::ObjectPtr< RulesScreen_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RulesScreen_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RulesScreen",a3,7e,1c,e2); }

		int sizeWidth;
		int sizeHeight;
		 ::Button backButton;
		bool backButtonIsPressed;
		 ::BackGround backGround;
		void backButtonOver( ::openfl::events::MouseEvent e);
		::Dynamic backButtonOver_dyn();

		void backButtonOut( ::openfl::events::MouseEvent e);
		::Dynamic backButtonOut_dyn();

		void backButtonClick( ::openfl::events::MouseEvent e);
		::Dynamic backButtonClick_dyn();

		bool get_backButtonIsPressed();
		::Dynamic get_backButtonIsPressed_dyn();

		void reset();
		::Dynamic reset_dyn();

};


#endif /* INCLUDED_RulesScreen */ 
