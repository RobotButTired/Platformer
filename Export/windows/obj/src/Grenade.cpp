// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bonus
#include <Bonus.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Grenade
#include <Grenade.h>
#endif
#ifndef INCLUDED_GrenadeState
#include <GrenadeState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_93fca785c65d6050_8_new,"Grenade","new",0x2f4ae320,"Grenade.new","Grenade.hx",8,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_29_move,"Grenade","move",0x319a3851,"Grenade.move","Grenade.hx",29,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_56_setGrenade,"Grenade","setGrenade",0x32edd50c,"Grenade.setGrenade","Grenade.hx",56,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_91_doCollisionWithTiles,"Grenade","doCollisionWithTiles",0xe3b50a78,"Grenade.doCollisionWithTiles","Grenade.hx",91,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_110_checkCollisionWithTile,"Grenade","checkCollisionWithTile",0x846c7a3e,"Grenade.checkCollisionWithTile","Grenade.hx",110,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_145_checkCollisionWithEnemy,"Grenade","checkCollisionWithEnemy",0xbac49138,"Grenade.checkCollisionWithEnemy","Grenade.hx",145,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_182_clamp,"Grenade","clamp",0x7149b5bb,"Grenade.clamp","Grenade.hx",182,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_186_get_state,"Grenade","get_state",0xbc5e7528,"Grenade.get_state","Grenade.hx",186,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_190_set_state,"Grenade","set_state",0x9faf6134,"Grenade.set_state","Grenade.hx",190,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_194_get_explosionRadius,"Grenade","get_explosionRadius",0x54add79e,"Grenade.get_explosionRadius","Grenade.hx",194,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_198_set_speedX,"Grenade","set_speedX",0xcec4d26e,"Grenade.set_speedX","Grenade.hx",198,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_202_get_speedX,"Grenade","get_speedX",0xcb4733fa,"Grenade.get_speedX","Grenade.hx",202,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_206_set_speedY,"Grenade","set_speedY",0xcec4d26f,"Grenade.set_speedY","Grenade.hx",206,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_210_get_speedY,"Grenade","get_speedY",0xcb4733fb,"Grenade.get_speedY","Grenade.hx",210,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_214_set_gravity,"Grenade","set_gravity",0xb4cea831,"Grenade.set_gravity","Grenade.hx",214,0x52dde050)
HX_LOCAL_STACK_FRAME(_hx_pos_93fca785c65d6050_218_get_gravity,"Grenade","get_gravity",0xaa61a125,"Grenade.get_gravity","Grenade.hx",218,0x52dde050)

void Grenade_obj::__construct( ::Player player){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_8_new)
HXLINE(  18)		this->explosionCounter = 0;
HXLINE(  17)		this->currentRadius = ((Float)0);
HXLINE(  16)		this->explosionRadius = ((Float)100.0);
HXLINE(  15)		this->explosionTime = ((Float)0.2);
HXLINE(  13)		this->gravity = ((Float)0.8);
HXLINE(  10)		this->radius = ((Float)5.0);
HXLINE(  21)		super::__construct();
HXLINE(  23)		this->setGrenade(player);
HXLINE(  24)		this->state = ::GrenadeState_obj::active_dyn();
            	}

Dynamic Grenade_obj::__CreateEmpty() { return new Grenade_obj; }

void *Grenade_obj::_hx_vtable = 0;

Dynamic Grenade_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Grenade_obj > _hx_result = new Grenade_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Grenade_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3d043b66) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3d043b66;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Grenade_obj::move(){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_29_move)
HXDLIN(  29)		if (hx::IsEq( this->state,::GrenadeState_obj::active_dyn() )) {
HXLINE(  31)			bool _hx_tmp;
HXDLIN(  31)			Float _hx_tmp1 = this->get_x();
HXDLIN(  31)			Float _hx_tmp2 = (_hx_tmp1 - (this->get_width() / ( (Float)(2) )));
HXDLIN(  31)			if (!((_hx_tmp2 >= ::Main_obj::sizeWidth))) {
HXLINE(  31)				Float _hx_tmp3 = this->get_x();
HXDLIN(  31)				_hx_tmp = ((_hx_tmp3 + (this->get_width() / ( (Float)(2) ))) <= 0);
            			}
            			else {
HXLINE(  31)				_hx_tmp = true;
            			}
HXDLIN(  31)			if (_hx_tmp) {
HXLINE(  32)				this->state = ::GrenadeState_obj::inactive_dyn();
            			}
HXLINE(  33)			{
HXLINE(  33)				 ::Grenade _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)				Float _hx_tmp4 = _g->get_x();
HXDLIN(  33)				_g->set_x((_hx_tmp4 + this->speedX));
            			}
HXLINE(  34)			{
HXLINE(  34)				 ::Grenade _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  34)				Float _hx_tmp5 = _g1->get_y();
HXDLIN(  34)				_g1->set_y((_hx_tmp5 + this->speedY));
            			}
HXLINE(  35)			 ::Grenade _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  35)			_hx_tmp6->speedY = (_hx_tmp6->speedY + this->gravity);
            		}
            		else {
HXLINE(  37)			if (hx::IsEq( this->state,::GrenadeState_obj::explosion_dyn() )) {
HXLINE(  39)				Float _hx_tmp7 = this->radius;
HXDLIN(  39)				Float _hx_tmp8 = (this->explosionRadius - this->radius);
HXDLIN(  39)				int _hx_tmp9 = ::Main_obj::get_FPS();
HXDLIN(  39)				this->currentRadius = (_hx_tmp7 + ((_hx_tmp8 / (( (Float)(_hx_tmp9) ) * this->explosionTime)) * ( (Float)(this->explosionCounter) )));
HXLINE(  40)				this->get_graphics()->clear();
HXLINE(  41)				this->get_graphics()->lineStyle(2,255,null(),null(),null(),null(),null(),null());
HXLINE(  42)				this->get_graphics()->drawCircle(( (Float)(0) ),( (Float)(0) ),this->currentRadius);
HXLINE(  43)				this->get_graphics()->endFill();
HXLINE(  44)				++this->explosionCounter;
HXLINE(  45)				int _hx_tmp10 = this->explosionCounter;
HXDLIN(  45)				int _hx_tmp11 = ::Main_obj::get_FPS();
HXDLIN(  45)				if ((_hx_tmp10 > (( (Float)(_hx_tmp11) ) * this->explosionTime))) {
HXLINE(  47)					this->get_graphics()->clear();
HXLINE(  48)					this->state = ::GrenadeState_obj::inactive_dyn();
HXLINE(  49)					this->explosionCounter = 0;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grenade_obj,move,(void))

void Grenade_obj::setGrenade( ::Player player){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_56_setGrenade)
HXLINE(  57)		this->get_graphics()->clear();
HXLINE(  58)		this->get_graphics()->beginFill(255,null());
HXLINE(  59)		this->get_graphics()->drawCircle(( (Float)(0) ),( (Float)(0) ),this->radius);
HXLINE(  60)		this->get_graphics()->endFill();
HXLINE(  61)		if (hx::IsEq( player->get_direction(),::Direction_obj::right_dyn() )) {
HXLINE(  63)			this->set_x((player->get_x() + ((Float)10.0)));
HXLINE(  64)			this->set_y(player->get_y());
HXLINE(  65)			this->speedX = ((Float)6.0);
HXLINE(  66)			this->speedY = ((Float)-15.0);
HXLINE(  67)			this->gravity = ((Float)0.8);
            		}
            		else {
HXLINE(  71)			this->set_x((player->get_x() - ((Float)10.0)));
HXLINE(  72)			this->set_y(player->get_y());
HXLINE(  73)			this->speedX = ((Float)-6.0);
HXLINE(  74)			this->speedY = ((Float)-15.0);
HXLINE(  75)			this->gravity = ((Float)0.8);
            		}
HXLINE(  83)		if (::Bonus_obj::bonusIsUsed) {
HXLINE(  85)			 ::Grenade _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  85)			_hx_tmp->speedX = (_hx_tmp->speedX / ((Float)4.0));
HXLINE(  86)			 ::Grenade _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)			_hx_tmp1->speedY = (_hx_tmp1->speedY / ((Float)4.0));
HXLINE(  87)			 ::Grenade _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  87)			_hx_tmp2->gravity = (_hx_tmp2->gravity / ((Float)16.0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,setGrenade,(void))

void Grenade_obj::doCollisionWithTiles(::Array< ::Dynamic> level){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_91_doCollisionWithTiles)
HXDLIN(  91)		if (hx::IsEq( this->state,::GrenadeState_obj::active_dyn() )) {
HXLINE(  93)			Float tileWidth = (( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(20) ));
HXLINE(  94)			Float tileHeight = (( (Float)(::Main_obj::sizeHeight) ) / ( (Float)(15) ));
HXLINE(  95)			{
HXLINE(  95)				int _g = 0;
HXDLIN(  95)				int _g1 = level->length;
HXDLIN(  95)				while((_g < _g1)){
HXLINE(  95)					_g = (_g + 1);
HXDLIN(  95)					int i = (_g - 1);
HXLINE(  97)					{
HXLINE(  97)						int _g2 = 0;
HXDLIN(  97)						int _g11 = level->__get(i).StaticCast< ::Array< int > >()->length;
HXDLIN(  97)						while((_g2 < _g11)){
HXLINE(  97)							_g2 = (_g2 + 1);
HXDLIN(  97)							int j = (_g2 - 1);
HXLINE(  99)							if (this->checkCollisionWithTile(level->__get(i).StaticCast< ::Array< int > >()->__get(j),(( (Float)(j) ) * tileWidth),(( (Float)(i) ) * tileHeight))) {
HXLINE( 101)								this->state = ::GrenadeState_obj::explosion_dyn();
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,doCollisionWithTiles,(void))

bool Grenade_obj::checkCollisionWithTile(int tileType,Float tileX,Float tileY){
            	HX_GC_STACKFRAME(&_hx_pos_93fca785c65d6050_110_checkCollisionWithTile)
HXDLIN( 110)		bool _hx_tmp;
HXDLIN( 110)		if ((tileType > 0)) {
HXDLIN( 110)			_hx_tmp = (tileType < 5);
            		}
            		else {
HXDLIN( 110)			_hx_tmp = false;
            		}
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 112)			Float tileWidth = (( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(20) ));
HXLINE( 113)			Float tileHeight = (( (Float)(::Main_obj::sizeHeight) ) / ( (Float)(15) ));
HXLINE( 114)			Float center = this->get_x();
HXDLIN( 114)			 ::openfl::geom::Point center1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,center,this->get_y());
HXLINE( 116)			 ::openfl::geom::Point aabb_half_extands =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(tileWidth / ( (Float)(2) )),(tileHeight / ( (Float)(2) )));
HXLINE( 117)			 ::openfl::geom::Point aabb_center =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(tileX + (tileWidth / ( (Float)(2) ))),(tileY + (tileHeight / ( (Float)(2) ))));
HXLINE( 119)			 ::openfl::geom::Point difference =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(center1->x - aabb_center->x),(center1->y - aabb_center->y));
HXLINE( 120)			Float clamped = this->clamp(difference->x,-(aabb_half_extands->x),aabb_half_extands->x);
HXDLIN( 120)			 ::openfl::geom::Point clamped1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,clamped,this->clamp(difference->y,-(aabb_half_extands->y),aabb_half_extands->y));
HXLINE( 122)			 ::openfl::geom::Point closest =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(aabb_center->x + clamped1->x),(aabb_center->y + clamped1->y));
HXLINE( 124)			difference =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(closest->x - center1->x),(closest->y - center1->y));
HXLINE( 125)			 ::openfl::geom::Point zero =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXLINE( 127)			Float dist = ::Math_obj::abs(::openfl::geom::Point_obj::distance(difference,zero));
HXLINE( 129)			if ((dist < this->radius)) {
HXLINE( 131)				return true;
            			}
            			else {
HXLINE( 135)				return false;
            			}
            		}
            		else {
HXLINE( 139)			return false;
            		}
HXLINE( 110)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Grenade_obj,checkCollisionWithTile,return )

bool Grenade_obj::checkCollisionWithEnemy( ::Enemy enemy){
            	HX_GC_STACKFRAME(&_hx_pos_93fca785c65d6050_145_checkCollisionWithEnemy)
HXDLIN( 145)		if (hx::IsNotEq( this->state,::GrenadeState_obj::inactive_dyn() )) {
HXLINE( 147)			Float radius_;
HXLINE( 148)			if (hx::IsEq( this->state,::GrenadeState_obj::active_dyn() )) {
HXLINE( 149)				radius_ = this->radius;
            			}
            			else {
HXLINE( 151)				radius_ = this->currentRadius;
            			}
HXLINE( 152)			Float center = this->get_x();
HXDLIN( 152)			 ::openfl::geom::Point center1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,center,this->get_y());
HXLINE( 154)			Float aabb_half_extands = (enemy->get_hitBox()->width / ( (Float)(2) ));
HXDLIN( 154)			 ::openfl::geom::Point aabb_half_extands1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,aabb_half_extands,(enemy->get_hitBox()->height / ( (Float)(2) )));
HXLINE( 155)			Float aabb_center = enemy->get_x();
HXDLIN( 155)			 ::openfl::geom::Point aabb_center1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,aabb_center,enemy->get_y());
HXLINE( 157)			 ::openfl::geom::Point difference =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(center1->x - aabb_center1->x),(center1->y - aabb_center1->y));
HXLINE( 158)			Float clamped = this->clamp(difference->x,-(aabb_half_extands1->x),aabb_half_extands1->x);
HXDLIN( 158)			 ::openfl::geom::Point clamped1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,clamped,this->clamp(difference->y,-(aabb_half_extands1->y),aabb_half_extands1->y));
HXLINE( 160)			 ::openfl::geom::Point closest =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(aabb_center1->x + clamped1->x),(aabb_center1->y + clamped1->y));
HXLINE( 162)			difference =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(closest->x - center1->x),(closest->y - center1->y));
HXLINE( 163)			 ::openfl::geom::Point zero =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXLINE( 165)			Float dist = ::Math_obj::abs(::openfl::geom::Point_obj::distance(difference,zero));
HXLINE( 166)			if ((dist < radius_)) {
HXLINE( 168)				return true;
            			}
            			else {
HXLINE( 172)				return false;
            			}
            		}
            		else {
HXLINE( 176)			return false;
            		}
HXLINE( 145)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,checkCollisionWithEnemy,return )

Float Grenade_obj::clamp(Float value,Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_182_clamp)
HXDLIN( 182)		return ::Math_obj::max(min,::Math_obj::min(max,value));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Grenade_obj,clamp,return )

 ::GrenadeState Grenade_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_186_get_state)
HXDLIN( 186)		return this->state;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grenade_obj,get_state,return )

void Grenade_obj::set_state( ::GrenadeState value){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_190_set_state)
HXDLIN( 190)		this->state = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,set_state,(void))

Float Grenade_obj::get_explosionRadius(){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_194_get_explosionRadius)
HXDLIN( 194)		return this->explosionRadius;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grenade_obj,get_explosionRadius,return )

void Grenade_obj::set_speedX(Float value){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_198_set_speedX)
HXDLIN( 198)		this->speedX = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,set_speedX,(void))

Float Grenade_obj::get_speedX(){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_202_get_speedX)
HXDLIN( 202)		return this->speedX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grenade_obj,get_speedX,return )

void Grenade_obj::set_speedY(Float value){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_206_set_speedY)
HXDLIN( 206)		this->speedY = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,set_speedY,(void))

Float Grenade_obj::get_speedY(){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_210_get_speedY)
HXDLIN( 210)		return this->speedY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grenade_obj,get_speedY,return )

void Grenade_obj::set_gravity(Float value){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_214_set_gravity)
HXDLIN( 214)		this->gravity = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grenade_obj,set_gravity,(void))

Float Grenade_obj::get_gravity(){
            	HX_STACKFRAME(&_hx_pos_93fca785c65d6050_218_get_gravity)
HXDLIN( 218)		return this->gravity;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Grenade_obj,get_gravity,return )


hx::ObjectPtr< Grenade_obj > Grenade_obj::__new( ::Player player) {
	hx::ObjectPtr< Grenade_obj > __this = new Grenade_obj();
	__this->__construct(player);
	return __this;
}

hx::ObjectPtr< Grenade_obj > Grenade_obj::__alloc(hx::Ctx *_hx_ctx, ::Player player) {
	Grenade_obj *__this = (Grenade_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Grenade_obj), true, "Grenade"));
	*(void **)__this = Grenade_obj::_hx_vtable;
	__this->__construct(player);
	return __this;
}

Grenade_obj::Grenade_obj()
{
}

void Grenade_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Grenade);
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(speedX,"speedX");
	HX_MARK_MEMBER_NAME(speedY,"speedY");
	HX_MARK_MEMBER_NAME(gravity,"gravity");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(explosionTime,"explosionTime");
	HX_MARK_MEMBER_NAME(explosionRadius,"explosionRadius");
	HX_MARK_MEMBER_NAME(currentRadius,"currentRadius");
	HX_MARK_MEMBER_NAME(explosionCounter,"explosionCounter");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Grenade_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(speedX,"speedX");
	HX_VISIT_MEMBER_NAME(speedY,"speedY");
	HX_VISIT_MEMBER_NAME(gravity,"gravity");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(explosionTime,"explosionTime");
	HX_VISIT_MEMBER_NAME(explosionRadius,"explosionRadius");
	HX_VISIT_MEMBER_NAME(currentRadius,"currentRadius");
	HX_VISIT_MEMBER_NAME(explosionCounter,"explosionCounter");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Grenade_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"clamp") ) { return hx::Val( clamp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		if (HX_FIELD_EQ(inName,"speedX") ) { return hx::Val( speedX ); }
		if (HX_FIELD_EQ(inName,"speedY") ) { return hx::Val( speedY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { return hx::Val( gravity ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_state") ) { return hx::Val( set_state_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setGrenade") ) { return hx::Val( setGrenade_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_speedX") ) { return hx::Val( set_speedX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_speedX") ) { return hx::Val( get_speedX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_speedY") ) { return hx::Val( set_speedY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_speedY") ) { return hx::Val( get_speedY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_gravity") ) { return hx::Val( set_gravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gravity") ) { return hx::Val( get_gravity_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"explosionTime") ) { return hx::Val( explosionTime ); }
		if (HX_FIELD_EQ(inName,"currentRadius") ) { return hx::Val( currentRadius ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"explosionRadius") ) { return hx::Val( explosionRadius ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"explosionCounter") ) { return hx::Val( explosionCounter ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_explosionRadius") ) { return hx::Val( get_explosionRadius_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"doCollisionWithTiles") ) { return hx::Val( doCollisionWithTiles_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"checkCollisionWithTile") ) { return hx::Val( checkCollisionWithTile_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"checkCollisionWithEnemy") ) { return hx::Val( checkCollisionWithEnemy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Grenade_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::GrenadeState >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedX") ) { speedX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedY") ) { speedY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gravity") ) { gravity=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"explosionTime") ) { explosionTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentRadius") ) { currentRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"explosionRadius") ) { explosionRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"explosionCounter") ) { explosionCounter=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Grenade_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("speedX",f1,fe,fa,ba));
	outFields->push(HX_("speedY",f2,fe,fa,ba));
	outFields->push(HX_("gravity",4e,6e,ff,77));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("explosionTime",42,ba,90,fd));
	outFields->push(HX_("explosionRadius",c7,75,0a,a1));
	outFields->push(HX_("currentRadius",6b,51,53,94));
	outFields->push(HX_("explosionCounter",e7,cf,76,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Grenade_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Grenade_obj,radius),HX_("radius",52,d0,f6,b0)},
	{hx::fsFloat,(int)offsetof(Grenade_obj,speedX),HX_("speedX",f1,fe,fa,ba)},
	{hx::fsFloat,(int)offsetof(Grenade_obj,speedY),HX_("speedY",f2,fe,fa,ba)},
	{hx::fsFloat,(int)offsetof(Grenade_obj,gravity),HX_("gravity",4e,6e,ff,77)},
	{hx::fsObject /*  ::GrenadeState */ ,(int)offsetof(Grenade_obj,state),HX_("state",11,76,0b,84)},
	{hx::fsFloat,(int)offsetof(Grenade_obj,explosionTime),HX_("explosionTime",42,ba,90,fd)},
	{hx::fsFloat,(int)offsetof(Grenade_obj,explosionRadius),HX_("explosionRadius",c7,75,0a,a1)},
	{hx::fsFloat,(int)offsetof(Grenade_obj,currentRadius),HX_("currentRadius",6b,51,53,94)},
	{hx::fsInt,(int)offsetof(Grenade_obj,explosionCounter),HX_("explosionCounter",e7,cf,76,3e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Grenade_obj_sStaticStorageInfo = 0;
#endif

static ::String Grenade_obj_sMemberFields[] = {
	HX_("radius",52,d0,f6,b0),
	HX_("speedX",f1,fe,fa,ba),
	HX_("speedY",f2,fe,fa,ba),
	HX_("gravity",4e,6e,ff,77),
	HX_("state",11,76,0b,84),
	HX_("explosionTime",42,ba,90,fd),
	HX_("explosionRadius",c7,75,0a,a1),
	HX_("currentRadius",6b,51,53,94),
	HX_("explosionCounter",e7,cf,76,3e),
	HX_("move",11,e3,60,48),
	HX_("setGrenade",cc,0f,29,13),
	HX_("doCollisionWithTiles",38,35,cd,86),
	HX_("checkCollisionWithTile",fe,d4,f4,3d),
	HX_("checkCollisionWithEnemy",78,9e,8b,58),
	HX_("clamp",fb,72,58,48),
	HX_("get_state",68,d2,b4,c7),
	HX_("set_state",74,be,05,ab),
	HX_("get_explosionRadius",de,44,15,2c),
	HX_("set_speedX",2e,0d,00,af),
	HX_("get_speedX",ba,6e,82,ab),
	HX_("set_speedY",2f,0d,00,af),
	HX_("get_speedY",bb,6e,82,ab),
	HX_("set_gravity",71,d5,66,08),
	HX_("get_gravity",65,ce,f9,fd),
	::String(null()) };

hx::Class Grenade_obj::__mClass;

void Grenade_obj::__register()
{
	Grenade_obj _hx_dummy;
	Grenade_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Grenade",2e,13,9b,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Grenade_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Grenade_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Grenade_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Grenade_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

