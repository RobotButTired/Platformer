// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_State
#include <State.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_13_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",13,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_78_spriteAnimated,"Player","spriteAnimated",0x4e3e0615,"Player.spriteAnimated","Player.hx",78,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_98_updateSprite,"Player","updateSprite",0xdeca53fb,"Player.updateSprite","Player.hx",98,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_110_keyDownHandler,"Player","keyDownHandler",0xbd594276,"Player.keyDownHandler","Player.hx",110,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_126_mouseDownHandler,"Player","mouseDownHandler",0xc71e84f0,"Player.mouseDownHandler","Player.hx",126,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_129_keyUpHandler,"Player","keyUpHandler",0x74c73e1d,"Player.keyUpHandler","Player.hx",129,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_145_mouseUpHandler,"Player","mouseUpHandler",0x897d0e17,"Player.mouseUpHandler","Player.hx",145,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_148_move,"Player","move",0x1cb35f1e,"Player.move","Player.hx",148,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_176_doShot,"Player","doShot",0x8749d372,"Player.doShot","Player.hx",176,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_202_checkCollisionWithEnemy,"Player","checkCollisionWithEnemy",0xb252fe8b,"Player.checkCollisionWithEnemy","Player.hx",202,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_213_get_state,"Player","get_state",0x7d84873b,"Player.get_state","Player.hx",213,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_217_get_direction,"Player","get_direction",0xb8ea5069,"Player.get_direction","Player.hx",217,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_222_drawHitBox,"Player","drawHitBox",0xf8c1a469,"Player.drawHitBox","Player.hx",222,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_232_get_directionLeft,"Player","get_directionLeft",0x2bee6d10,"Player.get_directionLeft","Player.hx",232,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_236_get_directionRight,"Player","get_directionRight",0xbbbe0eb3,"Player.get_directionRight","Player.hx",236,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_240_get_jump,"Player","get_jump",0x579a8704,"Player.get_jump","Player.hx",240,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_244_set_state,"Player","set_state",0x60d57347,"Player.set_state","Player.hx",244,0xa27fc9dd)

void Player_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_13_new)
HXLINE(  30)		this->shooting = false;
HXLINE(  29)		this->frameOfFire = ((Float)10);
HXLINE(  26)		this->frameTime = ((Float)0.15);
HXLINE(  22)		this->state = ::State_obj::idle_dyn();
HXLINE(  19)		this->jump = false;
HXLINE(  36)		super::__construct();
HXLINE(  37)		this->idleWidthGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  38)		::Array< ::Dynamic> _hx_tmp = this->idleWidthGun;
HXDLIN(  38)		_hx_tmp->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle_with_gun_0.png",10,6b,ab,d2),null()),null(),null()));
HXLINE(  39)		::Array< ::Dynamic> _hx_tmp1 = this->idleWidthGun;
HXDLIN(  39)		_hx_tmp1->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_1.png",31,2f,d2,69),null()),null(),null()));
HXLINE(  40)		::Array< ::Dynamic> _hx_tmp2 = this->idleWidthGun;
HXDLIN(  40)		_hx_tmp2->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_2.png",b2,c3,38,fd),null()),null(),null()));
HXLINE(  41)		::Array< ::Dynamic> _hx_tmp3 = this->idleWidthGun;
HXDLIN(  41)		_hx_tmp3->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_3.png",33,58,9f,90),null()),null(),null()));
HXLINE(  43)		this->walkWithGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  44)		::Array< ::Dynamic> _hx_tmp4 = this->walkWithGun;
HXDLIN(  44)		_hx_tmp4->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_0.png",5b,e0,17,91),null()),null(),null()));
HXLINE(  45)		::Array< ::Dynamic> _hx_tmp5 = this->walkWithGun;
HXDLIN(  45)		_hx_tmp5->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_1.png",dc,74,7e,24),null()),null(),null()));
HXLINE(  46)		::Array< ::Dynamic> _hx_tmp6 = this->walkWithGun;
HXDLIN(  46)		_hx_tmp6->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_2.png",5d,09,e5,b7),null()),null(),null()));
HXLINE(  47)		::Array< ::Dynamic> _hx_tmp7 = this->walkWithGun;
HXDLIN(  47)		_hx_tmp7->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_3.png",de,9d,4b,4b),null()),null(),null()));
HXLINE(  49)		this->jumpWithGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)		::Array< ::Dynamic> _hx_tmp8 = this->jumpWithGun;
HXDLIN(  50)		_hx_tmp8->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  51)		::Array< ::Dynamic> _hx_tmp9 = this->jumpWithGun;
HXDLIN(  51)		_hx_tmp9->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  52)		::Array< ::Dynamic> _hx_tmp10 = this->jumpWithGun;
HXDLIN(  52)		_hx_tmp10->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  53)		::Array< ::Dynamic> _hx_tmp11 = this->jumpWithGun;
HXDLIN(  53)		_hx_tmp11->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  55)		this->speedX = ((Float)5.0);
HXLINE(  56)		this->speedY = ((Float)0.0);
HXLINE(  57)		this->hitBox =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-10.),((Float)-17.5),20,30);
HXLINE(  61)		this->addChild(this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >());
HXLINE(  62)		this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(-15) ));
HXLINE(  63)		this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(-40) ));
HXLINE(  64)		 ::Dynamic _hx_tmp12 = ::haxe::Log_obj::trace;
HXDLIN(  64)		::String _hx_tmp13 = (this->get_width() + HX_(" ",20,00,00,00));
HXDLIN(  64)		::String _hx_tmp14 = (_hx_tmp13 + this->get_height());
HXDLIN(  64)		_hx_tmp12(_hx_tmp14,hx::SourceInfo(HX_("Source/Player.hx",89,18,9a,6b),64,HX_("Player",81,5f,4d,6c),HX_("new",60,d0,53,00)));
HXLINE(  65)		this->drawHitBox();
HXLINE(  67)		this->ind = 0;
HXLINE(  68)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  68)		Float _hx_tmp15;
HXDLIN(  68)		if ((timer > 0)) {
HXLINE(  68)			_hx_tmp15 = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  68)			_hx_tmp15 = ( (Float)(0) );
            		}
HXDLIN(  68)		this->timeFlag = _hx_tmp15;
HXLINE(  70)		int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  70)		Float _hx_tmp16;
HXDLIN(  70)		if ((timer1 > 0)) {
HXLINE(  70)			_hx_tmp16 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  70)			_hx_tmp16 = ( (Float)(0) );
            		}
HXDLIN(  70)		this->shootingTime = _hx_tmp16;
HXLINE(  72)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->keyDownHandler_dyn(),null(),null(),null());
HXLINE(  73)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->mouseDownHandler_dyn(),null(),null(),null());
HXLINE(  74)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->keyUpHandler_dyn(),null(),null(),null());
HXLINE(  75)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->mouseUpHandler_dyn(),null(),null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x3882f6a4 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x6c4d5f81;
		}
	}
}

void Player_obj::spriteAnimated( ::State state){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_78_spriteAnimated)
HXLINE(  79)		::Array< ::Dynamic> spriteSheet;
HXLINE(  80)		switch((int)(state->_hx_getIndex())){
            			case (int)0: {
HXLINE(  83)				spriteSheet = this->idleWidthGun;
            			}
            			break;
            			case (int)1: {
HXLINE(  85)				spriteSheet = this->walkWithGun;
            			}
            			break;
            			case (int)2: {
HXLINE(  87)				spriteSheet = this->jumpWithGun;
            			}
            			break;
            		}
HXLINE(  89)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  89)		Float _hx_tmp;
HXDLIN(  89)		if ((timer > 0)) {
HXLINE(  89)			_hx_tmp = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  89)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN(  89)		if (((_hx_tmp - this->timeFlag) >= this->frameTime)) {
HXLINE(  92)			this->updateSprite(spriteSheet);
HXLINE(  93)			int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  93)			Float _hx_tmp1;
HXDLIN(  93)			if ((timer1 > 0)) {
HXLINE(  93)				_hx_tmp1 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            			}
            			else {
HXLINE(  93)				_hx_tmp1 = ( (Float)(0) );
            			}
HXDLIN(  93)			this->timeFlag = _hx_tmp1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,spriteAnimated,(void))

void Player_obj::updateSprite(::Array< ::Dynamic> spriteSheet){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_98_updateSprite)
HXLINE(  99)		this->removeChildren(null(),null());
HXLINE( 100)		if ((this->ind == spriteSheet->length)) {
HXLINE( 101)			this->ind = 0;
            		}
HXLINE( 102)		this->addChild(spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >());
HXLINE( 103)		spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(-15) ));
HXLINE( 104)		spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(-40) ));
HXLINE( 106)		this->ind++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,updateSprite,(void))

void Player_obj::keyDownHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_110_keyDownHandler)
HXLINE( 111)		bool _hx_tmp;
HXDLIN( 111)		if ((e->keyCode != 37)) {
HXLINE( 111)			_hx_tmp = (e->keyCode == 65);
            		}
            		else {
HXLINE( 111)			_hx_tmp = true;
            		}
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 113)			this->movingLeft = true;
            		}
HXLINE( 115)		bool _hx_tmp1;
HXDLIN( 115)		if ((e->keyCode != 39)) {
HXLINE( 115)			_hx_tmp1 = (e->keyCode == 68);
            		}
            		else {
HXLINE( 115)			_hx_tmp1 = true;
            		}
HXDLIN( 115)		if (_hx_tmp1) {
HXLINE( 117)			this->movingRight = true;
            		}
HXLINE( 119)		bool _hx_tmp2;
HXDLIN( 119)		if ((e->keyCode != 38)) {
HXLINE( 119)			_hx_tmp2 = (e->keyCode == 87);
            		}
            		else {
HXLINE( 119)			_hx_tmp2 = true;
            		}
HXDLIN( 119)		if (_hx_tmp2) {
HXLINE( 120)			this->jump = true;
            		}
HXLINE( 121)		if ((e->keyCode == 32)) {
HXLINE( 122)			this->shooting = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,keyDownHandler,(void))

void Player_obj::mouseDownHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_126_mouseDownHandler)
HXDLIN( 126)		this->shooting = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,mouseDownHandler,(void))

void Player_obj::keyUpHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_129_keyUpHandler)
HXLINE( 130)		bool _hx_tmp;
HXDLIN( 130)		if ((e->keyCode != 37)) {
HXLINE( 130)			_hx_tmp = (e->keyCode == 65);
            		}
            		else {
HXLINE( 130)			_hx_tmp = true;
            		}
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 132)			this->movingLeft = false;
            		}
HXLINE( 134)		bool _hx_tmp1;
HXDLIN( 134)		if ((e->keyCode != 39)) {
HXLINE( 134)			_hx_tmp1 = (e->keyCode == 68);
            		}
            		else {
HXLINE( 134)			_hx_tmp1 = true;
            		}
HXDLIN( 134)		if (_hx_tmp1) {
HXLINE( 136)			this->movingRight = false;
            		}
HXLINE( 138)		bool _hx_tmp2;
HXDLIN( 138)		if ((e->keyCode != 38)) {
HXLINE( 138)			_hx_tmp2 = (e->keyCode == 87);
            		}
            		else {
HXLINE( 138)			_hx_tmp2 = true;
            		}
HXDLIN( 138)		if (_hx_tmp2) {
HXLINE( 139)			this->jump = false;
            		}
HXLINE( 140)		if ((e->keyCode == 32)) {
HXLINE( 141)			this->shooting = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,keyUpHandler,(void))

void Player_obj::mouseUpHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_145_mouseUpHandler)
HXDLIN( 145)		this->shooting = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,mouseUpHandler,(void))

void Player_obj::move(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_148_move)
HXLINE( 149)		if (this->movingLeft) {
HXLINE( 151)			Float _hx_tmp = this->get_x();
HXDLIN( 151)			if (((_hx_tmp - (this->get_hitBox()->width / ( (Float)(2) ))) >= 0)) {
HXLINE( 152)				 ::Player _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 152)				Float _hx_tmp1 = _g->get_x();
HXDLIN( 152)				_g->set_x((_hx_tmp1 - this->speedX));
            			}
HXLINE( 153)			this->state = ::State_obj::walk_dyn();
HXLINE( 154)			this->set_scaleX(((Float)-1.0));
HXLINE( 155)			this->direction = ::Direction_obj::left_dyn();
            		}
HXLINE( 157)		if (this->movingRight) {
HXLINE( 159)			Float _hx_tmp2 = this->get_x();
HXDLIN( 159)			Float _hx_tmp3 = (_hx_tmp2 + (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 159)			if ((_hx_tmp3 <= ::Main_obj::sizeWidth)) {
HXLINE( 160)				 ::Player _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)				Float _hx_tmp4 = _g1->get_x();
HXDLIN( 160)				_g1->set_x((_hx_tmp4 + this->speedX));
            			}
HXLINE( 161)			this->state = ::State_obj::walk_dyn();
HXLINE( 162)			this->set_scaleX(((Float)1.0));
HXLINE( 163)			this->direction = ::Direction_obj::right_dyn();
            		}
HXLINE( 165)		bool _hx_tmp5;
HXDLIN( 165)		if (this->movingLeft) {
HXLINE( 165)			_hx_tmp5 = this->movingRight;
            		}
            		else {
HXLINE( 165)			_hx_tmp5 = false;
            		}
HXDLIN( 165)		if (_hx_tmp5) {
HXLINE( 166)			this->state = ::State_obj::idle_dyn();
            		}
HXLINE( 167)		bool _hx_tmp6;
HXDLIN( 167)		if (!(this->movingLeft)) {
HXLINE( 167)			_hx_tmp6 = !(this->movingRight);
            		}
            		else {
HXLINE( 167)			_hx_tmp6 = false;
            		}
HXDLIN( 167)		if (_hx_tmp6) {
HXLINE( 168)			this->state = ::State_obj::idle_dyn();
            		}
HXLINE( 169)		 ::Player _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 169)		_hx_tmp7->speedY = (_hx_tmp7->speedY + this->gravity);
HXLINE( 170)		{
HXLINE( 170)			 ::Player _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 170)			Float _hx_tmp8 = _g2->get_y();
HXDLIN( 170)			_g2->set_y((_hx_tmp8 + this->speedY));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,move,(void))

void Player_obj::doShot( ::Game game){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_176_doShot)
HXDLIN( 176)		bool _hx_tmp;
HXDLIN( 176)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 176)		Float _hx_tmp1;
HXDLIN( 176)		if ((timer > 0)) {
HXDLIN( 176)			_hx_tmp1 = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXDLIN( 176)			_hx_tmp1 = ( (Float)(0) );
            		}
HXDLIN( 176)		if (((_hx_tmp1 - this->shootingTime) >= (( (Float)(1) ) / this->frameOfFire))) {
HXDLIN( 176)			_hx_tmp = this->shooting;
            		}
            		else {
HXDLIN( 176)			_hx_tmp = false;
            		}
HXDLIN( 176)		if (_hx_tmp) {
HXLINE( 178)			 ::Bullet bullet;
HXLINE( 179)			if ((game->spentBullets->length > 0)) {
HXLINE( 181)				::haxe::Log_obj::trace(999999,hx::SourceInfo(HX_("Source/Player.hx",89,18,9a,6b),181,HX_("Player",81,5f,4d,6c),HX_("doShot",25,7a,56,1c)));
HXLINE( 182)				::Array< ::Dynamic> game1 = game->bullets;
HXDLIN( 182)				game1->push(game->spentBullets->pop().StaticCast<  ::Bullet >());
HXLINE( 183)				game->bullets->__get((game->bullets->length - 1)).StaticCast<  ::Bullet >()->setBullet(hx::ObjectPtr<OBJ_>(this));
HXLINE( 185)				game->addChild(game->bullets->__get((game->bullets->length - 1)).StaticCast<  ::Bullet >());
HXLINE( 186)				int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 186)				Float _hx_tmp2;
HXDLIN( 186)				if ((timer1 > 0)) {
HXLINE( 186)					_hx_tmp2 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            				}
            				else {
HXLINE( 186)					_hx_tmp2 = ( (Float)(0) );
            				}
HXDLIN( 186)				this->shootingTime = _hx_tmp2;
            			}
            			else {
HXLINE( 190)				bullet =  ::Bullet_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 191)				game->bullets->push(bullet);
HXLINE( 192)				game->addChild(bullet);
HXLINE( 193)				::haxe::Log_obj::trace(HX_("Shot",1a,01,2c,37),hx::SourceInfo(HX_("Source/Player.hx",89,18,9a,6b),193,HX_("Player",81,5f,4d,6c),HX_("doShot",25,7a,56,1c)));
HXLINE( 194)				int timer2 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 194)				Float _hx_tmp3;
HXDLIN( 194)				if ((timer2 > 0)) {
HXLINE( 194)					_hx_tmp3 = (( (Float)(timer2) ) / ( (Float)(1000) ));
            				}
            				else {
HXLINE( 194)					_hx_tmp3 = ( (Float)(0) );
            				}
HXDLIN( 194)				this->shootingTime = _hx_tmp3;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doShot,(void))

bool Player_obj::checkCollisionWithEnemy( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_202_checkCollisionWithEnemy)
HXDLIN( 202)		bool _hx_tmp;
HXDLIN( 202)		bool _hx_tmp1;
HXDLIN( 202)		bool _hx_tmp2;
HXDLIN( 202)		Float _hx_tmp3 = this->get_x();
HXDLIN( 202)		Float _hx_tmp4 = (_hx_tmp3 + (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 202)		Float _hx_tmp5 = enemy->get_x();
HXDLIN( 202)		if ((_hx_tmp4 > (_hx_tmp5 - (enemy->get_hitBox()->width / ( (Float)(2) ))))) {
HXDLIN( 202)			Float _hx_tmp6 = this->get_x();
HXDLIN( 202)			Float _hx_tmp7 = (_hx_tmp6 - (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 202)			Float _hx_tmp8 = enemy->get_x();
HXDLIN( 202)			_hx_tmp2 = (_hx_tmp7 < (_hx_tmp8 + (enemy->get_hitBox()->width / ( (Float)(2) ))));
            		}
            		else {
HXDLIN( 202)			_hx_tmp2 = false;
            		}
HXDLIN( 202)		if (_hx_tmp2) {
HXLINE( 203)			Float _hx_tmp9 = this->get_y();
HXDLIN( 203)			Float _hx_tmp10 = (_hx_tmp9 + (this->get_hitBox()->height / ( (Float)(2) )));
HXDLIN( 203)			Float _hx_tmp11 = enemy->get_y();
HXLINE( 202)			_hx_tmp1 = (_hx_tmp10 > (_hx_tmp11 - (enemy->get_hitBox()->height / ( (Float)(2) ))));
            		}
            		else {
HXDLIN( 202)			_hx_tmp1 = false;
            		}
HXDLIN( 202)		if (_hx_tmp1) {
HXLINE( 203)			Float _hx_tmp12 = this->get_y();
HXDLIN( 203)			Float _hx_tmp13 = (_hx_tmp12 - (this->get_hitBox()->height / ( (Float)(2) )));
HXDLIN( 203)			Float _hx_tmp14 = enemy->get_y();
HXLINE( 202)			_hx_tmp = (_hx_tmp13 < (_hx_tmp14 + (enemy->get_hitBox()->height / ( (Float)(2) ))));
            		}
            		else {
HXDLIN( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 205)			return true;
            		}
            		else {
HXLINE( 208)			return false;
            		}
HXLINE( 202)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,checkCollisionWithEnemy,return )

 ::State Player_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_213_get_state)
HXDLIN( 213)		return this->state;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_state,return )

 ::Direction Player_obj::get_direction(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_217_get_direction)
HXDLIN( 217)		return this->direction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_direction,return )

void Player_obj::drawHitBox(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_222_drawHitBox)
HXLINE( 223)		this->get_graphics()->lineStyle(1,16711680,null(),null(),null(),null(),null(),null());
HXLINE( 224)		 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN( 224)		Float _hx_tmp1 = (-(this->get_hitBox()->width) / ( (Float)(2) ));
HXDLIN( 224)		Float _hx_tmp2 = (-(this->get_hitBox()->height) / ( (Float)(2) ));
HXDLIN( 224)		Float _hx_tmp3 = this->get_hitBox()->width;
HXDLIN( 224)		_hx_tmp->drawRect(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_hitBox()->height);
HXLINE( 225)		this->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,drawHitBox,(void))

bool Player_obj::get_directionLeft(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_232_get_directionLeft)
HXDLIN( 232)		return this->movingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_directionLeft,return )

bool Player_obj::get_directionRight(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_236_get_directionRight)
HXDLIN( 236)		return this->movingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_directionRight,return )

bool Player_obj::get_jump(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_240_get_jump)
HXDLIN( 240)		return this->jump;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_jump,return )

void Player_obj::set_state( ::State value){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_244_set_state)
HXDLIN( 244)		this->state = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_state,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(idleWidthGun,"idleWidthGun");
	HX_MARK_MEMBER_NAME(walkWithGun,"walkWithGun");
	HX_MARK_MEMBER_NAME(jumpWithGun,"jumpWithGun");
	HX_MARK_MEMBER_NAME(jump,"jump");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(timeFlag,"timeFlag");
	HX_MARK_MEMBER_NAME(frameTime,"frameTime");
	HX_MARK_MEMBER_NAME(ind,"ind");
	HX_MARK_MEMBER_NAME(frameOfFire,"frameOfFire");
	HX_MARK_MEMBER_NAME(shooting,"shooting");
	HX_MARK_MEMBER_NAME(shootingTime,"shootingTime");
	 ::Unit_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(idleWidthGun,"idleWidthGun");
	HX_VISIT_MEMBER_NAME(walkWithGun,"walkWithGun");
	HX_VISIT_MEMBER_NAME(jumpWithGun,"jumpWithGun");
	HX_VISIT_MEMBER_NAME(jump,"jump");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(timeFlag,"timeFlag");
	HX_VISIT_MEMBER_NAME(frameTime,"frameTime");
	HX_VISIT_MEMBER_NAME(ind,"ind");
	HX_VISIT_MEMBER_NAME(frameOfFire,"frameOfFire");
	HX_VISIT_MEMBER_NAME(shooting,"shooting");
	HX_VISIT_MEMBER_NAME(shootingTime,"shootingTime");
	 ::Unit_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ind") ) { return hx::Val( ind ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jump") ) { return hx::Val( jump ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"doShot") ) { return hx::Val( doShot_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeFlag") ) { return hx::Val( timeFlag ); }
		if (HX_FIELD_EQ(inName,"shooting") ) { return hx::Val( shooting ); }
		if (HX_FIELD_EQ(inName,"get_jump") ) { return hx::Val( get_jump_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { return hx::Val( frameTime ); }
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_state") ) { return hx::Val( set_state_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawHitBox") ) { return hx::Val( drawHitBox_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"walkWithGun") ) { return hx::Val( walkWithGun ); }
		if (HX_FIELD_EQ(inName,"jumpWithGun") ) { return hx::Val( jumpWithGun ); }
		if (HX_FIELD_EQ(inName,"frameOfFire") ) { return hx::Val( frameOfFire ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"idleWidthGun") ) { return hx::Val( idleWidthGun ); }
		if (HX_FIELD_EQ(inName,"shootingTime") ) { return hx::Val( shootingTime ); }
		if (HX_FIELD_EQ(inName,"updateSprite") ) { return hx::Val( updateSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyUpHandler") ) { return hx::Val( keyUpHandler_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_direction") ) { return hx::Val( get_direction_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"spriteAnimated") ) { return hx::Val( spriteAnimated_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyDownHandler") ) { return hx::Val( keyDownHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseUpHandler") ) { return hx::Val( mouseUpHandler_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mouseDownHandler") ) { return hx::Val( mouseDownHandler_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_directionLeft") ) { return hx::Val( get_directionLeft_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_directionRight") ) { return hx::Val( get_directionRight_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"checkCollisionWithEnemy") ) { return hx::Val( checkCollisionWithEnemy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ind") ) { ind=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jump") ) { jump=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::State >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeFlag") ) { timeFlag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shooting") ) { shooting=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { frameTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"walkWithGun") ) { walkWithGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jumpWithGun") ) { jumpWithGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameOfFire") ) { frameOfFire=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"idleWidthGun") ) { idleWidthGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shootingTime") ) { shootingTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("idleWidthGun",4e,2f,a1,30));
	outFields->push(HX_("walkWithGun",11,46,3d,d6));
	outFields->push(HX_("jumpWithGun",cc,d4,b0,41));
	outFields->push(HX_("jump",ee,c4,69,46));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("timeFlag",59,8e,1f,e4));
	outFields->push(HX_("frameTime",da,8a,7d,3a));
	outFields->push(HX_("ind",df,0c,50,00));
	outFields->push(HX_("frameOfFire",7a,04,59,29));
	outFields->push(HX_("shooting",63,c0,75,2e));
	outFields->push(HX_("shootingTime",10,26,d7,34));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,idleWidthGun),HX_("idleWidthGun",4e,2f,a1,30)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,walkWithGun),HX_("walkWithGun",11,46,3d,d6)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,jumpWithGun),HX_("jumpWithGun",cc,d4,b0,41)},
	{hx::fsBool,(int)offsetof(Player_obj,jump),HX_("jump",ee,c4,69,46)},
	{hx::fsObject /*  ::State */ ,(int)offsetof(Player_obj,state),HX_("state",11,76,0b,84)},
	{hx::fsFloat,(int)offsetof(Player_obj,timeFlag),HX_("timeFlag",59,8e,1f,e4)},
	{hx::fsFloat,(int)offsetof(Player_obj,frameTime),HX_("frameTime",da,8a,7d,3a)},
	{hx::fsInt,(int)offsetof(Player_obj,ind),HX_("ind",df,0c,50,00)},
	{hx::fsFloat,(int)offsetof(Player_obj,frameOfFire),HX_("frameOfFire",7a,04,59,29)},
	{hx::fsBool,(int)offsetof(Player_obj,shooting),HX_("shooting",63,c0,75,2e)},
	{hx::fsFloat,(int)offsetof(Player_obj,shootingTime),HX_("shootingTime",10,26,d7,34)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("idleWidthGun",4e,2f,a1,30),
	HX_("walkWithGun",11,46,3d,d6),
	HX_("jumpWithGun",cc,d4,b0,41),
	HX_("jump",ee,c4,69,46),
	HX_("state",11,76,0b,84),
	HX_("timeFlag",59,8e,1f,e4),
	HX_("frameTime",da,8a,7d,3a),
	HX_("ind",df,0c,50,00),
	HX_("frameOfFire",7a,04,59,29),
	HX_("shooting",63,c0,75,2e),
	HX_("shootingTime",10,26,d7,34),
	HX_("spriteAnimated",c8,17,2d,d8),
	HX_("updateSprite",ee,82,59,c3),
	HX_("keyDownHandler",29,54,48,47),
	HX_("mouseDownHandler",63,a9,3b,f8),
	HX_("keyUpHandler",10,6d,56,59),
	HX_("mouseUpHandler",ca,1f,6c,13),
	HX_("move",11,e3,60,48),
	HX_("doShot",25,7a,56,1c),
	HX_("checkCollisionWithEnemy",78,9e,8b,58),
	HX_("get_state",68,d2,b4,c7),
	HX_("get_direction",16,36,a4,d1),
	HX_("drawHitBox",9c,20,d3,98),
	HX_("get_directionLeft",3d,2d,51,f4),
	HX_("get_directionRight",e6,75,c3,49),
	HX_("get_jump",77,80,24,c6),
	HX_("set_state",74,be,05,ab),
	::String(null()) };

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

