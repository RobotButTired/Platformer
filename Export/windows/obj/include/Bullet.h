// Generated by Haxe 4.0.1
#ifndef INCLUDED_Bullet
#define INCLUDED_Bullet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Bullet)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES Bullet_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Bullet_obj OBJ_;
		Bullet_obj();

	public:
		enum { _hx_ClassId = 0x09250662 };

		void __construct( ::Unit unit, ::Dynamic color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Bullet")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Bullet"); }
		static hx::ObjectPtr< Bullet_obj > __new( ::Unit unit, ::Dynamic color);
		static hx::ObjectPtr< Bullet_obj > __alloc(hx::Ctx *_hx_ctx, ::Unit unit, ::Dynamic color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bullet_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bullet",62,06,25,09); }

		Float speed;
		void move();
		::Dynamic move_dyn();

		void setBullet( ::Unit unit);
		::Dynamic setBullet_dyn();

		bool checkCollisionWithUnit( ::Unit unit);
		::Dynamic checkCollisionWithUnit_dyn();

		Float get_speed();
		::Dynamic get_speed_dyn();

		void set_speed(Float value);
		::Dynamic set_speed_dyn();

};


#endif /* INCLUDED_Bullet */ 
