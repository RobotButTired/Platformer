// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bird
#include <Bird.h>
#endif
#ifndef INCLUDED_Bonus
#include <Bonus.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84783e77c9d3ad7d_6_new,"Bird","new",0x14cbe6cb,"Bird.new","Bird.hx",6,0x99ec3b05)
HX_LOCAL_STACK_FRAME(_hx_pos_84783e77c9d3ad7d_31_move,"Bird","move",0x1cfc6a46,"Bird.move","Bird.hx",31,0x99ec3b05)

void Bird_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_84783e77c9d3ad7d_6_new)
HXLINE(  10)		this->speedMax = 240;
HXLINE(   9)		this->rate = 120;
HXLINE(  13)		super::__construct();
HXLINE(  14)		this->TV =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  15)		this->color = 16776960;
HXLINE(  18)		this->gravity = ((Float)0.0);
HXLINE(  20)		this->hitBox =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-10.),((Float)-10.),20,20);
HXLINE(  21)		this->drawHitBox();
            	}

Dynamic Bird_obj::__CreateEmpty() { return new Bird_obj; }

void *Bird_obj::_hx_vtable = 0;

Dynamic Bird_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bird_obj > _hx_result = new Bird_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Bird_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x03a88228) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3882f6a4) {
			if (inClassId<=(int)0x2bf02559) {
				return inClassId==(int)0x1b123bf8 || inClassId==(int)0x2bf02559;
			} else {
				return inClassId==(int)0x3882f6a4;
			}
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Bird_obj::move( ::Player player,::Array< ::Dynamic> level){
            	HX_GC_STACKFRAME(&_hx_pos_84783e77c9d3ad7d_31_move)
HXLINE(  32)		Float _hx_tmp = player->get_x();
HXDLIN(  32)		Float _hx_tmp1 = this->get_x();
HXDLIN(  32)		this->TV->x = (_hx_tmp - _hx_tmp1);
HXLINE(  33)		Float _hx_tmp2 = player->get_y();
HXDLIN(  33)		Float _hx_tmp3 = this->get_y();
HXDLIN(  33)		this->TV->y = (_hx_tmp2 - _hx_tmp3);
HXLINE(  34)		Float distance = player->get_x();
HXDLIN(  34)		 ::openfl::geom::Point distance1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,distance,player->get_y());
HXDLIN(  34)		Float distance2 = this->get_x();
HXDLIN(  34)		Float distance3 = ::Math_obj::abs(::openfl::geom::Point_obj::distance(distance1, ::openfl::geom::Point_obj::__alloc( HX_CTX ,distance2,this->get_y())));
HXLINE(  35)		 ::openfl::geom::Point TV_norm =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  36)		TV_norm->x = (this->TV->x / distance3);
HXLINE(  37)		TV_norm->y = (this->TV->y / distance3);
HXLINE(  39)		this->speedX = ((( (Float)(this->rate) ) * TV_norm->x) * ::Main_obj::timePerFrame);
HXLINE(  40)		this->speedY = ((( (Float)(this->rate) ) * TV_norm->y) * ::Main_obj::timePerFrame);
HXLINE(  42)		if (::Bonus_obj::bonusIsUsed) {
HXLINE(  44)			 ::Bird _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)			_hx_tmp4->speedX = (_hx_tmp4->speedX * ((Float)0.25));
HXLINE(  45)			 ::Bird _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  45)			_hx_tmp5->speedY = (_hx_tmp5->speedY * ((Float)0.25));
            		}
HXLINE(  48)		if ((::Math_obj::sqrt(((this->speedX * this->speedX) + (this->speedY * this->speedY))) > this->speedMax)) {
HXLINE(  50)			 ::Bird _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)			_hx_tmp6->speedX = (_hx_tmp6->speedX * ((Float)0.75));
HXLINE(  51)			 ::Bird _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  51)			_hx_tmp7->speedY = (_hx_tmp7->speedY * ((Float)0.75));
            		}
HXLINE(  53)		{
HXLINE(  53)			 ::Bird _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  53)			Float _hx_tmp8 = _g->get_x();
HXDLIN(  53)			_g->set_x((_hx_tmp8 + this->speedX));
            		}
HXLINE(  54)		{
HXLINE(  54)			 ::Bird _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  54)			Float _hx_tmp9 = _g1->get_y();
HXDLIN(  54)			_g1->set_y((_hx_tmp9 + this->speedY));
            		}
            	}



hx::ObjectPtr< Bird_obj > Bird_obj::__new() {
	hx::ObjectPtr< Bird_obj > __this = new Bird_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Bird_obj > Bird_obj::__alloc(hx::Ctx *_hx_ctx) {
	Bird_obj *__this = (Bird_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bird_obj), true, "Bird"));
	*(void **)__this = Bird_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Bird_obj::Bird_obj()
{
}

void Bird_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bird);
	HX_MARK_MEMBER_NAME(TV,"TV");
	HX_MARK_MEMBER_NAME(rate,"rate");
	HX_MARK_MEMBER_NAME(speedMax,"speedMax");
	 ::Unit_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bird_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(TV,"TV");
	HX_VISIT_MEMBER_NAME(rate,"rate");
	HX_VISIT_MEMBER_NAME(speedMax,"speedMax");
	 ::Unit_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Bird_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"TV") ) { return hx::Val( TV ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { return hx::Val( rate ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"speedMax") ) { return hx::Val( speedMax ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Bird_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"TV") ) { TV=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rate") ) { rate=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"speedMax") ) { speedMax=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bird_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("TV",82,49,00,00));
	outFields->push(HX_("rate",e0,52,a4,4b));
	outFields->push(HX_("speedMax",5d,59,e5,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Bird_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(Bird_obj,TV),HX_("TV",82,49,00,00)},
	{hx::fsInt,(int)offsetof(Bird_obj,rate),HX_("rate",e0,52,a4,4b)},
	{hx::fsInt,(int)offsetof(Bird_obj,speedMax),HX_("speedMax",5d,59,e5,ae)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Bird_obj_sStaticStorageInfo = 0;
#endif

static ::String Bird_obj_sMemberFields[] = {
	HX_("TV",82,49,00,00),
	HX_("rate",e0,52,a4,4b),
	HX_("speedMax",5d,59,e5,ae),
	HX_("move",11,e3,60,48),
	::String(null()) };

hx::Class Bird_obj::__mClass;

void Bird_obj::__register()
{
	Bird_obj _hx_dummy;
	Bird_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Bird",59,25,f0,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bird_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bird_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bird_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bird_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

