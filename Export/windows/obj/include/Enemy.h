// Generated by Haxe 4.0.1
#ifndef INCLUDED_Enemy
#define INCLUDED_Enemy

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES Enemy_obj : public  ::Unit_obj
{
	public:
		typedef  ::Unit_obj super;
		typedef Enemy_obj OBJ_;
		Enemy_obj();

	public:
		enum { _hx_ClassId = 0x03a88228 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Enemy")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Enemy"); }
		static hx::ObjectPtr< Enemy_obj > __new();
		static hx::ObjectPtr< Enemy_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Enemy_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Enemy",28,82,a8,03); }

		void drawHitBox();
		::Dynamic drawHitBox_dyn();

		void move( ::Player player,::Array< ::Dynamic> level);
		::Dynamic move_dyn();

};


#endif /* INCLUDED_Enemy */ 
