// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text__internal_GlyphPosition
#include <openfl/text/_internal/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextEngine
#include <openfl/text/_internal/TextEngine.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextFormatRange
#include <openfl/text/_internal/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayout
#include <openfl/text/_internal/TextLayout.h>
#endif
#ifndef INCLUDED_openfl_text__internal_TextLayoutGroup
#include <openfl/text/_internal/TextLayoutGroup.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81873a2f4b2980c0_105_new,"openfl.text._internal.TextEngine","new",0xa9ba7af6,"openfl.text._internal.TextEngine.new","openfl/text/_internal/TextEngine.hx",105,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_155_createRestrictRegexp,"openfl.text._internal.TextEngine","createRestrictRegexp",0x6873dceb,"openfl.text._internal.TextEngine.createRestrictRegexp","openfl/text/_internal/TextEngine.hx",155,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_150_createRestrictRegexp,"openfl.text._internal.TextEngine","createRestrictRegexp",0x6873dceb,"openfl.text._internal.TextEngine.createRestrictRegexp","openfl/text/_internal/TextEngine.hx",150,0xb85e1839)
static const ::String _hx_array_data_7e808804_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_237_getBounds,"openfl.text._internal.TextEngine","getBounds",0x3ac9cec1,"openfl.text._internal.TextEngine.getBounds","openfl/text/_internal/TextEngine.hx",237,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_552_getLine,"openfl.text._internal.TextEngine","getLine",0xeb547540,"openfl.text._internal.TextEngine.getLine","openfl/text/_internal/TextEngine.hx",552,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_569_getLineBreakIndex,"openfl.text._internal.TextEngine","getLineBreakIndex",0xa9a1db33,"openfl.text._internal.TextEngine.getLineBreakIndex","openfl/text/_internal/TextEngine.hx",569,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_579_getLineMeasurements,"openfl.text._internal.TextEngine","getLineMeasurements",0x50395657,"openfl.text._internal.TextEngine.getLineMeasurements","openfl/text/_internal/TextEngine.hx",579,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_739_getLayoutGroups,"openfl.text._internal.TextEngine","getLayoutGroups",0x36de2bea,"openfl.text._internal.TextEngine.getLayoutGroups","openfl/text/_internal/TextEngine.hx",739,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1605_restrictText,"openfl.text._internal.TextEngine","restrictText",0x4d5464b3,"openfl.text._internal.TextEngine.restrictText","openfl/text/_internal/TextEngine.hx",1605,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1626_setTextAlignment,"openfl.text._internal.TextEngine","setTextAlignment",0x7bf8ff1e,"openfl.text._internal.TextEngine.setTextAlignment","openfl/text/_internal/TextEngine.hx",1626,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1733_trimText,"openfl.text._internal.TextEngine","trimText",0x8f1ce459,"openfl.text._internal.TextEngine.trimText","openfl/text/_internal/TextEngine.hx",1733,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1748_update,"openfl.text._internal.TextEngine","update",0x02cb1d33,"openfl.text._internal.TextEngine.update","openfl/text/_internal/TextEngine.hx",1748,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1780_get_bottomScrollV,"openfl.text._internal.TextEngine","get_bottomScrollV",0x0563c86b,"openfl.text._internal.TextEngine.get_bottomScrollV","openfl/text/_internal/TextEngine.hx",1780,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1810_get_maxScrollV,"openfl.text._internal.TextEngine","get_maxScrollV",0x5a4206d8,"openfl.text._internal.TextEngine.get_maxScrollV","openfl/text/_internal/TextEngine.hx",1810,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1843_set_restrict,"openfl.text._internal.TextEngine","set_restrict",0xd4c7f563,"openfl.text._internal.TextEngine.set_restrict","openfl/text/_internal/TextEngine.hx",1843,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1864_get_scrollV,"openfl.text._internal.TextEngine","get_scrollV",0x1f66c456,"openfl.text._internal.TextEngine.get_scrollV","openfl/text/_internal/TextEngine.hx",1864,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1873_set_scrollV,"openfl.text._internal.TextEngine","set_scrollV",0x29d3cb62,"openfl.text._internal.TextEngine.set_scrollV","openfl/text/_internal/TextEngine.hx",1873,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_1880_set_text,"openfl.text._internal.TextEngine","set_text",0xa4cb1754,"openfl.text._internal.TextEngine.set_text","openfl/text/_internal/TextEngine.hx",1880,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_176_findFont,"openfl.text._internal.TextEngine","findFont",0xc00da052,"openfl.text._internal.TextEngine.findFont","openfl/text/_internal/TextEngine.hx",176,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_212_findFontVariant,"openfl.text._internal.TextEngine","findFontVariant",0x8f425653,"openfl.text._internal.TextEngine.findFontVariant","openfl/text/_internal/TextEngine.hx",212,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_262_getFormatHeight,"openfl.text._internal.TextEngine","getFormatHeight",0x3ed257ca,"openfl.text._internal.TextEngine.getFormatHeight","openfl/text/_internal/TextEngine.hx",262,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_298_getFont,"openfl.text._internal.TextEngine","getFont",0xe761bb1b,"openfl.text._internal.TextEngine.getFont","openfl/text/_internal/TextEngine.hx",298,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_355_getFontInstance,"openfl.text._internal.TextEngine","getFontInstance",0x7b1da9d0,"openfl.text._internal.TextEngine.getFontInstance","openfl/text/_internal/TextEngine.hx",355,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_34_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",34,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_36_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",36,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_37_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",37,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_38_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",38,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_39_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",39,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_40_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",40,0xb85e1839)
HX_LOCAL_STACK_FRAME(_hx_pos_81873a2f4b2980c0_41_boot,"openfl.text._internal.TextEngine","boot",0xd18a1cdc,"openfl.text._internal.TextEngine.boot","openfl/text/_internal/TextEngine.hx",41,0xb85e1839)
namespace openfl{
namespace text{
namespace _internal{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_105_new)
HXLINE( 106)		this->textField = textField;
HXLINE( 108)		this->width = ( (Float)(100) );
HXLINE( 109)		this->height = ( (Float)(100) );
HXLINE( 110)		this->set_text(HX_("",00,00,00,00));
HXLINE( 112)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 113)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
HXLINE( 115)		this->type = 0;
HXLINE( 116)		this->autoSize = 2;
HXLINE( 117)		this->embedFonts = false;
HXLINE( 118)		this->selectable = true;
HXLINE( 119)		this->borderColor = 0;
HXLINE( 120)		this->border = false;
HXLINE( 121)		this->backgroundColor = 16777215;
HXLINE( 122)		this->background = false;
HXLINE( 123)		this->gridFitType = 1;
HXLINE( 124)		this->maxChars = 0;
HXLINE( 125)		this->multiline = false;
HXLINE( 126)		this->numLines = 1;
HXLINE( 127)		this->sharpness = ( (Float)(0) );
HXLINE( 128)		this->scrollH = 0;
HXLINE( 129)		this->set_scrollV(1);
HXLINE( 130)		this->wordWrap = false;
HXLINE( 132)		int length = null();
HXDLIN( 132)		bool fixed = null();
HXDLIN( 132)		::Array< Float > array = null();
HXDLIN( 132)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,array,true);
HXLINE( 133)		int length1 = null();
HXDLIN( 133)		bool fixed1 = null();
HXDLIN( 133)		::Array< int > array1 = null();
HXDLIN( 133)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,array1);
HXLINE( 134)		int length2 = null();
HXDLIN( 134)		bool fixed2 = null();
HXDLIN( 134)		::Array< Float > array2 = null();
HXDLIN( 134)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,array2,true);
HXLINE( 135)		int length3 = null();
HXDLIN( 135)		bool fixed3 = null();
HXDLIN( 135)		::Array< Float > array3 = null();
HXDLIN( 135)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,array3,true);
HXLINE( 136)		int length4 = null();
HXDLIN( 136)		bool fixed4 = null();
HXDLIN( 136)		::Array< Float > array4 = null();
HXDLIN( 136)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,array4,true);
HXLINE( 137)		int length5 = null();
HXDLIN( 137)		bool fixed5 = null();
HXDLIN( 137)		::Array< Float > array5 = null();
HXDLIN( 137)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,array5,true);
HXLINE( 138)		int length6 = null();
HXDLIN( 138)		bool fixed6 = null();
HXDLIN( 138)		::Array< ::Dynamic> array6 = null();
HXDLIN( 138)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,array6,true);
HXLINE( 139)		int length7 = null();
HXDLIN( 139)		bool fixed7 = null();
HXDLIN( 139)		::Array< ::Dynamic> array7 = null();
HXDLIN( 139)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,array7,true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c31d3ca;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_155_createRestrictRegexp)
HXLINE( 156)			::Array< ::String > declined1 = declined;
HXDLIN( 156)			int accepted1 = 0;
HXDLIN( 156)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 156)			declined1[accepted1] = (declined2 + ereg->matched(1));
HXLINE( 157)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_150_createRestrictRegexp)
HXLINE( 151)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 152)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_7e808804_3,1);
HXLINE( 154)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 160)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 162)		if ((accepted.length > 0)) {
HXLINE( 164)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 167)		if ((declined->__get(0).length > 0)) {
HXLINE( 169)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get(0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 172)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_237_getBounds)
HXLINE( 238)		int padding;
HXDLIN( 238)		if (this->border) {
HXLINE( 238)			padding = 1;
            		}
            		else {
HXLINE( 238)			padding = 0;
            		}
HXLINE( 240)		this->bounds->width = (this->width + padding);
HXLINE( 241)		this->bounds->height = (this->height + padding);
HXLINE( 243)		Float x = this->width;
HXDLIN( 243)		Float y = this->width;
HXLINE( 245)		{
HXLINE( 245)			 ::Dynamic group = this->layoutGroups->iterator();
HXDLIN( 245)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 245)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 247)				if ((group1->offsetX < x)) {
HXLINE( 247)					x = group1->offsetX;
            				}
HXLINE( 248)				if ((group1->offsetY < y)) {
HXLINE( 248)					y = group1->offsetY;
            				}
            			}
            		}
HXLINE( 251)		if ((x >= this->width)) {
HXLINE( 251)			x = ( (Float)(2) );
            		}
HXLINE( 252)		if ((y >= this->height)) {
HXLINE( 252)			y = ( (Float)(2) );
            		}
HXLINE( 258)		this->textBounds->setTo(::Math_obj::max((x - ( (Float)(2) )),( (Float)(0) )),::Math_obj::max((y - ( (Float)(2) )),( (Float)(0) )),::Math_obj::min((this->textWidth + 4),(this->bounds->width + 4)),::Math_obj::min((this->textHeight + 4),(this->bounds->height + 4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_552_getLine)
HXLINE( 553)		bool _hx_tmp;
HXDLIN( 553)		if ((index >= 0)) {
HXLINE( 553)			_hx_tmp = (index > (this->lineBreaks->get_length() + 1));
            		}
            		else {
HXLINE( 553)			_hx_tmp = true;
            		}
HXDLIN( 553)		if (_hx_tmp) {
HXLINE( 555)			return null();
            		}
HXLINE( 558)		if ((this->lineBreaks->get_length() == 0)) {
HXLINE( 560)			return this->text;
            		}
            		else {
HXLINE( 564)			::String _hx_tmp1 = this->text;
HXDLIN( 564)			int _hx_tmp2;
HXDLIN( 564)			if ((index > 0)) {
HXLINE( 564)				_hx_tmp2 = this->lineBreaks->get((index - 1));
            			}
            			else {
HXLINE( 564)				_hx_tmp2 = 0;
            			}
HXDLIN( 564)			return _hx_tmp1.substring(_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 558)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
            		int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_569_getLineBreakIndex)
HXLINE( 570)		int cr = this->text.indexOf(HX_("\n",0a,00,00,00),startIndex);
HXLINE( 571)		int lf = this->text.indexOf(HX_("\r",0d,00,00,00),startIndex);
HXLINE( 573)		if ((cr == -1)) {
HXLINE( 573)			return lf;
            		}
HXLINE( 574)		if ((lf == -1)) {
HXLINE( 574)			return cr;
            		}
HXLINE( 575)		if ((cr < lf)) {
HXLINE( 575)			return cr;
            		}
            		else {
HXLINE( 575)			return lf;
            		}
HXDLIN( 575)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_579_getLineMeasurements)
HXLINE( 580)		this->lineAscents->set_length(0);
HXLINE( 581)		this->lineDescents->set_length(0);
HXLINE( 582)		this->lineLeadings->set_length(0);
HXLINE( 583)		this->lineHeights->set_length(0);
HXLINE( 584)		this->lineWidths->set_length(0);
HXLINE( 586)		Float currentLineAscent = ((Float)0.0);
HXLINE( 587)		Float currentLineDescent = ((Float)0.0);
HXLINE( 588)		 ::Dynamic currentLineLeading = null();
HXLINE( 589)		Float currentLineHeight = ((Float)0.0);
HXLINE( 590)		Float currentLineWidth = ((Float)0.0);
HXLINE( 591)		Float currentTextHeight = ((Float)0.0);
HXLINE( 593)		this->textWidth = ( (Float)(0) );
HXLINE( 594)		this->textHeight = ( (Float)(0) );
HXLINE( 595)		this->numLines = 1;
HXLINE( 596)		this->maxScrollH = 0;
HXLINE( 598)		{
HXLINE( 598)			 ::Dynamic group = this->layoutGroups->iterator();
HXDLIN( 598)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 598)				 ::openfl::text::_internal::TextLayoutGroup group1 = ( ( ::openfl::text::_internal::TextLayoutGroup)(group->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 600)				while((group1->lineIndex > (this->numLines - 1))){
HXLINE( 602)					this->lineAscents->push(currentLineAscent);
HXLINE( 603)					this->lineDescents->push(currentLineDescent);
HXLINE( 604)					{
HXLINE( 604)						Float _hx_tmp;
HXDLIN( 604)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 604)							_hx_tmp = ( (Float)(currentLineLeading) );
            						}
            						else {
HXLINE( 604)							_hx_tmp = ( (Float)(0) );
            						}
HXDLIN( 604)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 605)					this->lineHeights->push(currentLineHeight);
HXLINE( 606)					this->lineWidths->push(currentLineWidth);
HXLINE( 608)					currentLineAscent = ( (Float)(0) );
HXLINE( 609)					currentLineDescent = ( (Float)(0) );
HXLINE( 610)					currentLineLeading = null();
HXLINE( 611)					currentLineHeight = ( (Float)(0) );
HXLINE( 612)					currentLineWidth = ( (Float)(0) );
HXLINE( 614)					this->numLines++;
            				}
HXLINE( 617)				currentLineAscent = ::Math_obj::max(currentLineAscent,group1->ascent);
HXLINE( 618)				currentLineDescent = ::Math_obj::max(currentLineDescent,group1->descent);
HXLINE( 620)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 622)					currentLineLeading = group1->leading;
            				}
            				else {
HXLINE( 626)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(currentLineLeading) ),( (Float)(group1->leading) )));
            				}
HXLINE( 629)				currentLineHeight = ::Math_obj::max(currentLineHeight,group1->height);
HXLINE( 630)				currentLineWidth = ((group1->offsetX - ( (Float)(2) )) + group1->width);
HXLINE( 632)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 634)					this->textWidth = currentLineWidth;
            				}
HXLINE( 637)				currentTextHeight = (((group1->offsetY - ( (Float)(2) )) + group1->ascent) + group1->descent);
HXLINE( 639)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 641)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 645)		bool _hx_tmp1;
HXDLIN( 645)		bool _hx_tmp2;
HXDLIN( 645)		if ((this->textHeight == 0)) {
HXLINE( 645)			_hx_tmp2 = hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 645)			_hx_tmp2 = false;
            		}
HXDLIN( 645)		if (_hx_tmp2) {
HXLINE( 645)			_hx_tmp1 = hx::IsEq( this->textField->get_type(),1 );
            		}
            		else {
HXLINE( 645)			_hx_tmp1 = false;
            		}
HXDLIN( 645)		if (_hx_tmp1) {
HXLINE( 647)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 648)			Float ascent;
HXDLIN( 648)			Float descent;
HXLINE( 650)			 ::openfl::text::Font font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 652)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 654)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 655)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE( 657)				bool _hx_tmp3;
HXDLIN( 657)				if (hx::IsNotNull( font )) {
HXLINE( 657)					_hx_tmp3 = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE( 657)					_hx_tmp3 = false;
            				}
HXDLIN( 657)				if (_hx_tmp3) {
HXLINE( 660)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 661)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 669)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 670)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 648)			 ::Dynamic leading = currentFormat->leading;
HXDLIN( 648)			Float heightValue = ((ascent + descent) + leading);
HXLINE( 677)			currentLineAscent = ascent;
HXLINE( 678)			currentLineDescent = descent;
HXLINE( 679)			currentLineLeading = leading;
HXLINE( 681)			currentTextHeight = (ascent + descent);
HXLINE( 682)			this->textHeight = currentTextHeight;
            		}
HXLINE( 685)		this->lineAscents->push(currentLineAscent);
HXLINE( 686)		this->lineDescents->push(currentLineDescent);
HXLINE( 687)		{
HXLINE( 687)			Float _hx_tmp4;
HXDLIN( 687)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 687)				_hx_tmp4 = ( (Float)(currentLineLeading) );
            			}
            			else {
HXLINE( 687)				_hx_tmp4 = ( (Float)(0) );
            			}
HXDLIN( 687)			this->lineLeadings->push(_hx_tmp4);
            		}
HXLINE( 688)		this->lineHeights->push(currentLineHeight);
HXLINE( 689)		this->lineWidths->push(currentLineWidth);
HXLINE( 691)		if ((this->numLines == 1)) {
HXLINE( 693)			if (hx::IsGreater( currentLineLeading,0 )) {
HXLINE( 695)				 ::openfl::text::_internal::TextEngine _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 695)				_hx_tmp5->textHeight = (_hx_tmp5->textHeight + currentLineLeading);
            			}
            		}
HXLINE( 699)		if ((this->layoutGroups->get_length() > 0)) {
HXLINE( 701)			::Dynamic this1 = this->layoutGroups;
HXDLIN( 701)			 ::openfl::text::_internal::TextLayoutGroup group2 = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE( 703)			bool _hx_tmp6;
HXDLIN( 703)			if (hx::IsNotNull( group2 )) {
HXLINE( 703)				_hx_tmp6 = (group2->startIndex == group2->endIndex);
            			}
            			else {
HXLINE( 703)				_hx_tmp6 = false;
            			}
HXDLIN( 703)			if (_hx_tmp6) {
HXLINE( 705)				 ::openfl::text::_internal::TextEngine _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 705)				_hx_tmp7->textHeight = (_hx_tmp7->textHeight - currentLineHeight);
            			}
            		}
HXLINE( 709)		if (hx::IsNotEq( this->autoSize,2 )) {
HXLINE( 711)			 ::Dynamic _hx_switch_0 = this->autoSize;
            			if (  (_hx_switch_0==0) ||  (_hx_switch_0==1) ||  (_hx_switch_0==3) ){
HXLINE( 714)				if (!(this->wordWrap)) {
HXLINE( 716)					this->width = (this->textWidth + 4);
            				}
HXLINE( 719)				this->height = (this->textHeight + 4);
HXLINE( 720)				this->bottomScrollV = this->numLines;
HXLINE( 713)				goto _hx_goto_10;
            			}
            			/* default */{
            			}
            			_hx_goto_10:;
            		}
HXLINE( 726)		if ((this->textWidth > (this->width - ( (Float)(4) )))) {
HXLINE( 728)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + 4));
            		}
            		else {
HXLINE( 732)			this->maxScrollH = 0;
            		}
HXLINE( 735)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 735)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_739_getLayoutGroups)
HXLINE( 738)		 ::openfl::text::_internal::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 740)		this->layoutGroups->set_length(0);
HXLINE( 742)		bool _hx_tmp;
HXDLIN( 742)		if (hx::IsNotNull( this->text )) {
HXLINE( 742)			_hx_tmp = (this->text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 742)			_hx_tmp = true;
            		}
HXDLIN( 742)		if (_hx_tmp) {
HXLINE( 742)			return;
            		}
HXLINE( 744)		int rangeIndex = -1;
HXLINE( 745)		 ::openfl::text::_internal::TextFormatRange formatRange = null();
HXLINE( 746)		 ::lime::text::Font font = null();
HXLINE( 748)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 751)		int leading = 0;
HXLINE( 752)		Float ascent = ((Float)0.0);
HXDLIN( 752)		Float maxAscent = ((Float)0.0);
HXLINE( 753)		Float descent = ((Float)0.0);
HXLINE( 756)		 ::Dynamic align = 3;
HXLINE( 757)		int blockIndent = 0;
HXLINE( 758)		bool bullet = false;
HXLINE( 759)		int indent = 0;
HXLINE( 760)		int leftMargin = 0;
HXLINE( 761)		int rightMargin = 0;
HXLINE( 762)		 ::Dynamic tabStops = null();
HXLINE( 764)		 ::openfl::text::_internal::TextLayoutGroup layoutGroup = null();
HXDLIN( 764)		::Array< ::Dynamic> positions = null();
HXLINE( 765)		Float widthValue = ((Float)0.0);
HXDLIN( 765)		int heightValue = 0;
HXDLIN( 765)		int maxHeightValue = 0;
HXLINE( 766)		int previousSpaceIndex = -2;
HXLINE( 767)		int previousBreakIndex = -1;
HXLINE( 768)		int spaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),null());
HXLINE( 769)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 771)		Float offsetX = ((Float)2.0);
HXLINE( 772)		Float offsetY = ((Float)2.0);
HXLINE( 773)		int textIndex = 0;
HXLINE( 774)		int lineIndex = 0;
HXLINE(1289)		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1289)			rangeIndex = (rangeIndex + 1);
HXDLIN(1289)			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1289)			currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1290)		{
HXLINE(1290)			if (hx::IsNotNull( currentFormat->align )) {
HXLINE( 975)				align = currentFormat->align;
            			}
HXLINE(1290)			bool _hx_tmp1 = hx::IsNotNull( currentFormat->blockIndent );
HXDLIN(1290)			bool _hx_tmp2 = hx::IsNotNull( currentFormat->bullet );
HXDLIN(1290)			bool _hx_tmp3 = hx::IsNotNull( currentFormat->indent );
HXDLIN(1290)			if (hx::IsNotNull( currentFormat->leftMargin )) {
HXLINE( 995)				leftMargin = ( (int)(currentFormat->leftMargin) );
            			}
HXLINE(1290)			if (hx::IsNotNull( currentFormat->rightMargin )) {
HXLINE(1000)				rightMargin = ( (int)(currentFormat->rightMargin) );
            			}
HXLINE(1290)			bool _hx_tmp4 = hx::IsNotNull( currentFormat->tabStops );
            		}
HXLINE(1291)		{
HXLINE(1291)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)				ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)				descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            			}
            			else {
HXLINE(1291)				bool _hx_tmp5;
HXDLIN(1291)				if (hx::IsNotNull( font )) {
HXLINE(1291)					_hx_tmp5 = (font->unitsPerEM != 0);
            				}
            				else {
HXLINE(1291)					_hx_tmp5 = false;
            				}
HXDLIN(1291)				if (_hx_tmp5) {
HXLINE( 945)					ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)					descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            				}
            				else {
HXLINE( 951)					ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)					descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            				}
            			}
HXLINE( 955)			leading = ( (int)(currentFormat->leading) );
HXLINE( 957)			heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1291)			if ((heightValue > maxHeightValue)) {
HXLINE( 961)				maxHeightValue = heightValue;
            			}
HXLINE(1291)			if ((ascent > maxAscent)) {
HXLINE( 966)				maxAscent = ascent;
            			}
            		}
HXLINE(1293)		bool wrap;
HXLINE(1294)		int maxLoops = (this->text.length + 1);
HXLINE(1298)		while((textIndex < maxLoops)){
HXLINE(1300)			bool _hx_tmp6;
HXDLIN(1300)			if ((breakIndex > -1)) {
HXLINE(1300)				if ((spaceIndex != -1)) {
HXLINE(1300)					_hx_tmp6 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1300)					_hx_tmp6 = true;
            				}
            			}
            			else {
HXLINE(1300)				_hx_tmp6 = false;
            			}
HXDLIN(1300)			if (_hx_tmp6) {
HXLINE(1304)				if ((textIndex <= breakIndex)) {
HXLINE(1306)					if ((breakIndex <= formatRange->end)) {
HXLINE(1306)						::String text = _gthis->text;
HXDLIN(1306)						Float letterSpacing = ((Float)0.0);
HXDLIN(1306)						if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)							letterSpacing = ( (Float)(formatRange->format->letterSpacing) );
            						}
HXLINE(1306)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1306)							_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1306)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1306)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1306)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1306)							_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            						}
HXDLIN(1306)						_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1306)						bool positions1;
HXDLIN(1306)						if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1306)							positions1 = (_gthis->sharpness < 400);
            						}
            						else {
HXLINE(1306)							positions1 = true;
            						}
HXDLIN(1306)						_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1306)						 ::openfl::text::_internal::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1306)						_gthis1->set_text(text.substring(textIndex,breakIndex));
HXDLIN(1306)						positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1306)						Float width = ((Float)0.0);
HXDLIN(1306)						int _g = 0;
HXDLIN(1306)						while((_g < positions->length)){
HXLINE(1306)							 ::openfl::text::_internal::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1306)							_g = (_g + 1);
HXDLIN(1306)							width = (width + position->advance->x);
            						}
HXDLIN(1306)						widthValue = width;
            					}
            					else {
HXLINE(1306)						int tempIndex = textIndex;
HXDLIN(1306)						int tempRangeEnd = formatRange->end;
HXDLIN(1306)						int countRanges = 0;
HXLINE(1046)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)						widthValue = ( (Float)(0) );
HXLINE(1306)						while(true){
HXLINE(1306)							if ((tempIndex != tempRangeEnd)) {
HXLINE(1306)								::String text1 = _gthis->text;
HXDLIN(1306)								Float letterSpacing1 = ((Float)0.0);
HXDLIN(1306)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)									letterSpacing1 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1306)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1306)									_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1306)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1306)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1306)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1306)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1306)								_gthis->_hx___textLayout->letterSpacing = letterSpacing1;
HXDLIN(1306)								bool _hx_tmp7;
HXDLIN(1306)								if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1306)									_hx_tmp7 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1306)									_hx_tmp7 = true;
            								}
HXDLIN(1306)								_gthis->_hx___textLayout->autoHint = _hx_tmp7;
HXDLIN(1306)								 ::openfl::text::_internal::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1306)								_gthis2->set_text(text1.substring(tempIndex,tempRangeEnd));
HXDLIN(1306)								::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)								positions = positions->concat(tempPositions);
            							}
HXLINE(1306)							if ((tempRangeEnd != breakIndex)) {
HXLINE(1306)								bool _hx_tmp8;
HXDLIN(1306)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1306)									rangeIndex = (rangeIndex + 1);
HXDLIN(1306)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1306)									currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)									font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1306)									_hx_tmp8 = true;
            								}
            								else {
HXLINE(1306)									_hx_tmp8 = false;
            								}
HXDLIN(1306)								if (!(_hx_tmp8)) {
HXLINE(1306)									::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1306)									goto _hx_goto_14;
            								}
HXLINE(1065)								tempIndex = tempRangeEnd;
HXLINE(1306)								if ((breakIndex < formatRange->end)) {
HXLINE(1306)									tempRangeEnd = breakIndex;
            								}
            								else {
HXLINE(1306)									tempRangeEnd = formatRange->end;
            								}
HXDLIN(1306)								countRanges = (countRanges + 1);
            							}
            							else {
HXLINE(1306)								Float width1 = ((Float)0.0);
HXDLIN(1306)								int _g1 = 0;
HXDLIN(1306)								while((_g1 < positions->length)){
HXLINE(1306)									 ::openfl::text::_internal::GlyphPosition position1 = positions->__get(_g1).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1306)									_g1 = (_g1 + 1);
HXDLIN(1306)									width1 = (width1 + position1->advance->x);
            								}
HXDLIN(1306)								widthValue = width1;
HXDLIN(1306)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
HXDLIN(1306)						rangeIndex = (rangeIndex - (countRanges + 1));
HXDLIN(1306)						if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1306)							rangeIndex = (rangeIndex + 1);
HXDLIN(1306)							formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1306)							currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)							font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            						}
            					}
HXLINE(1307)					{
HXLINE(1307)						bool _hx_tmp9;
HXDLIN(1307)						if ((_gthis->width >= 4)) {
HXLINE(1307)							_hx_tmp9 = _gthis->wordWrap;
            						}
            						else {
HXLINE(1307)							_hx_tmp9 = false;
            						}
HXDLIN(1307)						if (_hx_tmp9) {
HXLINE(1307)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1307)							int i;
HXDLIN(1307)							int bufferCount;
HXDLIN(1307)							int placeIndex;
HXDLIN(1307)							Float positionWidth;
HXDLIN(1307)							 ::openfl::text::_internal::GlyphPosition currentPosition;
HXDLIN(1307)							Float width2 = ((Float)0.0);
HXDLIN(1307)							{
HXLINE(1307)								int _g2 = 0;
HXDLIN(1307)								while((_g2 < remainingPositions->length)){
HXLINE(1307)									 ::openfl::text::_internal::GlyphPosition position2 = remainingPositions->__get(_g2).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)									_g2 = (_g2 + 1);
HXDLIN(1307)									width2 = (width2 + position2->advance->x);
            								}
            							}
HXDLIN(1307)							Float tempWidth = width2;
HXDLIN(1307)							while(((offsetX + tempWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)								bufferCount = 0;
HXDLIN(1202)								i = bufferCount;
HXLINE(1203)								positionWidth = ((Float)0.0);
HXLINE(1307)								while(((offsetX + positionWidth) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXLINE(1307)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1307)										i = (i + 1);
HXDLIN(1307)										bufferCount = (bufferCount + 1);
            									}
            									else {
HXLINE(1307)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1307)										i = (i + 1);
            									}
            								}
HXDLIN(1307)								if ((positionWidth == ((Float)0.0))) {
HXLINE(1307)									goto _hx_goto_17;
            								}
            								else {
HXLINE(1307)									bool _hx_tmp10;
HXDLIN(1307)									if ((i < 2)) {
HXLINE(1307)										_hx_tmp10 = ((positionWidth + offsetX) > (_gthis->width - ( (Float)(2) )));
            									}
            									else {
HXLINE(1307)										_hx_tmp10 = false;
            									}
HXDLIN(1307)									if (_hx_tmp10) {
HXLINE(1307)										if ((((textIndex + i) - bufferCount) == breakIndex)) {
HXLINE(1307)											goto _hx_goto_17;
            										}
            									}
            									else {
HXLINE(1307)										while(((offsetX + positionWidth) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1307)											i = (i - 1);
HXDLIN(1307)											if (((i - bufferCount) > 0)) {
HXLINE(1307)												{
HXLINE(1307)													int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1307)													if ((endIndex <= formatRange->end)) {
HXLINE(1307)														::String text2 = _gthis->text;
HXDLIN(1307)														Float letterSpacing2 = ((Float)0.0);
HXDLIN(1307)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing2 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1307)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->letterSpacing = letterSpacing2;
HXDLIN(1307)														bool positions2;
HXDLIN(1307)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)															positions2 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1307)															positions2 = true;
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->autoHint = positions2;
HXDLIN(1307)														 ::openfl::text::_internal::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1307)														_gthis3->set_text(text2.substring(textIndex,endIndex));
HXDLIN(1307)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)														Float width3 = ((Float)0.0);
HXDLIN(1307)														int _g3 = 0;
HXDLIN(1307)														while((_g3 < positions->length)){
HXLINE(1307)															 ::openfl::text::_internal::GlyphPosition position3 = positions->__get(_g3).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)															_g3 = (_g3 + 1);
HXDLIN(1307)															width3 = (width3 + position3->advance->x);
            														}
HXDLIN(1307)														widthValue = width3;
            													}
            													else {
HXLINE(1307)														int tempIndex1 = textIndex;
HXDLIN(1307)														int tempRangeEnd1 = formatRange->end;
HXDLIN(1307)														int countRanges1 = 0;
HXLINE(1046)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)														widthValue = ( (Float)(0) );
HXLINE(1307)														while(true){
HXLINE(1307)															if ((tempIndex1 != tempRangeEnd1)) {
HXLINE(1307)																::String text3 = _gthis->text;
HXDLIN(1307)																Float letterSpacing3 = ((Float)0.0);
HXDLIN(1307)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing3 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1307)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->letterSpacing = letterSpacing3;
HXDLIN(1307)																bool _hx_tmp11;
HXDLIN(1307)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)																	_hx_tmp11 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1307)																	_hx_tmp11 = true;
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->autoHint = _hx_tmp11;
HXDLIN(1307)																 ::openfl::text::_internal::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1307)																_gthis4->set_text(text3.substring(tempIndex1,tempRangeEnd1));
HXDLIN(1307)																::Array< ::Dynamic> tempPositions1 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																positions = positions->concat(tempPositions1);
            															}
HXLINE(1307)															if ((tempRangeEnd1 != endIndex)) {
HXLINE(1307)																bool _hx_tmp12;
HXDLIN(1307)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1307)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)																	_hx_tmp12 = true;
            																}
            																else {
HXLINE(1307)																	_hx_tmp12 = false;
            																}
HXDLIN(1307)																if (!(_hx_tmp12)) {
HXLINE(1307)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)																	goto _hx_goto_21;
            																}
HXLINE(1065)																tempIndex1 = tempRangeEnd1;
HXLINE(1307)																if ((endIndex < formatRange->end)) {
HXLINE(1307)																	tempRangeEnd1 = endIndex;
            																}
            																else {
HXLINE(1307)																	tempRangeEnd1 = formatRange->end;
            																}
HXDLIN(1307)																countRanges1 = (countRanges1 + 1);
            															}
            															else {
HXLINE(1307)																Float width4 = ((Float)0.0);
HXDLIN(1307)																int _g4 = 0;
HXDLIN(1307)																while((_g4 < positions->length)){
HXLINE(1307)																	 ::openfl::text::_internal::GlyphPosition position4 = positions->__get(_g4).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)																	_g4 = (_g4 + 1);
HXDLIN(1307)																	width4 = (width4 + position4->advance->x);
            																}
HXDLIN(1307)																widthValue = width4;
HXDLIN(1307)																goto _hx_goto_21;
            															}
            														}
            														_hx_goto_21:;
HXDLIN(1307)														rangeIndex = (rangeIndex - (countRanges1 + 1));
HXDLIN(1307)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)															rangeIndex = (rangeIndex + 1);
HXDLIN(1307)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXLINE(1250)												positionWidth = widthValue;
            											}
            											else {
HXLINE(1256)												i = 1;
HXLINE(1257)												bufferCount = 0;
HXLINE(1307)												{
HXLINE(1307)													int endIndex1 = (textIndex + 1);
HXDLIN(1307)													if ((endIndex1 <= formatRange->end)) {
HXLINE(1307)														::String text4 = _gthis->text;
HXDLIN(1307)														Float letterSpacing4 = ((Float)0.0);
HXDLIN(1307)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing4 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1307)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->letterSpacing = letterSpacing4;
HXDLIN(1307)														bool positions3;
HXDLIN(1307)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)															positions3 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1307)															positions3 = true;
            														}
HXDLIN(1307)														_gthis->_hx___textLayout->autoHint = positions3;
HXDLIN(1307)														 ::openfl::text::_internal::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1307)														_gthis5->set_text(text4.substring(textIndex,endIndex1));
HXDLIN(1307)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)														Float width5 = ((Float)0.0);
HXDLIN(1307)														int _g5 = 0;
HXDLIN(1307)														while((_g5 < positions->length)){
HXLINE(1307)															 ::openfl::text::_internal::GlyphPosition position5 = positions->__get(_g5).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)															_g5 = (_g5 + 1);
HXDLIN(1307)															width5 = (width5 + position5->advance->x);
            														}
HXDLIN(1307)														widthValue = width5;
            													}
            													else {
HXLINE(1307)														int tempIndex2 = textIndex;
HXDLIN(1307)														int tempRangeEnd2 = formatRange->end;
HXDLIN(1307)														int countRanges2 = 0;
HXLINE(1046)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)														widthValue = ( (Float)(0) );
HXLINE(1307)														while(true){
HXLINE(1307)															if ((tempIndex2 != tempRangeEnd2)) {
HXLINE(1307)																::String text5 = _gthis->text;
HXDLIN(1307)																Float letterSpacing5 = ((Float)0.0);
HXDLIN(1307)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing5 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1307)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->letterSpacing = letterSpacing5;
HXDLIN(1307)																bool _hx_tmp13;
HXDLIN(1307)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)																	_hx_tmp13 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1307)																	_hx_tmp13 = true;
            																}
HXDLIN(1307)																_gthis->_hx___textLayout->autoHint = _hx_tmp13;
HXDLIN(1307)																 ::openfl::text::_internal::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1307)																_gthis6->set_text(text5.substring(tempIndex2,tempRangeEnd2));
HXDLIN(1307)																::Array< ::Dynamic> tempPositions2 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																positions = positions->concat(tempPositions2);
            															}
HXLINE(1307)															if ((tempRangeEnd2 != endIndex1)) {
HXLINE(1307)																bool _hx_tmp14;
HXDLIN(1307)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1307)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)																	_hx_tmp14 = true;
            																}
            																else {
HXLINE(1307)																	_hx_tmp14 = false;
            																}
HXDLIN(1307)																if (!(_hx_tmp14)) {
HXLINE(1307)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)																	goto _hx_goto_24;
            																}
HXLINE(1065)																tempIndex2 = tempRangeEnd2;
HXLINE(1307)																if ((endIndex1 < formatRange->end)) {
HXLINE(1307)																	tempRangeEnd2 = endIndex1;
            																}
            																else {
HXLINE(1307)																	tempRangeEnd2 = formatRange->end;
            																}
HXDLIN(1307)																countRanges2 = (countRanges2 + 1);
            															}
            															else {
HXLINE(1307)																Float width6 = ((Float)0.0);
HXDLIN(1307)																int _g6 = 0;
HXDLIN(1307)																while((_g6 < positions->length)){
HXLINE(1307)																	 ::openfl::text::_internal::GlyphPosition position6 = positions->__get(_g6).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)																	_g6 = (_g6 + 1);
HXDLIN(1307)																	width6 = (width6 + position6->advance->x);
            																}
HXDLIN(1307)																widthValue = width6;
HXDLIN(1307)																goto _hx_goto_24;
            															}
            														}
            														_hx_goto_24:;
HXDLIN(1307)														rangeIndex = (rangeIndex - (countRanges2 + 1));
HXDLIN(1307)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)															rangeIndex = (rangeIndex + 1);
HXDLIN(1307)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXLINE(1260)												positionWidth = ( (Float)(0) );
            											}
            										}
            									}
            								}
HXLINE(1265)								placeIndex = ((textIndex + i) - bufferCount);
HXLINE(1307)								{
HXLINE(1307)									if ((placeIndex <= formatRange->end)) {
HXLINE(1307)										::String text6 = _gthis->text;
HXDLIN(1307)										Float letterSpacing6 = ((Float)0.0);
HXDLIN(1307)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing6 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1307)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->letterSpacing = letterSpacing6;
HXDLIN(1307)										bool positions4;
HXDLIN(1307)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)											positions4 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1307)											positions4 = true;
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->autoHint = positions4;
HXDLIN(1307)										 ::openfl::text::_internal::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1307)										_gthis7->set_text(text6.substring(textIndex,placeIndex));
HXDLIN(1307)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)										Float width7 = ((Float)0.0);
HXDLIN(1307)										int _g7 = 0;
HXDLIN(1307)										while((_g7 < positions->length)){
HXLINE(1307)											 ::openfl::text::_internal::GlyphPosition position7 = positions->__get(_g7).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)											_g7 = (_g7 + 1);
HXDLIN(1307)											width7 = (width7 + position7->advance->x);
            										}
HXDLIN(1307)										widthValue = width7;
HXDLIN(1307)										bool _hx_tmp15;
HXDLIN(1307)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1307)											_hx_tmp15 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1307)											_hx_tmp15 = true;
            										}
HXDLIN(1307)										if (_hx_tmp15) {
HXLINE( 923)											layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXLINE(1307)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1307)											layoutGroup->format = formatRange->format;
HXDLIN(1307)											layoutGroup->startIndex = textIndex;
HXDLIN(1307)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1307)										layoutGroup->positions = positions;
HXDLIN(1307)										layoutGroup->offsetX = offsetX;
HXDLIN(1307)										layoutGroup->ascent = ascent;
HXDLIN(1307)										layoutGroup->descent = descent;
HXDLIN(1307)										layoutGroup->leading = leading;
HXDLIN(1307)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)										layoutGroup->offsetY = offsetY;
HXDLIN(1307)										layoutGroup->width = widthValue;
HXDLIN(1307)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)										offsetX = (offsetX + widthValue);
HXDLIN(1307)										if ((placeIndex == formatRange->end)) {
HXLINE(1108)											layoutGroup = null();
HXLINE(1307)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)												rangeIndex = (rangeIndex + 1);
HXDLIN(1307)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXLINE(1307)											{
HXLINE(1307)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1307)													bool _hx_tmp16;
HXDLIN(1307)													if (hx::IsNotNull( font )) {
HXLINE(1307)														_hx_tmp16 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1307)														_hx_tmp16 = false;
            													}
HXDLIN(1307)													if (_hx_tmp16) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1307)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1307)										while(true){
HXLINE(1307)											int tempRangeEnd3;
HXDLIN(1307)											if ((placeIndex < formatRange->end)) {
HXLINE(1307)												tempRangeEnd3 = placeIndex;
            											}
            											else {
HXLINE(1307)												tempRangeEnd3 = formatRange->end;
            											}
HXDLIN(1307)											if ((textIndex != tempRangeEnd3)) {
HXLINE(1307)												::String text7 = _gthis->text;
HXDLIN(1307)												Float letterSpacing7 = ((Float)0.0);
HXDLIN(1307)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing7 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1307)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1307)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1307)												_gthis->_hx___textLayout->letterSpacing = letterSpacing7;
HXDLIN(1307)												bool positions5;
HXDLIN(1307)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)													positions5 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1307)													positions5 = true;
            												}
HXDLIN(1307)												_gthis->_hx___textLayout->autoHint = positions5;
HXDLIN(1307)												 ::openfl::text::_internal::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1307)												_gthis8->set_text(text7.substring(textIndex,tempRangeEnd3));
HXDLIN(1307)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)												Float width8 = ((Float)0.0);
HXDLIN(1307)												int _g8 = 0;
HXDLIN(1307)												while((_g8 < positions->length)){
HXLINE(1307)													 ::openfl::text::_internal::GlyphPosition position8 = positions->__get(_g8).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)													_g8 = (_g8 + 1);
HXDLIN(1307)													width8 = (width8 + position8->advance->x);
            												}
HXDLIN(1307)												widthValue = width8;
HXDLIN(1307)												bool _hx_tmp17;
HXDLIN(1307)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1307)													_hx_tmp17 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1307)													_hx_tmp17 = true;
            												}
HXDLIN(1307)												if (_hx_tmp17) {
HXLINE( 923)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd3);
HXLINE(1307)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1307)													layoutGroup->format = formatRange->format;
HXDLIN(1307)													layoutGroup->startIndex = textIndex;
HXDLIN(1307)													layoutGroup->endIndex = tempRangeEnd3;
            												}
HXDLIN(1307)												layoutGroup->positions = positions;
HXDLIN(1307)												layoutGroup->offsetX = offsetX;
HXDLIN(1307)												layoutGroup->ascent = ascent;
HXDLIN(1307)												layoutGroup->descent = descent;
HXDLIN(1307)												layoutGroup->leading = leading;
HXDLIN(1307)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)												layoutGroup->offsetY = offsetY;
HXDLIN(1307)												layoutGroup->width = widthValue;
HXDLIN(1307)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)												offsetX = (offsetX + widthValue);
HXLINE(1140)												textIndex = tempRangeEnd3;
            											}
HXLINE(1307)											if ((tempRangeEnd3 == formatRange->end)) {
HXLINE(1143)												layoutGroup = null();
            											}
HXLINE(1307)											if ((tempRangeEnd3 == placeIndex)) {
HXLINE(1307)												goto _hx_goto_27;
            											}
HXDLIN(1307)											bool _hx_tmp18;
HXDLIN(1307)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)												rangeIndex = (rangeIndex + 1);
HXDLIN(1307)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)												_hx_tmp18 = true;
            											}
            											else {
HXLINE(1307)												_hx_tmp18 = false;
            											}
HXDLIN(1307)											if (!(_hx_tmp18)) {
HXLINE(1307)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)												goto _hx_goto_27;
            											}
HXDLIN(1307)											{
HXLINE(1307)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1307)													bool _hx_tmp19;
HXDLIN(1307)													if (hx::IsNotNull( font )) {
HXLINE(1307)														_hx_tmp19 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1307)														_hx_tmp19 = false;
            													}
HXDLIN(1307)													if (_hx_tmp19) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1307)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_27:;
            									}
HXLINE(1157)									textIndex = placeIndex;
            								}
HXLINE(1307)								{
HXLINE(1307)									{
HXLINE(1307)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1307)											bool _hx_tmp20;
HXDLIN(1307)											if (hx::IsNotNull( font )) {
HXLINE(1307)												_hx_tmp20 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1307)												_hx_tmp20 = false;
            											}
HXDLIN(1307)											if (_hx_tmp20) {
HXLINE( 945)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 951)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 955)										leading = ( (int)(currentFormat->leading) );
HXLINE( 957)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)										if ((heightValue > maxHeightValue)) {
HXLINE( 961)											maxHeightValue = heightValue;
            										}
HXLINE(1307)										if ((ascent > maxAscent)) {
HXLINE( 966)											maxAscent = ascent;
            										}
            									}
HXLINE(1307)									int i1 = _gthis->layoutGroups->get_length();
HXDLIN(1307)									while(true){
HXLINE(1307)										i1 = (i1 - 1);
HXDLIN(1307)										if (!((i1 > -1))) {
HXLINE(1307)											goto _hx_goto_29;
            										}
HXDLIN(1307)										 ::openfl::text::_internal::TextLayoutGroup lg = _gthis->layoutGroups->get(i1).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1307)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1307)											goto _hx_goto_29;
            										}
HXDLIN(1307)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1307)											continue;
            										}
HXDLIN(1307)										lg->ascent = maxAscent;
HXDLIN(1307)										lg->height = ( (Float)(maxHeightValue) );
            									}
            									_hx_goto_29:;
HXDLIN(1307)									offsetY = (offsetY + maxHeightValue);
HXLINE(1182)									maxAscent = ((Float)0.0);
HXLINE(1183)									maxHeightValue = 0;
HXLINE(1307)									lineIndex = (lineIndex + 1);
HXLINE(1186)									offsetX = ( (Float)(2) );
            								}
HXLINE(1307)								if ((breakIndex <= formatRange->end)) {
HXLINE(1307)									::String text8 = _gthis->text;
HXDLIN(1307)									Float letterSpacing8 = ((Float)0.0);
HXDLIN(1307)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)										letterSpacing8 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1307)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)										_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1307)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1307)									_gthis->_hx___textLayout->letterSpacing = letterSpacing8;
HXDLIN(1307)									bool positions6;
HXDLIN(1307)									if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)										positions6 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1307)										positions6 = true;
            									}
HXDLIN(1307)									_gthis->_hx___textLayout->autoHint = positions6;
HXDLIN(1307)									 ::openfl::text::_internal::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1307)									_gthis9->set_text(text8.substring(placeIndex,breakIndex));
HXDLIN(1307)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)									Float width9 = ((Float)0.0);
HXDLIN(1307)									int _g9 = 0;
HXDLIN(1307)									while((_g9 < positions->length)){
HXLINE(1307)										 ::openfl::text::_internal::GlyphPosition position9 = positions->__get(_g9).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)										_g9 = (_g9 + 1);
HXDLIN(1307)										width9 = (width9 + position9->advance->x);
            									}
HXDLIN(1307)									widthValue = width9;
            								}
            								else {
HXLINE(1307)									int tempIndex3 = placeIndex;
HXDLIN(1307)									int tempRangeEnd4 = formatRange->end;
HXDLIN(1307)									int countRanges3 = 0;
HXLINE(1046)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)									widthValue = ( (Float)(0) );
HXLINE(1307)									while(true){
HXLINE(1307)										if ((tempIndex3 != tempRangeEnd4)) {
HXLINE(1307)											::String text9 = _gthis->text;
HXDLIN(1307)											Float letterSpacing9 = ((Float)0.0);
HXDLIN(1307)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing9 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1307)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1307)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1307)											_gthis->_hx___textLayout->letterSpacing = letterSpacing9;
HXDLIN(1307)											bool _hx_tmp21;
HXDLIN(1307)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)												_hx_tmp21 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1307)												_hx_tmp21 = true;
            											}
HXDLIN(1307)											_gthis->_hx___textLayout->autoHint = _hx_tmp21;
HXDLIN(1307)											 ::openfl::text::_internal::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1307)											_gthis10->set_text(text9.substring(tempIndex3,tempRangeEnd4));
HXDLIN(1307)											::Array< ::Dynamic> tempPositions3 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)											positions = positions->concat(tempPositions3);
            										}
HXLINE(1307)										if ((tempRangeEnd4 != breakIndex)) {
HXLINE(1307)											bool _hx_tmp22;
HXDLIN(1307)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)												rangeIndex = (rangeIndex + 1);
HXDLIN(1307)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)												_hx_tmp22 = true;
            											}
            											else {
HXLINE(1307)												_hx_tmp22 = false;
            											}
HXDLIN(1307)											if (!(_hx_tmp22)) {
HXLINE(1307)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)												goto _hx_goto_31;
            											}
HXLINE(1065)											tempIndex3 = tempRangeEnd4;
HXLINE(1307)											if ((breakIndex < formatRange->end)) {
HXLINE(1307)												tempRangeEnd4 = breakIndex;
            											}
            											else {
HXLINE(1307)												tempRangeEnd4 = formatRange->end;
            											}
HXDLIN(1307)											countRanges3 = (countRanges3 + 1);
            										}
            										else {
HXLINE(1307)											Float width10 = ((Float)0.0);
HXDLIN(1307)											int _g10 = 0;
HXDLIN(1307)											while((_g10 < positions->length)){
HXLINE(1307)												 ::openfl::text::_internal::GlyphPosition position10 = positions->__get(_g10).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)												_g10 = (_g10 + 1);
HXDLIN(1307)												width10 = (width10 + position10->advance->x);
            											}
HXDLIN(1307)											widthValue = width10;
HXDLIN(1307)											goto _hx_goto_31;
            										}
            									}
            									_hx_goto_31:;
HXDLIN(1307)									rangeIndex = (rangeIndex - (countRanges3 + 1));
HXDLIN(1307)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)										rangeIndex = (rangeIndex + 1);
HXDLIN(1307)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
HXLINE(1271)								remainingPositions = positions;
HXLINE(1272)								tempWidth = widthValue;
            							}
            							_hx_goto_17:;
            						}
HXLINE(1307)						{
HXLINE(1307)							if ((breakIndex <= formatRange->end)) {
HXLINE(1307)								::String text10 = _gthis->text;
HXDLIN(1307)								Float letterSpacing10 = ((Float)0.0);
HXDLIN(1307)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)									letterSpacing10 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1307)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)									_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1307)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1307)								_gthis->_hx___textLayout->letterSpacing = letterSpacing10;
HXDLIN(1307)								bool positions7;
HXDLIN(1307)								if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)									positions7 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1307)									positions7 = true;
            								}
HXDLIN(1307)								_gthis->_hx___textLayout->autoHint = positions7;
HXDLIN(1307)								 ::openfl::text::_internal::TextLayout _gthis11 = _gthis->_hx___textLayout;
HXDLIN(1307)								_gthis11->set_text(text10.substring(textIndex,breakIndex));
HXDLIN(1307)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)								Float width11 = ((Float)0.0);
HXDLIN(1307)								int _g11 = 0;
HXDLIN(1307)								while((_g11 < positions->length)){
HXLINE(1307)									 ::openfl::text::_internal::GlyphPosition position11 = positions->__get(_g11).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)									_g11 = (_g11 + 1);
HXDLIN(1307)									width11 = (width11 + position11->advance->x);
            								}
HXDLIN(1307)								widthValue = width11;
HXDLIN(1307)								bool _hx_tmp23;
HXDLIN(1307)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1307)									_hx_tmp23 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1307)									_hx_tmp23 = true;
            								}
HXDLIN(1307)								if (_hx_tmp23) {
HXLINE( 923)									layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXLINE(1307)									_gthis->layoutGroups->push(layoutGroup);
            								}
            								else {
HXLINE(1307)									layoutGroup->format = formatRange->format;
HXDLIN(1307)									layoutGroup->startIndex = textIndex;
HXDLIN(1307)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1307)								layoutGroup->positions = positions;
HXDLIN(1307)								layoutGroup->offsetX = offsetX;
HXDLIN(1307)								layoutGroup->ascent = ascent;
HXDLIN(1307)								layoutGroup->descent = descent;
HXDLIN(1307)								layoutGroup->leading = leading;
HXDLIN(1307)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)								layoutGroup->offsetY = offsetY;
HXDLIN(1307)								layoutGroup->width = widthValue;
HXDLIN(1307)								layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)								offsetX = (offsetX + widthValue);
HXDLIN(1307)								if ((breakIndex == formatRange->end)) {
HXLINE(1108)									layoutGroup = null();
HXLINE(1307)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)										rangeIndex = (rangeIndex + 1);
HXDLIN(1307)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXLINE(1307)									{
HXLINE(1307)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1307)											bool _hx_tmp24;
HXDLIN(1307)											if (hx::IsNotNull( font )) {
HXLINE(1307)												_hx_tmp24 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1307)												_hx_tmp24 = false;
            											}
HXDLIN(1307)											if (_hx_tmp24) {
HXLINE( 945)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 951)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 955)										leading = ( (int)(currentFormat->leading) );
HXLINE( 957)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)										if ((heightValue > maxHeightValue)) {
HXLINE( 961)											maxHeightValue = heightValue;
            										}
HXLINE(1307)										if ((ascent > maxAscent)) {
HXLINE( 966)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1307)								while(true){
HXLINE(1307)									int tempRangeEnd5;
HXDLIN(1307)									if ((breakIndex < formatRange->end)) {
HXLINE(1307)										tempRangeEnd5 = breakIndex;
            									}
            									else {
HXLINE(1307)										tempRangeEnd5 = formatRange->end;
            									}
HXDLIN(1307)									if ((textIndex != tempRangeEnd5)) {
HXLINE(1307)										::String text11 = _gthis->text;
HXDLIN(1307)										Float letterSpacing11 = ((Float)0.0);
HXDLIN(1307)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing11 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1307)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1307)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1307)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1307)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1307)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->letterSpacing = letterSpacing11;
HXDLIN(1307)										bool positions8;
HXDLIN(1307)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1307)											positions8 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1307)											positions8 = true;
            										}
HXDLIN(1307)										_gthis->_hx___textLayout->autoHint = positions8;
HXDLIN(1307)										 ::openfl::text::_internal::TextLayout _gthis12 = _gthis->_hx___textLayout;
HXDLIN(1307)										_gthis12->set_text(text11.substring(textIndex,tempRangeEnd5));
HXDLIN(1307)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1307)										Float width12 = ((Float)0.0);
HXDLIN(1307)										int _g12 = 0;
HXDLIN(1307)										while((_g12 < positions->length)){
HXLINE(1307)											 ::openfl::text::_internal::GlyphPosition position12 = positions->__get(_g12).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1307)											_g12 = (_g12 + 1);
HXDLIN(1307)											width12 = (width12 + position12->advance->x);
            										}
HXDLIN(1307)										widthValue = width12;
HXDLIN(1307)										bool _hx_tmp25;
HXDLIN(1307)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1307)											_hx_tmp25 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1307)											_hx_tmp25 = true;
            										}
HXDLIN(1307)										if (_hx_tmp25) {
HXLINE( 923)											layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd5);
HXLINE(1307)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1307)											layoutGroup->format = formatRange->format;
HXDLIN(1307)											layoutGroup->startIndex = textIndex;
HXDLIN(1307)											layoutGroup->endIndex = tempRangeEnd5;
            										}
HXDLIN(1307)										layoutGroup->positions = positions;
HXDLIN(1307)										layoutGroup->offsetX = offsetX;
HXDLIN(1307)										layoutGroup->ascent = ascent;
HXDLIN(1307)										layoutGroup->descent = descent;
HXDLIN(1307)										layoutGroup->leading = leading;
HXDLIN(1307)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1307)										layoutGroup->offsetY = offsetY;
HXDLIN(1307)										layoutGroup->width = widthValue;
HXDLIN(1307)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1307)										offsetX = (offsetX + widthValue);
HXLINE(1140)										textIndex = tempRangeEnd5;
            									}
HXLINE(1307)									if ((tempRangeEnd5 == formatRange->end)) {
HXLINE(1143)										layoutGroup = null();
            									}
HXLINE(1307)									if ((tempRangeEnd5 == breakIndex)) {
HXLINE(1307)										goto _hx_goto_34;
            									}
HXDLIN(1307)									bool _hx_tmp26;
HXDLIN(1307)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1307)										rangeIndex = (rangeIndex + 1);
HXDLIN(1307)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1307)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1307)										_hx_tmp26 = true;
            									}
            									else {
HXLINE(1307)										_hx_tmp26 = false;
            									}
HXDLIN(1307)									if (!(_hx_tmp26)) {
HXLINE(1307)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1307)										goto _hx_goto_34;
            									}
HXDLIN(1307)									{
HXLINE(1307)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)											ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)											descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            										}
            										else {
HXLINE(1307)											bool _hx_tmp27;
HXDLIN(1307)											if (hx::IsNotNull( font )) {
HXLINE(1307)												_hx_tmp27 = (font->unitsPerEM != 0);
            											}
            											else {
HXLINE(1307)												_hx_tmp27 = false;
            											}
HXDLIN(1307)											if (_hx_tmp27) {
HXLINE( 945)												ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)												descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            											}
            											else {
HXLINE( 951)												ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)												descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            											}
            										}
HXLINE( 955)										leading = ( (int)(currentFormat->leading) );
HXLINE( 957)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1307)										if ((heightValue > maxHeightValue)) {
HXLINE( 961)											maxHeightValue = heightValue;
            										}
HXLINE(1307)										if ((ascent > maxAscent)) {
HXLINE( 966)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_34:;
            							}
HXLINE(1157)							textIndex = breakIndex;
            						}
            					}
HXLINE(1309)					layoutGroup = null();
            				}
            				else {
HXLINE(1311)					bool _hx_tmp28;
HXDLIN(1311)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1311)						_hx_tmp28 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1311)						_hx_tmp28 = false;
            					}
HXDLIN(1311)					if (_hx_tmp28) {
HXLINE(1314)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1316)							 ::openfl::text::_internal::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1316)							int index = (layoutGroup->positions->length - 1);
HXDLIN(1316)							Float _hx_tmp29;
HXDLIN(1316)							bool _hx_tmp30;
HXDLIN(1316)							if ((index >= 0)) {
HXLINE(1316)								_hx_tmp30 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1316)								_hx_tmp30 = false;
            							}
HXDLIN(1316)							if (_hx_tmp30) {
HXLINE(1316)								_hx_tmp29 = layoutGroup->positions->__get(index).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1316)								_hx_tmp29 = ( (Float)(0) );
            							}
HXDLIN(1316)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp29);
            						}
HXLINE(1319)						layoutGroup = null();
            					}
            				}
HXLINE(1323)				if ((formatRange->end == breakIndex)) {
HXLINE(1325)					if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1325)						rangeIndex = (rangeIndex + 1);
HXDLIN(1325)						formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1325)						currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)						font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1326)					{
HXLINE(1326)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1326)							bool _hx_tmp31;
HXDLIN(1326)							if (hx::IsNotNull( font )) {
HXLINE(1326)								_hx_tmp31 = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1326)								_hx_tmp31 = false;
            							}
HXDLIN(1326)							if (_hx_tmp31) {
HXLINE( 945)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE( 951)								ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXLINE( 955)						leading = ( (int)(currentFormat->leading) );
HXLINE( 957)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1326)						if ((heightValue > maxHeightValue)) {
HXLINE( 961)							maxHeightValue = heightValue;
            						}
HXLINE(1326)						if ((ascent > maxAscent)) {
HXLINE( 966)							maxAscent = ascent;
            						}
            					}
            				}
HXLINE(1329)				{
HXLINE(1329)					{
HXLINE(1329)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)							ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)							descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            						}
            						else {
HXLINE(1329)							bool _hx_tmp32;
HXDLIN(1329)							if (hx::IsNotNull( font )) {
HXLINE(1329)								_hx_tmp32 = (font->unitsPerEM != 0);
            							}
            							else {
HXLINE(1329)								_hx_tmp32 = false;
            							}
HXDLIN(1329)							if (_hx_tmp32) {
HXLINE( 945)								ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)								descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            							}
            							else {
HXLINE( 951)								ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)								descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            							}
            						}
HXLINE( 955)						leading = ( (int)(currentFormat->leading) );
HXLINE( 957)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1329)						if ((heightValue > maxHeightValue)) {
HXLINE( 961)							maxHeightValue = heightValue;
            						}
HXLINE(1329)						if ((ascent > maxAscent)) {
HXLINE( 966)							maxAscent = ascent;
            						}
            					}
HXLINE(1329)					int i2 = _gthis->layoutGroups->get_length();
HXDLIN(1329)					while(true){
HXLINE(1329)						i2 = (i2 - 1);
HXDLIN(1329)						if (!((i2 > -1))) {
HXLINE(1329)							goto _hx_goto_36;
            						}
HXDLIN(1329)						 ::openfl::text::_internal::TextLayoutGroup lg1 = _gthis->layoutGroups->get(i2).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1329)						if ((lg1->lineIndex < lineIndex)) {
HXLINE(1329)							goto _hx_goto_36;
            						}
HXDLIN(1329)						if ((lg1->lineIndex > lineIndex)) {
HXLINE(1329)							continue;
            						}
HXDLIN(1329)						lg1->ascent = maxAscent;
HXDLIN(1329)						lg1->height = ( (Float)(maxHeightValue) );
            					}
            					_hx_goto_36:;
HXDLIN(1329)					offsetY = (offsetY + maxHeightValue);
HXLINE(1182)					maxAscent = ((Float)0.0);
HXLINE(1183)					maxHeightValue = 0;
HXLINE(1329)					lineIndex = (lineIndex + 1);
HXLINE(1186)					offsetX = ( (Float)(2) );
            				}
HXLINE(1331)				textIndex = (breakIndex + 1);
HXLINE(1332)				previousBreakIndex = breakIndex;
HXLINE(1333)				breakIndex = this->getLineBreakIndex(textIndex);
HXLINE(1335)				{
HXLINE(1335)					if (hx::IsNotNull( currentFormat->align )) {
HXLINE( 975)						align = currentFormat->align;
            					}
HXLINE(1335)					bool _hx_tmp33 = hx::IsNotNull( currentFormat->blockIndent );
HXDLIN(1335)					bool _hx_tmp34 = hx::IsNotNull( currentFormat->bullet );
HXDLIN(1335)					bool _hx_tmp35 = hx::IsNotNull( currentFormat->indent );
HXDLIN(1335)					if (hx::IsNotNull( currentFormat->leftMargin )) {
HXLINE( 995)						leftMargin = ( (int)(currentFormat->leftMargin) );
            					}
HXLINE(1335)					if (hx::IsNotNull( currentFormat->rightMargin )) {
HXLINE(1000)						rightMargin = ( (int)(currentFormat->rightMargin) );
            					}
HXLINE(1335)					bool _hx_tmp36 = hx::IsNotNull( currentFormat->tabStops );
            				}
            			}
            			else {
HXLINE(1337)				if ((spaceIndex > -1)) {
HXLINE(1341)					bool _hx_tmp37;
HXDLIN(1341)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1341)						_hx_tmp37 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1341)						_hx_tmp37 = false;
            					}
HXDLIN(1341)					if (_hx_tmp37) {
HXLINE(1343)						layoutGroup = null();
            					}
HXLINE(1346)					wrap = false;
HXLINE(1348)					while((textIndex < this->text.length)){
HXLINE(1352)						int endIndex2 = -1;
HXLINE(1354)						if ((spaceIndex == -1)) {
HXLINE(1356)							endIndex2 = breakIndex;
            						}
            						else {
HXLINE(1360)							endIndex2 = (spaceIndex + 1);
HXLINE(1362)							bool _hx_tmp38;
HXDLIN(1362)							if ((breakIndex > -1)) {
HXLINE(1362)								_hx_tmp38 = (breakIndex < endIndex2);
            							}
            							else {
HXLINE(1362)								_hx_tmp38 = false;
            							}
HXDLIN(1362)							if (_hx_tmp38) {
HXLINE(1364)								endIndex2 = breakIndex;
            							}
            						}
HXLINE(1368)						if ((endIndex2 == -1)) {
HXLINE(1370)							endIndex2 = this->text.length;
            						}
HXLINE(1373)						if ((endIndex2 <= formatRange->end)) {
HXLINE(1373)							::String text12 = _gthis->text;
HXDLIN(1373)							Float letterSpacing12 = ((Float)0.0);
HXDLIN(1373)							if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)								letterSpacing12 = ( (Float)(formatRange->format->letterSpacing) );
            							}
HXLINE(1373)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1373)								_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1373)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1373)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1373)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1373)								_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            							}
HXDLIN(1373)							_gthis->_hx___textLayout->letterSpacing = letterSpacing12;
HXDLIN(1373)							bool positions9;
HXDLIN(1373)							if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1373)								positions9 = (_gthis->sharpness < 400);
            							}
            							else {
HXLINE(1373)								positions9 = true;
            							}
HXDLIN(1373)							_gthis->_hx___textLayout->autoHint = positions9;
HXDLIN(1373)							 ::openfl::text::_internal::TextLayout _gthis13 = _gthis->_hx___textLayout;
HXDLIN(1373)							_gthis13->set_text(text12.substring(textIndex,endIndex2));
HXDLIN(1373)							positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1373)							Float width13 = ((Float)0.0);
HXDLIN(1373)							int _g13 = 0;
HXDLIN(1373)							while((_g13 < positions->length)){
HXLINE(1373)								 ::openfl::text::_internal::GlyphPosition position13 = positions->__get(_g13).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1373)								_g13 = (_g13 + 1);
HXDLIN(1373)								width13 = (width13 + position13->advance->x);
            							}
HXDLIN(1373)							widthValue = width13;
            						}
            						else {
HXLINE(1373)							int tempIndex4 = textIndex;
HXDLIN(1373)							int tempRangeEnd6 = formatRange->end;
HXDLIN(1373)							int countRanges4 = 0;
HXLINE(1046)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)							widthValue = ( (Float)(0) );
HXLINE(1373)							while(true){
HXLINE(1373)								if ((tempIndex4 != tempRangeEnd6)) {
HXLINE(1373)									::String text13 = _gthis->text;
HXDLIN(1373)									Float letterSpacing13 = ((Float)0.0);
HXDLIN(1373)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)										letterSpacing13 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1373)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1373)										_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1373)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1373)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1373)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1373)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1373)									_gthis->_hx___textLayout->letterSpacing = letterSpacing13;
HXDLIN(1373)									bool _hx_tmp39;
HXDLIN(1373)									if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1373)										_hx_tmp39 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1373)										_hx_tmp39 = true;
            									}
HXDLIN(1373)									_gthis->_hx___textLayout->autoHint = _hx_tmp39;
HXDLIN(1373)									 ::openfl::text::_internal::TextLayout _gthis14 = _gthis->_hx___textLayout;
HXDLIN(1373)									_gthis14->set_text(text13.substring(tempIndex4,tempRangeEnd6));
HXDLIN(1373)									::Array< ::Dynamic> tempPositions4 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)									positions = positions->concat(tempPositions4);
            								}
HXLINE(1373)								if ((tempRangeEnd6 != endIndex2)) {
HXLINE(1373)									bool _hx_tmp40;
HXDLIN(1373)									if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1373)										rangeIndex = (rangeIndex + 1);
HXDLIN(1373)										formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1373)										currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)										font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1373)										_hx_tmp40 = true;
            									}
            									else {
HXLINE(1373)										_hx_tmp40 = false;
            									}
HXDLIN(1373)									if (!(_hx_tmp40)) {
HXLINE(1373)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1373)										goto _hx_goto_39;
            									}
HXLINE(1065)									tempIndex4 = tempRangeEnd6;
HXLINE(1373)									if ((endIndex2 < formatRange->end)) {
HXLINE(1373)										tempRangeEnd6 = endIndex2;
            									}
            									else {
HXLINE(1373)										tempRangeEnd6 = formatRange->end;
            									}
HXDLIN(1373)									countRanges4 = (countRanges4 + 1);
            								}
            								else {
HXLINE(1373)									Float width14 = ((Float)0.0);
HXDLIN(1373)									int _g14 = 0;
HXDLIN(1373)									while((_g14 < positions->length)){
HXLINE(1373)										 ::openfl::text::_internal::GlyphPosition position14 = positions->__get(_g14).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1373)										_g14 = (_g14 + 1);
HXDLIN(1373)										width14 = (width14 + position14->advance->x);
            									}
HXDLIN(1373)									widthValue = width14;
HXDLIN(1373)									goto _hx_goto_39;
            								}
            							}
            							_hx_goto_39:;
HXDLIN(1373)							rangeIndex = (rangeIndex - (countRanges4 + 1));
HXDLIN(1373)							if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1373)								rangeIndex = (rangeIndex + 1);
HXDLIN(1373)								formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1373)								currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)								font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
HXLINE(1375)						if (hx::IsEq( align,2 )) {
HXLINE(1377)							bool _hx_tmp41;
HXDLIN(1377)							if ((positions->length > 0)) {
HXLINE(1377)								_hx_tmp41 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1377)								_hx_tmp41 = false;
            							}
HXDLIN(1377)							if (_hx_tmp41) {
HXLINE(1380)								textIndex = (textIndex + 1);
HXLINE(1382)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
HXLINE(1383)								widthValue = (widthValue - spaceWidth);
HXLINE(1384)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1387)							bool _hx_tmp42;
HXDLIN(1387)							if ((positions->length > 0)) {
HXLINE(1387)								_hx_tmp42 = (endIndex2 == (spaceIndex + 1));
            							}
            							else {
HXLINE(1387)								_hx_tmp42 = false;
            							}
HXDLIN(1387)							if (_hx_tmp42) {
HXLINE(1390)								endIndex2 = (endIndex2 - 1);
HXLINE(1392)								Float spaceWidth1 = positions->pop().StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
HXLINE(1393)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1397)						if (this->wordWrap) {
HXLINE(1399)							if (((offsetX + widthValue) > (this->width - ( (Float)(2) )))) {
HXLINE(1401)								wrap = true;
HXLINE(1403)								bool _hx_tmp43;
HXDLIN(1403)								if ((positions->length > 0)) {
HXLINE(1403)									_hx_tmp43 = (endIndex2 == (spaceIndex + 1));
            								}
            								else {
HXLINE(1403)									_hx_tmp43 = false;
            								}
HXDLIN(1403)								if (_hx_tmp43) {
HXLINE(1408)									 ::openfl::text::_internal::GlyphPosition lastPosition = positions->__get((positions->length - 1)).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXLINE(1409)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1411)									if ((((offsetX + widthValue) - spaceWidth2) <= (this->width - ( (Float)(2) )))) {
HXLINE(1413)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1419)						if (wrap) {
HXLINE(1421)							bool _hx_tmp44;
HXDLIN(1421)							if (hx::IsNotEq( align,2 )) {
HXLINE(1421)								if (hx::IsNull( layoutGroup )) {
HXLINE(1421)									_hx_tmp44 = (this->layoutGroups->get_length() > 0);
            								}
            								else {
HXLINE(1421)									_hx_tmp44 = true;
            								}
            							}
            							else {
HXLINE(1421)								_hx_tmp44 = false;
            							}
HXDLIN(1421)							if (_hx_tmp44) {
HXLINE(1423)								 ::openfl::text::_internal::TextLayoutGroup previous = layoutGroup;
HXLINE(1424)								if (hx::IsNull( previous )) {
HXLINE(1426)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1426)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
            								}
HXLINE(1430)								 ::openfl::text::_internal::TextLayoutGroup previous1 = previous;
HXDLIN(1430)								int index1 = (previous->positions->length - 1);
HXDLIN(1430)								Float _hx_tmp45;
HXDLIN(1430)								bool _hx_tmp46;
HXDLIN(1430)								if ((index1 >= 0)) {
HXLINE(1430)									_hx_tmp46 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1430)									_hx_tmp46 = false;
            								}
HXDLIN(1430)								if (_hx_tmp46) {
HXLINE(1430)									_hx_tmp45 = previous->positions->__get(index1).StaticCast<  ::openfl::text::_internal::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1430)									_hx_tmp45 = ( (Float)(0) );
            								}
HXDLIN(1430)								previous1->width = (previous1->width - _hx_tmp45);
HXLINE(1431)								previous->endIndex--;
            							}
HXLINE(1434)							int i3 = (this->layoutGroups->get_length() - 1);
HXLINE(1435)							int offsetCount = 0;
HXLINE(1437)							while(true){
HXLINE(1439)								layoutGroup = this->layoutGroups->get(i3).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1441)								bool _hx_tmp47;
HXDLIN(1441)								if ((i3 > 0)) {
HXLINE(1441)									_hx_tmp47 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1441)									_hx_tmp47 = false;
            								}
HXDLIN(1441)								if (_hx_tmp47) {
HXLINE(1443)									offsetCount = (offsetCount + 1);
            								}
            								else {
HXLINE(1447)									goto _hx_goto_41;
            								}
HXLINE(1450)								i3 = (i3 - 1);
            							}
            							_hx_goto_41:;
HXLINE(1453)							if ((textIndex == (previousSpaceIndex + 1))) {
HXLINE(1455)								{
HXLINE(1455)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)										ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)										descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            									}
            									else {
HXLINE(1455)										bool _hx_tmp48;
HXDLIN(1455)										if (hx::IsNotNull( font )) {
HXLINE(1455)											_hx_tmp48 = (font->unitsPerEM != 0);
            										}
            										else {
HXLINE(1455)											_hx_tmp48 = false;
            										}
HXDLIN(1455)										if (_hx_tmp48) {
HXLINE( 945)											ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)											descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            										}
            										else {
HXLINE( 951)											ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)											descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            										}
            									}
HXLINE( 955)									leading = ( (int)(currentFormat->leading) );
HXLINE( 957)									heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1455)									if ((heightValue > maxHeightValue)) {
HXLINE( 961)										maxHeightValue = heightValue;
            									}
HXLINE(1455)									if ((ascent > maxAscent)) {
HXLINE( 966)										maxAscent = ascent;
            									}
            								}
HXLINE(1455)								int i4 = _gthis->layoutGroups->get_length();
HXDLIN(1455)								while(true){
HXLINE(1455)									i4 = (i4 - 1);
HXDLIN(1455)									if (!((i4 > -1))) {
HXLINE(1455)										goto _hx_goto_42;
            									}
HXDLIN(1455)									 ::openfl::text::_internal::TextLayoutGroup lg2 = _gthis->layoutGroups->get(i4).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1455)									if ((lg2->lineIndex < lineIndex)) {
HXLINE(1455)										goto _hx_goto_42;
            									}
HXDLIN(1455)									if ((lg2->lineIndex > lineIndex)) {
HXLINE(1455)										continue;
            									}
HXDLIN(1455)									lg2->ascent = maxAscent;
HXDLIN(1455)									lg2->height = ( (Float)(maxHeightValue) );
            								}
            								_hx_goto_42:;
HXDLIN(1455)								offsetY = (offsetY + maxHeightValue);
HXLINE(1182)								maxAscent = ((Float)0.0);
HXLINE(1183)								maxHeightValue = 0;
HXLINE(1455)								lineIndex = (lineIndex + 1);
HXLINE(1186)								offsetX = ( (Float)(2) );
            							}
HXLINE(1458)							offsetX = ( (Float)(2) );
HXLINE(1460)							if ((offsetCount > 0)) {
HXLINE(1462)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1462)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >()->offsetX;
HXLINE(1464)								{
HXLINE(1464)									int _g15 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1464)									int _g16 = this->layoutGroups->get_length();
HXDLIN(1464)									while((_g15 < _g16)){
HXLINE(1464)										_g15 = (_g15 + 1);
HXDLIN(1464)										int i5 = (_g15 - 1);
HXLINE(1466)										layoutGroup = this->layoutGroups->get(i5).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1467)										 ::openfl::text::_internal::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1467)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1468)										layoutGroup->offsetY = offsetY;
HXLINE(1469)										layoutGroup->lineIndex = lineIndex;
HXLINE(1470)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1474)							{
HXLINE(1474)								bool _hx_tmp49;
HXDLIN(1474)								if ((_gthis->width >= 4)) {
HXLINE(1474)									_hx_tmp49 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1474)									_hx_tmp49 = false;
            								}
HXDLIN(1474)								if (_hx_tmp49) {
HXLINE(1474)									::Array< ::Dynamic> remainingPositions1 = positions;
HXDLIN(1474)									int i6;
HXDLIN(1474)									int bufferCount1;
HXDLIN(1474)									int placeIndex1;
HXDLIN(1474)									Float positionWidth1;
HXDLIN(1474)									 ::openfl::text::_internal::GlyphPosition currentPosition1;
HXDLIN(1474)									Float width15 = ((Float)0.0);
HXDLIN(1474)									{
HXLINE(1474)										int _g17 = 0;
HXDLIN(1474)										while((_g17 < remainingPositions1->length)){
HXLINE(1474)											 ::openfl::text::_internal::GlyphPosition position15 = remainingPositions1->__get(_g17).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)											_g17 = (_g17 + 1);
HXDLIN(1474)											width15 = (width15 + position15->advance->x);
            										}
            									}
HXDLIN(1474)									Float tempWidth1 = width15;
HXDLIN(1474)									while(((offsetX + tempWidth1) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)										bufferCount1 = 0;
HXDLIN(1202)										i6 = bufferCount1;
HXLINE(1203)										positionWidth1 = ((Float)0.0);
HXLINE(1474)										while(((offsetX + positionWidth1) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)											currentPosition1 = remainingPositions1->__get(i6).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXLINE(1474)											if ((currentPosition1->advance->x == ((Float)0.0))) {
HXLINE(1474)												i6 = (i6 + 1);
HXDLIN(1474)												bufferCount1 = (bufferCount1 + 1);
            											}
            											else {
HXLINE(1474)												positionWidth1 = (positionWidth1 + currentPosition1->advance->x);
HXDLIN(1474)												i6 = (i6 + 1);
            											}
            										}
HXDLIN(1474)										if ((positionWidth1 == ((Float)0.0))) {
HXLINE(1474)											goto _hx_goto_45;
            										}
            										else {
HXLINE(1474)											bool _hx_tmp50;
HXDLIN(1474)											if ((i6 < 2)) {
HXLINE(1474)												_hx_tmp50 = ((positionWidth1 + offsetX) > (_gthis->width - ( (Float)(2) )));
            											}
            											else {
HXLINE(1474)												_hx_tmp50 = false;
            											}
HXDLIN(1474)											if (_hx_tmp50) {
HXLINE(1474)												if ((((textIndex + i6) - bufferCount1) == endIndex2)) {
HXLINE(1474)													goto _hx_goto_45;
            												}
            											}
            											else {
HXLINE(1474)												while(((offsetX + positionWidth1) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1474)													i6 = (i6 - 1);
HXDLIN(1474)													if (((i6 - bufferCount1) > 0)) {
HXLINE(1474)														{
HXLINE(1474)															int endIndex3 = ((textIndex + i6) - bufferCount1);
HXDLIN(1474)															if ((endIndex3 <= formatRange->end)) {
HXLINE(1474)																::String text14 = _gthis->text;
HXDLIN(1474)																Float letterSpacing14 = ((Float)0.0);
HXDLIN(1474)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing14 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1474)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->letterSpacing = letterSpacing14;
HXDLIN(1474)																bool positions10;
HXDLIN(1474)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																	positions10 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1474)																	positions10 = true;
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->autoHint = positions10;
HXDLIN(1474)																 ::openfl::text::_internal::TextLayout _gthis15 = _gthis->_hx___textLayout;
HXDLIN(1474)																_gthis15->set_text(text14.substring(textIndex,endIndex3));
HXDLIN(1474)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)																Float width16 = ((Float)0.0);
HXDLIN(1474)																int _g18 = 0;
HXDLIN(1474)																while((_g18 < positions->length)){
HXLINE(1474)																	 ::openfl::text::_internal::GlyphPosition position16 = positions->__get(_g18).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)																	_g18 = (_g18 + 1);
HXDLIN(1474)																	width16 = (width16 + position16->advance->x);
            																}
HXDLIN(1474)																widthValue = width16;
            															}
            															else {
HXLINE(1474)																int tempIndex5 = textIndex;
HXDLIN(1474)																int tempRangeEnd7 = formatRange->end;
HXDLIN(1474)																int countRanges5 = 0;
HXLINE(1046)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																widthValue = ( (Float)(0) );
HXLINE(1474)																while(true){
HXLINE(1474)																	if ((tempIndex5 != tempRangeEnd7)) {
HXLINE(1474)																		::String text15 = _gthis->text;
HXDLIN(1474)																		Float letterSpacing15 = ((Float)0.0);
HXDLIN(1474)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																			letterSpacing15 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXLINE(1474)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																			_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing15;
HXDLIN(1474)																		bool _hx_tmp51;
HXDLIN(1474)																		if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																			_hx_tmp51 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp51 = true;
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->autoHint = _hx_tmp51;
HXDLIN(1474)																		 ::openfl::text::_internal::TextLayout _gthis16 = _gthis->_hx___textLayout;
HXDLIN(1474)																		_gthis16->set_text(text15.substring(tempIndex5,tempRangeEnd7));
HXDLIN(1474)																		::Array< ::Dynamic> tempPositions5 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																		positions = positions->concat(tempPositions5);
            																	}
HXLINE(1474)																	if ((tempRangeEnd7 != endIndex3)) {
HXLINE(1474)																		bool _hx_tmp52;
HXDLIN(1474)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)																			currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)																			_hx_tmp52 = true;
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp52 = false;
            																		}
HXDLIN(1474)																		if (!(_hx_tmp52)) {
HXLINE(1474)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)																			goto _hx_goto_49;
            																		}
HXLINE(1065)																		tempIndex5 = tempRangeEnd7;
HXLINE(1474)																		if ((endIndex3 < formatRange->end)) {
HXLINE(1474)																			tempRangeEnd7 = endIndex3;
            																		}
            																		else {
HXLINE(1474)																			tempRangeEnd7 = formatRange->end;
            																		}
HXDLIN(1474)																		countRanges5 = (countRanges5 + 1);
            																	}
            																	else {
HXLINE(1474)																		Float width17 = ((Float)0.0);
HXDLIN(1474)																		int _g19 = 0;
HXDLIN(1474)																		while((_g19 < positions->length)){
HXLINE(1474)																			 ::openfl::text::_internal::GlyphPosition position17 = positions->__get(_g19).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)																			_g19 = (_g19 + 1);
HXDLIN(1474)																			width17 = (width17 + position17->advance->x);
            																		}
HXDLIN(1474)																		widthValue = width17;
HXDLIN(1474)																		goto _hx_goto_49;
            																	}
            																}
            																_hx_goto_49:;
HXDLIN(1474)																rangeIndex = (rangeIndex - (countRanges5 + 1));
HXDLIN(1474)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXLINE(1250)														positionWidth1 = widthValue;
            													}
            													else {
HXLINE(1256)														i6 = 1;
HXLINE(1257)														bufferCount1 = 0;
HXLINE(1474)														{
HXLINE(1474)															int endIndex4 = (textIndex + 1);
HXDLIN(1474)															if ((endIndex4 <= formatRange->end)) {
HXLINE(1474)																::String text16 = _gthis->text;
HXDLIN(1474)																Float letterSpacing16 = ((Float)0.0);
HXDLIN(1474)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																	letterSpacing16 = ( (Float)(formatRange->format->letterSpacing) );
            																}
HXLINE(1474)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																	_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																	_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->letterSpacing = letterSpacing16;
HXDLIN(1474)																bool positions11;
HXDLIN(1474)																if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																	positions11 = (_gthis->sharpness < 400);
            																}
            																else {
HXLINE(1474)																	positions11 = true;
            																}
HXDLIN(1474)																_gthis->_hx___textLayout->autoHint = positions11;
HXDLIN(1474)																 ::openfl::text::_internal::TextLayout _gthis17 = _gthis->_hx___textLayout;
HXDLIN(1474)																_gthis17->set_text(text16.substring(textIndex,endIndex4));
HXDLIN(1474)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)																Float width18 = ((Float)0.0);
HXDLIN(1474)																int _g20 = 0;
HXDLIN(1474)																while((_g20 < positions->length)){
HXLINE(1474)																	 ::openfl::text::_internal::GlyphPosition position18 = positions->__get(_g20).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)																	_g20 = (_g20 + 1);
HXDLIN(1474)																	width18 = (width18 + position18->advance->x);
            																}
HXDLIN(1474)																widthValue = width18;
            															}
            															else {
HXLINE(1474)																int tempIndex6 = textIndex;
HXDLIN(1474)																int tempRangeEnd8 = formatRange->end;
HXDLIN(1474)																int countRanges6 = 0;
HXLINE(1046)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																widthValue = ( (Float)(0) );
HXLINE(1474)																while(true){
HXLINE(1474)																	if ((tempIndex6 != tempRangeEnd8)) {
HXLINE(1474)																		::String text17 = _gthis->text;
HXDLIN(1474)																		Float letterSpacing17 = ((Float)0.0);
HXDLIN(1474)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																			letterSpacing17 = ( (Float)(formatRange->format->letterSpacing) );
            																		}
HXLINE(1474)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)																			_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)																			_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing17;
HXDLIN(1474)																		bool _hx_tmp53;
HXDLIN(1474)																		if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)																			_hx_tmp53 = (_gthis->sharpness < 400);
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp53 = true;
            																		}
HXDLIN(1474)																		_gthis->_hx___textLayout->autoHint = _hx_tmp53;
HXDLIN(1474)																		 ::openfl::text::_internal::TextLayout _gthis18 = _gthis->_hx___textLayout;
HXDLIN(1474)																		_gthis18->set_text(text17.substring(tempIndex6,tempRangeEnd8));
HXDLIN(1474)																		::Array< ::Dynamic> tempPositions6 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																		positions = positions->concat(tempPositions6);
            																	}
HXLINE(1474)																	if ((tempRangeEnd8 != endIndex4)) {
HXLINE(1474)																		bool _hx_tmp54;
HXDLIN(1474)																		if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																			rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																			formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)																			currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																			font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)																			_hx_tmp54 = true;
            																		}
            																		else {
HXLINE(1474)																			_hx_tmp54 = false;
            																		}
HXDLIN(1474)																		if (!(_hx_tmp54)) {
HXLINE(1474)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)																			goto _hx_goto_52;
            																		}
HXLINE(1065)																		tempIndex6 = tempRangeEnd8;
HXLINE(1474)																		if ((endIndex4 < formatRange->end)) {
HXLINE(1474)																			tempRangeEnd8 = endIndex4;
            																		}
            																		else {
HXLINE(1474)																			tempRangeEnd8 = formatRange->end;
            																		}
HXDLIN(1474)																		countRanges6 = (countRanges6 + 1);
            																	}
            																	else {
HXLINE(1474)																		Float width19 = ((Float)0.0);
HXDLIN(1474)																		int _g21 = 0;
HXDLIN(1474)																		while((_g21 < positions->length)){
HXLINE(1474)																			 ::openfl::text::_internal::GlyphPosition position19 = positions->__get(_g21).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)																			_g21 = (_g21 + 1);
HXDLIN(1474)																			width19 = (width19 + position19->advance->x);
            																		}
HXDLIN(1474)																		widthValue = width19;
HXDLIN(1474)																		goto _hx_goto_52;
            																	}
            																}
            																_hx_goto_52:;
HXDLIN(1474)																rangeIndex = (rangeIndex - (countRanges6 + 1));
HXDLIN(1474)																if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)																	rangeIndex = (rangeIndex + 1);
HXDLIN(1474)																	formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)																	currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																	font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXLINE(1260)														positionWidth1 = ( (Float)(0) );
            													}
            												}
            											}
            										}
HXLINE(1265)										placeIndex1 = ((textIndex + i6) - bufferCount1);
HXLINE(1474)										{
HXLINE(1474)											if ((placeIndex1 <= formatRange->end)) {
HXLINE(1474)												::String text18 = _gthis->text;
HXDLIN(1474)												Float letterSpacing18 = ((Float)0.0);
HXDLIN(1474)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing18 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1474)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->letterSpacing = letterSpacing18;
HXDLIN(1474)												bool positions12;
HXDLIN(1474)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)													positions12 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1474)													positions12 = true;
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->autoHint = positions12;
HXDLIN(1474)												 ::openfl::text::_internal::TextLayout _gthis19 = _gthis->_hx___textLayout;
HXDLIN(1474)												_gthis19->set_text(text18.substring(textIndex,placeIndex1));
HXDLIN(1474)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)												Float width20 = ((Float)0.0);
HXDLIN(1474)												int _g22 = 0;
HXDLIN(1474)												while((_g22 < positions->length)){
HXLINE(1474)													 ::openfl::text::_internal::GlyphPosition position20 = positions->__get(_g22).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)													_g22 = (_g22 + 1);
HXDLIN(1474)													width20 = (width20 + position20->advance->x);
            												}
HXDLIN(1474)												widthValue = width20;
HXDLIN(1474)												bool _hx_tmp55;
HXDLIN(1474)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1474)													_hx_tmp55 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1474)													_hx_tmp55 = true;
            												}
HXDLIN(1474)												if (_hx_tmp55) {
HXLINE( 923)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex1);
HXLINE(1474)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1474)													layoutGroup->format = formatRange->format;
HXDLIN(1474)													layoutGroup->startIndex = textIndex;
HXDLIN(1474)													layoutGroup->endIndex = placeIndex1;
            												}
HXDLIN(1474)												layoutGroup->positions = positions;
HXDLIN(1474)												layoutGroup->offsetX = offsetX;
HXDLIN(1474)												layoutGroup->ascent = ascent;
HXDLIN(1474)												layoutGroup->descent = descent;
HXDLIN(1474)												layoutGroup->leading = leading;
HXDLIN(1474)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)												layoutGroup->offsetY = offsetY;
HXDLIN(1474)												layoutGroup->width = widthValue;
HXDLIN(1474)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)												offsetX = (offsetX + widthValue);
HXDLIN(1474)												if ((placeIndex1 == formatRange->end)) {
HXLINE(1108)													layoutGroup = null();
HXLINE(1474)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)														rangeIndex = (rangeIndex + 1);
HXDLIN(1474)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXLINE(1474)													{
HXLINE(1474)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1474)															bool _hx_tmp56;
HXDLIN(1474)															if (hx::IsNotNull( font )) {
HXLINE(1474)																_hx_tmp56 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1474)																_hx_tmp56 = false;
            															}
HXDLIN(1474)															if (_hx_tmp56) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1474)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1474)												while(true){
HXLINE(1474)													int tempRangeEnd9;
HXDLIN(1474)													if ((placeIndex1 < formatRange->end)) {
HXLINE(1474)														tempRangeEnd9 = placeIndex1;
            													}
            													else {
HXLINE(1474)														tempRangeEnd9 = formatRange->end;
            													}
HXDLIN(1474)													if ((textIndex != tempRangeEnd9)) {
HXLINE(1474)														::String text19 = _gthis->text;
HXDLIN(1474)														Float letterSpacing19 = ((Float)0.0);
HXDLIN(1474)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing19 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1474)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1474)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1474)														_gthis->_hx___textLayout->letterSpacing = letterSpacing19;
HXDLIN(1474)														bool positions13;
HXDLIN(1474)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)															positions13 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1474)															positions13 = true;
            														}
HXDLIN(1474)														_gthis->_hx___textLayout->autoHint = positions13;
HXDLIN(1474)														 ::openfl::text::_internal::TextLayout _gthis20 = _gthis->_hx___textLayout;
HXDLIN(1474)														_gthis20->set_text(text19.substring(textIndex,tempRangeEnd9));
HXDLIN(1474)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)														Float width21 = ((Float)0.0);
HXDLIN(1474)														int _g23 = 0;
HXDLIN(1474)														while((_g23 < positions->length)){
HXLINE(1474)															 ::openfl::text::_internal::GlyphPosition position21 = positions->__get(_g23).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)															_g23 = (_g23 + 1);
HXDLIN(1474)															width21 = (width21 + position21->advance->x);
            														}
HXDLIN(1474)														widthValue = width21;
HXDLIN(1474)														bool _hx_tmp57;
HXDLIN(1474)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1474)															_hx_tmp57 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1474)															_hx_tmp57 = true;
            														}
HXDLIN(1474)														if (_hx_tmp57) {
HXLINE( 923)															layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd9);
HXLINE(1474)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1474)															layoutGroup->format = formatRange->format;
HXDLIN(1474)															layoutGroup->startIndex = textIndex;
HXDLIN(1474)															layoutGroup->endIndex = tempRangeEnd9;
            														}
HXDLIN(1474)														layoutGroup->positions = positions;
HXDLIN(1474)														layoutGroup->offsetX = offsetX;
HXDLIN(1474)														layoutGroup->ascent = ascent;
HXDLIN(1474)														layoutGroup->descent = descent;
HXDLIN(1474)														layoutGroup->leading = leading;
HXDLIN(1474)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)														layoutGroup->offsetY = offsetY;
HXDLIN(1474)														layoutGroup->width = widthValue;
HXDLIN(1474)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)														offsetX = (offsetX + widthValue);
HXLINE(1140)														textIndex = tempRangeEnd9;
            													}
HXLINE(1474)													if ((tempRangeEnd9 == formatRange->end)) {
HXLINE(1143)														layoutGroup = null();
            													}
HXLINE(1474)													if ((tempRangeEnd9 == placeIndex1)) {
HXLINE(1474)														goto _hx_goto_55;
            													}
HXDLIN(1474)													bool _hx_tmp58;
HXDLIN(1474)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)														rangeIndex = (rangeIndex + 1);
HXDLIN(1474)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)														_hx_tmp58 = true;
            													}
            													else {
HXLINE(1474)														_hx_tmp58 = false;
            													}
HXDLIN(1474)													if (!(_hx_tmp58)) {
HXLINE(1474)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)														goto _hx_goto_55;
            													}
HXDLIN(1474)													{
HXLINE(1474)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1474)															bool _hx_tmp59;
HXDLIN(1474)															if (hx::IsNotNull( font )) {
HXLINE(1474)																_hx_tmp59 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1474)																_hx_tmp59 = false;
            															}
HXDLIN(1474)															if (_hx_tmp59) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1474)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_55:;
            											}
HXLINE(1157)											textIndex = placeIndex1;
            										}
HXLINE(1474)										{
HXLINE(1474)											{
HXLINE(1474)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1474)													bool _hx_tmp60;
HXDLIN(1474)													if (hx::IsNotNull( font )) {
HXLINE(1474)														_hx_tmp60 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1474)														_hx_tmp60 = false;
            													}
HXDLIN(1474)													if (_hx_tmp60) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1474)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
HXLINE(1474)											int i7 = _gthis->layoutGroups->get_length();
HXDLIN(1474)											while(true){
HXLINE(1474)												i7 = (i7 - 1);
HXDLIN(1474)												if (!((i7 > -1))) {
HXLINE(1474)													goto _hx_goto_57;
            												}
HXDLIN(1474)												 ::openfl::text::_internal::TextLayoutGroup lg3 = _gthis->layoutGroups->get(i7).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1474)												if ((lg3->lineIndex < lineIndex)) {
HXLINE(1474)													goto _hx_goto_57;
            												}
HXDLIN(1474)												if ((lg3->lineIndex > lineIndex)) {
HXLINE(1474)													continue;
            												}
HXDLIN(1474)												lg3->ascent = maxAscent;
HXDLIN(1474)												lg3->height = ( (Float)(maxHeightValue) );
            											}
            											_hx_goto_57:;
HXDLIN(1474)											offsetY = (offsetY + maxHeightValue);
HXLINE(1182)											maxAscent = ((Float)0.0);
HXLINE(1183)											maxHeightValue = 0;
HXLINE(1474)											lineIndex = (lineIndex + 1);
HXLINE(1186)											offsetX = ( (Float)(2) );
            										}
HXLINE(1474)										if ((endIndex2 <= formatRange->end)) {
HXLINE(1474)											::String text20 = _gthis->text;
HXDLIN(1474)											Float letterSpacing20 = ((Float)0.0);
HXDLIN(1474)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing20 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1474)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1474)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1474)											_gthis->_hx___textLayout->letterSpacing = letterSpacing20;
HXDLIN(1474)											bool positions14;
HXDLIN(1474)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)												positions14 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1474)												positions14 = true;
            											}
HXDLIN(1474)											_gthis->_hx___textLayout->autoHint = positions14;
HXDLIN(1474)											 ::openfl::text::_internal::TextLayout _gthis21 = _gthis->_hx___textLayout;
HXDLIN(1474)											_gthis21->set_text(text20.substring(placeIndex1,endIndex2));
HXDLIN(1474)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)											Float width22 = ((Float)0.0);
HXDLIN(1474)											int _g24 = 0;
HXDLIN(1474)											while((_g24 < positions->length)){
HXLINE(1474)												 ::openfl::text::_internal::GlyphPosition position22 = positions->__get(_g24).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)												_g24 = (_g24 + 1);
HXDLIN(1474)												width22 = (width22 + position22->advance->x);
            											}
HXDLIN(1474)											widthValue = width22;
            										}
            										else {
HXLINE(1474)											int tempIndex7 = placeIndex1;
HXDLIN(1474)											int tempRangeEnd10 = formatRange->end;
HXDLIN(1474)											int countRanges7 = 0;
HXLINE(1046)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)											widthValue = ( (Float)(0) );
HXLINE(1474)											while(true){
HXLINE(1474)												if ((tempIndex7 != tempRangeEnd10)) {
HXLINE(1474)													::String text21 = _gthis->text;
HXDLIN(1474)													Float letterSpacing21 = ((Float)0.0);
HXDLIN(1474)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing21 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1474)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)														_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1474)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1474)													_gthis->_hx___textLayout->letterSpacing = letterSpacing21;
HXDLIN(1474)													bool _hx_tmp61;
HXDLIN(1474)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)														_hx_tmp61 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1474)														_hx_tmp61 = true;
            													}
HXDLIN(1474)													_gthis->_hx___textLayout->autoHint = _hx_tmp61;
HXDLIN(1474)													 ::openfl::text::_internal::TextLayout _gthis22 = _gthis->_hx___textLayout;
HXDLIN(1474)													_gthis22->set_text(text21.substring(tempIndex7,tempRangeEnd10));
HXDLIN(1474)													::Array< ::Dynamic> tempPositions7 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)													positions = positions->concat(tempPositions7);
            												}
HXLINE(1474)												if ((tempRangeEnd10 != endIndex2)) {
HXLINE(1474)													bool _hx_tmp62;
HXDLIN(1474)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)														rangeIndex = (rangeIndex + 1);
HXDLIN(1474)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)														_hx_tmp62 = true;
            													}
            													else {
HXLINE(1474)														_hx_tmp62 = false;
            													}
HXDLIN(1474)													if (!(_hx_tmp62)) {
HXLINE(1474)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)														goto _hx_goto_59;
            													}
HXLINE(1065)													tempIndex7 = tempRangeEnd10;
HXLINE(1474)													if ((endIndex2 < formatRange->end)) {
HXLINE(1474)														tempRangeEnd10 = endIndex2;
            													}
            													else {
HXLINE(1474)														tempRangeEnd10 = formatRange->end;
            													}
HXDLIN(1474)													countRanges7 = (countRanges7 + 1);
            												}
            												else {
HXLINE(1474)													Float width23 = ((Float)0.0);
HXDLIN(1474)													int _g25 = 0;
HXDLIN(1474)													while((_g25 < positions->length)){
HXLINE(1474)														 ::openfl::text::_internal::GlyphPosition position23 = positions->__get(_g25).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)														_g25 = (_g25 + 1);
HXDLIN(1474)														width23 = (width23 + position23->advance->x);
            													}
HXDLIN(1474)													widthValue = width23;
HXDLIN(1474)													goto _hx_goto_59;
            												}
            											}
            											_hx_goto_59:;
HXDLIN(1474)											rangeIndex = (rangeIndex - (countRanges7 + 1));
HXDLIN(1474)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)												rangeIndex = (rangeIndex + 1);
HXDLIN(1474)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
HXLINE(1271)										remainingPositions1 = positions;
HXLINE(1272)										tempWidth1 = widthValue;
            									}
            									_hx_goto_45:;
            								}
HXLINE(1474)								{
HXLINE(1474)									if ((endIndex2 <= formatRange->end)) {
HXLINE(1474)										::String text22 = _gthis->text;
HXDLIN(1474)										Float letterSpacing22 = ((Float)0.0);
HXDLIN(1474)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing22 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1474)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1474)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1474)										_gthis->_hx___textLayout->letterSpacing = letterSpacing22;
HXDLIN(1474)										bool positions15;
HXDLIN(1474)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)											positions15 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1474)											positions15 = true;
            										}
HXDLIN(1474)										_gthis->_hx___textLayout->autoHint = positions15;
HXDLIN(1474)										 ::openfl::text::_internal::TextLayout _gthis23 = _gthis->_hx___textLayout;
HXDLIN(1474)										_gthis23->set_text(text22.substring(textIndex,endIndex2));
HXDLIN(1474)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)										Float width24 = ((Float)0.0);
HXDLIN(1474)										int _g26 = 0;
HXDLIN(1474)										while((_g26 < positions->length)){
HXLINE(1474)											 ::openfl::text::_internal::GlyphPosition position24 = positions->__get(_g26).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)											_g26 = (_g26 + 1);
HXDLIN(1474)											width24 = (width24 + position24->advance->x);
            										}
HXDLIN(1474)										widthValue = width24;
HXDLIN(1474)										bool _hx_tmp63;
HXDLIN(1474)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1474)											_hx_tmp63 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1474)											_hx_tmp63 = true;
            										}
HXDLIN(1474)										if (_hx_tmp63) {
HXLINE( 923)											layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXLINE(1474)											_gthis->layoutGroups->push(layoutGroup);
            										}
            										else {
HXLINE(1474)											layoutGroup->format = formatRange->format;
HXDLIN(1474)											layoutGroup->startIndex = textIndex;
HXDLIN(1474)											layoutGroup->endIndex = endIndex2;
            										}
HXDLIN(1474)										layoutGroup->positions = positions;
HXDLIN(1474)										layoutGroup->offsetX = offsetX;
HXDLIN(1474)										layoutGroup->ascent = ascent;
HXDLIN(1474)										layoutGroup->descent = descent;
HXDLIN(1474)										layoutGroup->leading = leading;
HXDLIN(1474)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)										layoutGroup->offsetY = offsetY;
HXDLIN(1474)										layoutGroup->width = widthValue;
HXDLIN(1474)										layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)										offsetX = (offsetX + widthValue);
HXDLIN(1474)										if ((endIndex2 == formatRange->end)) {
HXLINE(1108)											layoutGroup = null();
HXLINE(1474)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)												rangeIndex = (rangeIndex + 1);
HXDLIN(1474)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXLINE(1474)											{
HXLINE(1474)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1474)													bool _hx_tmp64;
HXDLIN(1474)													if (hx::IsNotNull( font )) {
HXLINE(1474)														_hx_tmp64 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1474)														_hx_tmp64 = false;
            													}
HXDLIN(1474)													if (_hx_tmp64) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1474)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1474)										while(true){
HXLINE(1474)											int tempRangeEnd11;
HXDLIN(1474)											if ((endIndex2 < formatRange->end)) {
HXLINE(1474)												tempRangeEnd11 = endIndex2;
            											}
            											else {
HXLINE(1474)												tempRangeEnd11 = formatRange->end;
            											}
HXDLIN(1474)											if ((textIndex != tempRangeEnd11)) {
HXLINE(1474)												::String text23 = _gthis->text;
HXDLIN(1474)												Float letterSpacing23 = ((Float)0.0);
HXDLIN(1474)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing23 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1474)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1474)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1474)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1474)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1474)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->letterSpacing = letterSpacing23;
HXDLIN(1474)												bool positions16;
HXDLIN(1474)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1474)													positions16 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1474)													positions16 = true;
            												}
HXDLIN(1474)												_gthis->_hx___textLayout->autoHint = positions16;
HXDLIN(1474)												 ::openfl::text::_internal::TextLayout _gthis24 = _gthis->_hx___textLayout;
HXDLIN(1474)												_gthis24->set_text(text23.substring(textIndex,tempRangeEnd11));
HXDLIN(1474)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1474)												Float width25 = ((Float)0.0);
HXDLIN(1474)												int _g27 = 0;
HXDLIN(1474)												while((_g27 < positions->length)){
HXLINE(1474)													 ::openfl::text::_internal::GlyphPosition position25 = positions->__get(_g27).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1474)													_g27 = (_g27 + 1);
HXDLIN(1474)													width25 = (width25 + position25->advance->x);
            												}
HXDLIN(1474)												widthValue = width25;
HXDLIN(1474)												bool _hx_tmp65;
HXDLIN(1474)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1474)													_hx_tmp65 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1474)													_hx_tmp65 = true;
            												}
HXDLIN(1474)												if (_hx_tmp65) {
HXLINE( 923)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd11);
HXLINE(1474)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1474)													layoutGroup->format = formatRange->format;
HXDLIN(1474)													layoutGroup->startIndex = textIndex;
HXDLIN(1474)													layoutGroup->endIndex = tempRangeEnd11;
            												}
HXDLIN(1474)												layoutGroup->positions = positions;
HXDLIN(1474)												layoutGroup->offsetX = offsetX;
HXDLIN(1474)												layoutGroup->ascent = ascent;
HXDLIN(1474)												layoutGroup->descent = descent;
HXDLIN(1474)												layoutGroup->leading = leading;
HXDLIN(1474)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1474)												layoutGroup->offsetY = offsetY;
HXDLIN(1474)												layoutGroup->width = widthValue;
HXDLIN(1474)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1474)												offsetX = (offsetX + widthValue);
HXLINE(1140)												textIndex = tempRangeEnd11;
            											}
HXLINE(1474)											if ((tempRangeEnd11 == formatRange->end)) {
HXLINE(1143)												layoutGroup = null();
            											}
HXLINE(1474)											if ((tempRangeEnd11 == endIndex2)) {
HXLINE(1474)												goto _hx_goto_62;
            											}
HXDLIN(1474)											bool _hx_tmp66;
HXDLIN(1474)											if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1474)												rangeIndex = (rangeIndex + 1);
HXDLIN(1474)												formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1474)												currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)												font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1474)												_hx_tmp66 = true;
            											}
            											else {
HXLINE(1474)												_hx_tmp66 = false;
            											}
HXDLIN(1474)											if (!(_hx_tmp66)) {
HXLINE(1474)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1474)												goto _hx_goto_62;
            											}
HXDLIN(1474)											{
HXLINE(1474)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)													ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)													descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            												}
            												else {
HXLINE(1474)													bool _hx_tmp67;
HXDLIN(1474)													if (hx::IsNotNull( font )) {
HXLINE(1474)														_hx_tmp67 = (font->unitsPerEM != 0);
            													}
            													else {
HXLINE(1474)														_hx_tmp67 = false;
            													}
HXDLIN(1474)													if (_hx_tmp67) {
HXLINE( 945)														ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)														descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            													}
            													else {
HXLINE( 951)														ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)														descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            													}
            												}
HXLINE( 955)												leading = ( (int)(currentFormat->leading) );
HXLINE( 957)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1474)												if ((heightValue > maxHeightValue)) {
HXLINE( 961)													maxHeightValue = heightValue;
            												}
HXLINE(1474)												if ((ascent > maxAscent)) {
HXLINE( 966)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_62:;
            									}
HXLINE(1157)									textIndex = endIndex2;
            								}
            							}
HXLINE(1476)							wrap = false;
            						}
            						else {
HXLINE(1480)							bool _hx_tmp68;
HXDLIN(1480)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1480)								_hx_tmp68 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1480)								_hx_tmp68 = false;
            							}
HXDLIN(1480)							if (_hx_tmp68) {
HXLINE(1483)								if (hx::IsNotEq( align,2 )) {
HXLINE(1485)									layoutGroup->endIndex = spaceIndex;
HXLINE(1486)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1487)									 ::openfl::text::_internal::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1487)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
HXLINE(1490)								offsetX = (offsetX + widthValue);
HXLINE(1492)								textIndex = endIndex2;
            							}
            							else {
HXLINE(1494)								bool _hx_tmp69;
HXDLIN(1494)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1494)									_hx_tmp69 = hx::IsEq( align,2 );
            								}
            								else {
HXLINE(1494)									_hx_tmp69 = true;
            								}
HXDLIN(1494)								if (_hx_tmp69) {
HXLINE(1496)									bool _hx_tmp70;
HXDLIN(1496)									if ((_gthis->width >= 4)) {
HXLINE(1496)										_hx_tmp70 = _gthis->wordWrap;
            									}
            									else {
HXLINE(1496)										_hx_tmp70 = false;
            									}
HXDLIN(1496)									if (_hx_tmp70) {
HXLINE(1496)										::Array< ::Dynamic> remainingPositions2 = positions;
HXDLIN(1496)										int i8;
HXDLIN(1496)										int bufferCount2;
HXDLIN(1496)										int placeIndex2;
HXDLIN(1496)										Float positionWidth2;
HXDLIN(1496)										 ::openfl::text::_internal::GlyphPosition currentPosition2;
HXDLIN(1496)										Float width26 = ((Float)0.0);
HXDLIN(1496)										{
HXLINE(1496)											int _g28 = 0;
HXDLIN(1496)											while((_g28 < remainingPositions2->length)){
HXLINE(1496)												 ::openfl::text::_internal::GlyphPosition position26 = remainingPositions2->__get(_g28).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)												_g28 = (_g28 + 1);
HXDLIN(1496)												width26 = (width26 + position26->advance->x);
            											}
            										}
HXDLIN(1496)										Float tempWidth2 = width26;
HXDLIN(1496)										while(((offsetX + tempWidth2) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)											bufferCount2 = 0;
HXDLIN(1202)											i8 = bufferCount2;
HXLINE(1203)											positionWidth2 = ((Float)0.0);
HXLINE(1496)											while(((offsetX + positionWidth2) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)												currentPosition2 = remainingPositions2->__get(i8).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXLINE(1496)												if ((currentPosition2->advance->x == ((Float)0.0))) {
HXLINE(1496)													i8 = (i8 + 1);
HXDLIN(1496)													bufferCount2 = (bufferCount2 + 1);
            												}
            												else {
HXLINE(1496)													positionWidth2 = (positionWidth2 + currentPosition2->advance->x);
HXDLIN(1496)													i8 = (i8 + 1);
            												}
            											}
HXDLIN(1496)											if ((positionWidth2 == ((Float)0.0))) {
HXLINE(1496)												goto _hx_goto_65;
            											}
            											else {
HXLINE(1496)												bool _hx_tmp71;
HXDLIN(1496)												if ((i8 < 2)) {
HXLINE(1496)													_hx_tmp71 = ((positionWidth2 + offsetX) > (_gthis->width - ( (Float)(2) )));
            												}
            												else {
HXLINE(1496)													_hx_tmp71 = false;
            												}
HXDLIN(1496)												if (_hx_tmp71) {
HXLINE(1496)													if ((((textIndex + i8) - bufferCount2) == endIndex2)) {
HXLINE(1496)														goto _hx_goto_65;
            													}
            												}
            												else {
HXLINE(1496)													while(((offsetX + positionWidth2) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1496)														i8 = (i8 - 1);
HXDLIN(1496)														if (((i8 - bufferCount2) > 0)) {
HXLINE(1496)															{
HXLINE(1496)																int endIndex5 = ((textIndex + i8) - bufferCount2);
HXDLIN(1496)																if ((endIndex5 <= formatRange->end)) {
HXLINE(1496)																	::String text24 = _gthis->text;
HXDLIN(1496)																	Float letterSpacing24 = ((Float)0.0);
HXDLIN(1496)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing24 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1496)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																		_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing24;
HXDLIN(1496)																	bool positions17;
HXDLIN(1496)																	if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																		positions17 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1496)																		positions17 = true;
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->autoHint = positions17;
HXDLIN(1496)																	 ::openfl::text::_internal::TextLayout _gthis25 = _gthis->_hx___textLayout;
HXDLIN(1496)																	_gthis25->set_text(text24.substring(textIndex,endIndex5));
HXDLIN(1496)																	positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)																	Float width27 = ((Float)0.0);
HXDLIN(1496)																	int _g29 = 0;
HXDLIN(1496)																	while((_g29 < positions->length)){
HXLINE(1496)																		 ::openfl::text::_internal::GlyphPosition position27 = positions->__get(_g29).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)																		_g29 = (_g29 + 1);
HXDLIN(1496)																		width27 = (width27 + position27->advance->x);
            																	}
HXDLIN(1496)																	widthValue = width27;
            																}
            																else {
HXLINE(1496)																	int tempIndex8 = textIndex;
HXDLIN(1496)																	int tempRangeEnd12 = formatRange->end;
HXDLIN(1496)																	int countRanges8 = 0;
HXLINE(1046)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																	widthValue = ( (Float)(0) );
HXLINE(1496)																	while(true){
HXLINE(1496)																		if ((tempIndex8 != tempRangeEnd12)) {
HXLINE(1496)																			::String text25 = _gthis->text;
HXDLIN(1496)																			Float letterSpacing25 = ((Float)0.0);
HXDLIN(1496)																			if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																				letterSpacing25 = ( (Float)(formatRange->format->letterSpacing) );
            																			}
HXLINE(1496)																			if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																				_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																			_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																			if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																				_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->letterSpacing = letterSpacing25;
HXDLIN(1496)																			bool _hx_tmp72;
HXDLIN(1496)																			if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																				_hx_tmp72 = (_gthis->sharpness < 400);
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp72 = true;
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->autoHint = _hx_tmp72;
HXDLIN(1496)																			 ::openfl::text::_internal::TextLayout _gthis26 = _gthis->_hx___textLayout;
HXDLIN(1496)																			_gthis26->set_text(text25.substring(tempIndex8,tempRangeEnd12));
HXDLIN(1496)																			::Array< ::Dynamic> tempPositions8 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																			positions = positions->concat(tempPositions8);
            																		}
HXLINE(1496)																		if ((tempRangeEnd12 != endIndex5)) {
HXLINE(1496)																			bool _hx_tmp73;
HXDLIN(1496)																			if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																				rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																				formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)																				currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																				font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)																				_hx_tmp73 = true;
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp73 = false;
            																			}
HXDLIN(1496)																			if (!(_hx_tmp73)) {
HXLINE(1496)																				::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)																				goto _hx_goto_69;
            																			}
HXLINE(1065)																			tempIndex8 = tempRangeEnd12;
HXLINE(1496)																			if ((endIndex5 < formatRange->end)) {
HXLINE(1496)																				tempRangeEnd12 = endIndex5;
            																			}
            																			else {
HXLINE(1496)																				tempRangeEnd12 = formatRange->end;
            																			}
HXDLIN(1496)																			countRanges8 = (countRanges8 + 1);
            																		}
            																		else {
HXLINE(1496)																			Float width28 = ((Float)0.0);
HXDLIN(1496)																			int _g30 = 0;
HXDLIN(1496)																			while((_g30 < positions->length)){
HXLINE(1496)																				 ::openfl::text::_internal::GlyphPosition position28 = positions->__get(_g30).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)																				_g30 = (_g30 + 1);
HXDLIN(1496)																				width28 = (width28 + position28->advance->x);
            																			}
HXDLIN(1496)																			widthValue = width28;
HXDLIN(1496)																			goto _hx_goto_69;
            																		}
            																	}
            																	_hx_goto_69:;
HXDLIN(1496)																	rangeIndex = (rangeIndex - (countRanges8 + 1));
HXDLIN(1496)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																	}
            																}
            															}
HXLINE(1250)															positionWidth2 = widthValue;
            														}
            														else {
HXLINE(1256)															i8 = 1;
HXLINE(1257)															bufferCount2 = 0;
HXLINE(1496)															{
HXLINE(1496)																int endIndex6 = (textIndex + 1);
HXDLIN(1496)																if ((endIndex6 <= formatRange->end)) {
HXLINE(1496)																	::String text26 = _gthis->text;
HXDLIN(1496)																	Float letterSpacing26 = ((Float)0.0);
HXDLIN(1496)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing26 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1496)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																		_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing26;
HXDLIN(1496)																	bool positions18;
HXDLIN(1496)																	if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																		positions18 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1496)																		positions18 = true;
            																	}
HXDLIN(1496)																	_gthis->_hx___textLayout->autoHint = positions18;
HXDLIN(1496)																	 ::openfl::text::_internal::TextLayout _gthis27 = _gthis->_hx___textLayout;
HXDLIN(1496)																	_gthis27->set_text(text26.substring(textIndex,endIndex6));
HXDLIN(1496)																	positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)																	Float width29 = ((Float)0.0);
HXDLIN(1496)																	int _g31 = 0;
HXDLIN(1496)																	while((_g31 < positions->length)){
HXLINE(1496)																		 ::openfl::text::_internal::GlyphPosition position29 = positions->__get(_g31).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)																		_g31 = (_g31 + 1);
HXDLIN(1496)																		width29 = (width29 + position29->advance->x);
            																	}
HXDLIN(1496)																	widthValue = width29;
            																}
            																else {
HXLINE(1496)																	int tempIndex9 = textIndex;
HXDLIN(1496)																	int tempRangeEnd13 = formatRange->end;
HXDLIN(1496)																	int countRanges9 = 0;
HXLINE(1046)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)																	widthValue = ( (Float)(0) );
HXLINE(1496)																	while(true){
HXLINE(1496)																		if ((tempIndex9 != tempRangeEnd13)) {
HXLINE(1496)																			::String text27 = _gthis->text;
HXDLIN(1496)																			Float letterSpacing27 = ((Float)0.0);
HXDLIN(1496)																			if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																				letterSpacing27 = ( (Float)(formatRange->format->letterSpacing) );
            																			}
HXLINE(1496)																			if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																				_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)																			_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)																			if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																				_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->letterSpacing = letterSpacing27;
HXDLIN(1496)																			bool _hx_tmp74;
HXDLIN(1496)																			if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																				_hx_tmp74 = (_gthis->sharpness < 400);
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp74 = true;
            																			}
HXDLIN(1496)																			_gthis->_hx___textLayout->autoHint = _hx_tmp74;
HXDLIN(1496)																			 ::openfl::text::_internal::TextLayout _gthis28 = _gthis->_hx___textLayout;
HXDLIN(1496)																			_gthis28->set_text(text27.substring(tempIndex9,tempRangeEnd13));
HXDLIN(1496)																			::Array< ::Dynamic> tempPositions9 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																			positions = positions->concat(tempPositions9);
            																		}
HXLINE(1496)																		if ((tempRangeEnd13 != endIndex6)) {
HXLINE(1496)																			bool _hx_tmp75;
HXDLIN(1496)																			if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																				rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																				formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)																				currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																				font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)																				_hx_tmp75 = true;
            																			}
            																			else {
HXLINE(1496)																				_hx_tmp75 = false;
            																			}
HXDLIN(1496)																			if (!(_hx_tmp75)) {
HXLINE(1496)																				::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)																				goto _hx_goto_72;
            																			}
HXLINE(1065)																			tempIndex9 = tempRangeEnd13;
HXLINE(1496)																			if ((endIndex6 < formatRange->end)) {
HXLINE(1496)																				tempRangeEnd13 = endIndex6;
            																			}
            																			else {
HXLINE(1496)																				tempRangeEnd13 = formatRange->end;
            																			}
HXDLIN(1496)																			countRanges9 = (countRanges9 + 1);
            																		}
            																		else {
HXLINE(1496)																			Float width30 = ((Float)0.0);
HXDLIN(1496)																			int _g32 = 0;
HXDLIN(1496)																			while((_g32 < positions->length)){
HXLINE(1496)																				 ::openfl::text::_internal::GlyphPosition position30 = positions->__get(_g32).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)																				_g32 = (_g32 + 1);
HXDLIN(1496)																				width30 = (width30 + position30->advance->x);
            																			}
HXDLIN(1496)																			widthValue = width30;
HXDLIN(1496)																			goto _hx_goto_72;
            																		}
            																	}
            																	_hx_goto_72:;
HXDLIN(1496)																	rangeIndex = (rangeIndex - (countRanges9 + 1));
HXDLIN(1496)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1496)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            																	}
            																}
            															}
HXLINE(1260)															positionWidth2 = ( (Float)(0) );
            														}
            													}
            												}
            											}
HXLINE(1265)											placeIndex2 = ((textIndex + i8) - bufferCount2);
HXLINE(1496)											{
HXLINE(1496)												if ((placeIndex2 <= formatRange->end)) {
HXLINE(1496)													::String text28 = _gthis->text;
HXDLIN(1496)													Float letterSpacing28 = ((Float)0.0);
HXDLIN(1496)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing28 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1496)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)														_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->letterSpacing = letterSpacing28;
HXDLIN(1496)													bool positions19;
HXDLIN(1496)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)														positions19 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1496)														positions19 = true;
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->autoHint = positions19;
HXDLIN(1496)													 ::openfl::text::_internal::TextLayout _gthis29 = _gthis->_hx___textLayout;
HXDLIN(1496)													_gthis29->set_text(text28.substring(textIndex,placeIndex2));
HXDLIN(1496)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)													Float width31 = ((Float)0.0);
HXDLIN(1496)													int _g33 = 0;
HXDLIN(1496)													while((_g33 < positions->length)){
HXLINE(1496)														 ::openfl::text::_internal::GlyphPosition position31 = positions->__get(_g33).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)														_g33 = (_g33 + 1);
HXDLIN(1496)														width31 = (width31 + position31->advance->x);
            													}
HXDLIN(1496)													widthValue = width31;
HXDLIN(1496)													bool _hx_tmp76;
HXDLIN(1496)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1496)														_hx_tmp76 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1496)														_hx_tmp76 = true;
            													}
HXDLIN(1496)													if (_hx_tmp76) {
HXLINE( 923)														layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex2);
HXLINE(1496)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1496)														layoutGroup->format = formatRange->format;
HXDLIN(1496)														layoutGroup->startIndex = textIndex;
HXDLIN(1496)														layoutGroup->endIndex = placeIndex2;
            													}
HXDLIN(1496)													layoutGroup->positions = positions;
HXDLIN(1496)													layoutGroup->offsetX = offsetX;
HXDLIN(1496)													layoutGroup->ascent = ascent;
HXDLIN(1496)													layoutGroup->descent = descent;
HXDLIN(1496)													layoutGroup->leading = leading;
HXDLIN(1496)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)													layoutGroup->offsetY = offsetY;
HXDLIN(1496)													layoutGroup->width = widthValue;
HXDLIN(1496)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)													offsetX = (offsetX + widthValue);
HXDLIN(1496)													if ((placeIndex2 == formatRange->end)) {
HXLINE(1108)														layoutGroup = null();
HXLINE(1496)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)															rangeIndex = (rangeIndex + 1);
HXDLIN(1496)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXLINE(1496)														{
HXLINE(1496)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)																ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)																descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            															}
            															else {
HXLINE(1496)																bool _hx_tmp77;
HXDLIN(1496)																if (hx::IsNotNull( font )) {
HXLINE(1496)																	_hx_tmp77 = (font->unitsPerEM != 0);
            																}
            																else {
HXLINE(1496)																	_hx_tmp77 = false;
            																}
HXDLIN(1496)																if (_hx_tmp77) {
HXLINE( 945)																	ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																	descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																}
            																else {
HXLINE( 951)																	ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																	descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																}
            															}
HXLINE( 955)															leading = ( (int)(currentFormat->leading) );
HXLINE( 957)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)															if ((heightValue > maxHeightValue)) {
HXLINE( 961)																maxHeightValue = heightValue;
            															}
HXLINE(1496)															if ((ascent > maxAscent)) {
HXLINE( 966)																maxAscent = ascent;
            															}
            														}
            													}
            												}
            												else {
HXLINE(1496)													while(true){
HXLINE(1496)														int tempRangeEnd14;
HXDLIN(1496)														if ((placeIndex2 < formatRange->end)) {
HXLINE(1496)															tempRangeEnd14 = placeIndex2;
            														}
            														else {
HXLINE(1496)															tempRangeEnd14 = formatRange->end;
            														}
HXDLIN(1496)														if ((textIndex != tempRangeEnd14)) {
HXLINE(1496)															::String text29 = _gthis->text;
HXDLIN(1496)															Float letterSpacing29 = ((Float)0.0);
HXDLIN(1496)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																letterSpacing29 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1496)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)																_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1496)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1496)															_gthis->_hx___textLayout->letterSpacing = letterSpacing29;
HXDLIN(1496)															bool positions20;
HXDLIN(1496)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)																positions20 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1496)																positions20 = true;
            															}
HXDLIN(1496)															_gthis->_hx___textLayout->autoHint = positions20;
HXDLIN(1496)															 ::openfl::text::_internal::TextLayout _gthis30 = _gthis->_hx___textLayout;
HXDLIN(1496)															_gthis30->set_text(text29.substring(textIndex,tempRangeEnd14));
HXDLIN(1496)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)															Float width32 = ((Float)0.0);
HXDLIN(1496)															int _g34 = 0;
HXDLIN(1496)															while((_g34 < positions->length)){
HXLINE(1496)																 ::openfl::text::_internal::GlyphPosition position32 = positions->__get(_g34).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)																_g34 = (_g34 + 1);
HXDLIN(1496)																width32 = (width32 + position32->advance->x);
            															}
HXDLIN(1496)															widthValue = width32;
HXDLIN(1496)															bool _hx_tmp78;
HXDLIN(1496)															if (hx::IsNotNull( layoutGroup )) {
HXLINE(1496)																_hx_tmp78 = (layoutGroup->startIndex != layoutGroup->endIndex);
            															}
            															else {
HXLINE(1496)																_hx_tmp78 = true;
            															}
HXDLIN(1496)															if (_hx_tmp78) {
HXLINE( 923)																layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd14);
HXLINE(1496)																_gthis->layoutGroups->push(layoutGroup);
            															}
            															else {
HXLINE(1496)																layoutGroup->format = formatRange->format;
HXDLIN(1496)																layoutGroup->startIndex = textIndex;
HXDLIN(1496)																layoutGroup->endIndex = tempRangeEnd14;
            															}
HXDLIN(1496)															layoutGroup->positions = positions;
HXDLIN(1496)															layoutGroup->offsetX = offsetX;
HXDLIN(1496)															layoutGroup->ascent = ascent;
HXDLIN(1496)															layoutGroup->descent = descent;
HXDLIN(1496)															layoutGroup->leading = leading;
HXDLIN(1496)															layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)															layoutGroup->offsetY = offsetY;
HXDLIN(1496)															layoutGroup->width = widthValue;
HXDLIN(1496)															layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)															offsetX = (offsetX + widthValue);
HXLINE(1140)															textIndex = tempRangeEnd14;
            														}
HXLINE(1496)														if ((tempRangeEnd14 == formatRange->end)) {
HXLINE(1143)															layoutGroup = null();
            														}
HXLINE(1496)														if ((tempRangeEnd14 == placeIndex2)) {
HXLINE(1496)															goto _hx_goto_75;
            														}
HXDLIN(1496)														bool _hx_tmp79;
HXDLIN(1496)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)															rangeIndex = (rangeIndex + 1);
HXDLIN(1496)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)															_hx_tmp79 = true;
            														}
            														else {
HXLINE(1496)															_hx_tmp79 = false;
            														}
HXDLIN(1496)														if (!(_hx_tmp79)) {
HXLINE(1496)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)															goto _hx_goto_75;
            														}
HXDLIN(1496)														{
HXLINE(1496)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)																ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)																descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            															}
            															else {
HXLINE(1496)																bool _hx_tmp80;
HXDLIN(1496)																if (hx::IsNotNull( font )) {
HXLINE(1496)																	_hx_tmp80 = (font->unitsPerEM != 0);
            																}
            																else {
HXLINE(1496)																	_hx_tmp80 = false;
            																}
HXDLIN(1496)																if (_hx_tmp80) {
HXLINE( 945)																	ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																	descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            																}
            																else {
HXLINE( 951)																	ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																	descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            																}
            															}
HXLINE( 955)															leading = ( (int)(currentFormat->leading) );
HXLINE( 957)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)															if ((heightValue > maxHeightValue)) {
HXLINE( 961)																maxHeightValue = heightValue;
            															}
HXLINE(1496)															if ((ascent > maxAscent)) {
HXLINE( 966)																maxAscent = ascent;
            															}
            														}
            													}
            													_hx_goto_75:;
            												}
HXLINE(1157)												textIndex = placeIndex2;
            											}
HXLINE(1496)											{
HXLINE(1496)												{
HXLINE(1496)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1496)														bool _hx_tmp81;
HXDLIN(1496)														if (hx::IsNotNull( font )) {
HXLINE(1496)															_hx_tmp81 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1496)															_hx_tmp81 = false;
            														}
HXDLIN(1496)														if (_hx_tmp81) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1496)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
HXLINE(1496)												int i9 = _gthis->layoutGroups->get_length();
HXDLIN(1496)												while(true){
HXLINE(1496)													i9 = (i9 - 1);
HXDLIN(1496)													if (!((i9 > -1))) {
HXLINE(1496)														goto _hx_goto_77;
            													}
HXDLIN(1496)													 ::openfl::text::_internal::TextLayoutGroup lg4 = _gthis->layoutGroups->get(i9).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1496)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1496)														goto _hx_goto_77;
            													}
HXDLIN(1496)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1496)														continue;
            													}
HXDLIN(1496)													lg4->ascent = maxAscent;
HXDLIN(1496)													lg4->height = ( (Float)(maxHeightValue) );
            												}
            												_hx_goto_77:;
HXDLIN(1496)												offsetY = (offsetY + maxHeightValue);
HXLINE(1182)												maxAscent = ((Float)0.0);
HXLINE(1183)												maxHeightValue = 0;
HXLINE(1496)												lineIndex = (lineIndex + 1);
HXLINE(1186)												offsetX = ( (Float)(2) );
            											}
HXLINE(1496)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1496)												::String text30 = _gthis->text;
HXDLIN(1496)												Float letterSpacing30 = ((Float)0.0);
HXDLIN(1496)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing30 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1496)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1496)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1496)												_gthis->_hx___textLayout->letterSpacing = letterSpacing30;
HXDLIN(1496)												bool positions21;
HXDLIN(1496)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)													positions21 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1496)													positions21 = true;
            												}
HXDLIN(1496)												_gthis->_hx___textLayout->autoHint = positions21;
HXDLIN(1496)												 ::openfl::text::_internal::TextLayout _gthis31 = _gthis->_hx___textLayout;
HXDLIN(1496)												_gthis31->set_text(text30.substring(placeIndex2,endIndex2));
HXDLIN(1496)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)												Float width33 = ((Float)0.0);
HXDLIN(1496)												int _g35 = 0;
HXDLIN(1496)												while((_g35 < positions->length)){
HXLINE(1496)													 ::openfl::text::_internal::GlyphPosition position33 = positions->__get(_g35).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)													_g35 = (_g35 + 1);
HXDLIN(1496)													width33 = (width33 + position33->advance->x);
            												}
HXDLIN(1496)												widthValue = width33;
            											}
            											else {
HXLINE(1496)												int tempIndex10 = placeIndex2;
HXDLIN(1496)												int tempRangeEnd15 = formatRange->end;
HXDLIN(1496)												int countRanges10 = 0;
HXLINE(1046)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)												widthValue = ( (Float)(0) );
HXLINE(1496)												while(true){
HXLINE(1496)													if ((tempIndex10 != tempRangeEnd15)) {
HXLINE(1496)														::String text31 = _gthis->text;
HXDLIN(1496)														Float letterSpacing31 = ((Float)0.0);
HXDLIN(1496)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing31 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1496)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1496)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1496)														_gthis->_hx___textLayout->letterSpacing = letterSpacing31;
HXDLIN(1496)														bool _hx_tmp82;
HXDLIN(1496)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)															_hx_tmp82 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1496)															_hx_tmp82 = true;
            														}
HXDLIN(1496)														_gthis->_hx___textLayout->autoHint = _hx_tmp82;
HXDLIN(1496)														 ::openfl::text::_internal::TextLayout _gthis32 = _gthis->_hx___textLayout;
HXDLIN(1496)														_gthis32->set_text(text31.substring(tempIndex10,tempRangeEnd15));
HXDLIN(1496)														::Array< ::Dynamic> tempPositions10 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)														positions = positions->concat(tempPositions10);
            													}
HXLINE(1496)													if ((tempRangeEnd15 != endIndex2)) {
HXLINE(1496)														bool _hx_tmp83;
HXDLIN(1496)														if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)															rangeIndex = (rangeIndex + 1);
HXDLIN(1496)															formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)															currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)															font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)															_hx_tmp83 = true;
            														}
            														else {
HXLINE(1496)															_hx_tmp83 = false;
            														}
HXDLIN(1496)														if (!(_hx_tmp83)) {
HXLINE(1496)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)															goto _hx_goto_79;
            														}
HXLINE(1065)														tempIndex10 = tempRangeEnd15;
HXLINE(1496)														if ((endIndex2 < formatRange->end)) {
HXLINE(1496)															tempRangeEnd15 = endIndex2;
            														}
            														else {
HXLINE(1496)															tempRangeEnd15 = formatRange->end;
            														}
HXDLIN(1496)														countRanges10 = (countRanges10 + 1);
            													}
            													else {
HXLINE(1496)														Float width34 = ((Float)0.0);
HXDLIN(1496)														int _g36 = 0;
HXDLIN(1496)														while((_g36 < positions->length)){
HXLINE(1496)															 ::openfl::text::_internal::GlyphPosition position34 = positions->__get(_g36).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)															_g36 = (_g36 + 1);
HXDLIN(1496)															width34 = (width34 + position34->advance->x);
            														}
HXDLIN(1496)														widthValue = width34;
HXDLIN(1496)														goto _hx_goto_79;
            													}
            												}
            												_hx_goto_79:;
HXDLIN(1496)												rangeIndex = (rangeIndex - (countRanges10 + 1));
HXDLIN(1496)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)													rangeIndex = (rangeIndex + 1);
HXDLIN(1496)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
HXLINE(1271)											remainingPositions2 = positions;
HXLINE(1272)											tempWidth2 = widthValue;
            										}
            										_hx_goto_65:;
            									}
HXLINE(1496)									{
HXLINE(1496)										if ((endIndex2 <= formatRange->end)) {
HXLINE(1496)											::String text32 = _gthis->text;
HXDLIN(1496)											Float letterSpacing32 = ((Float)0.0);
HXDLIN(1496)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing32 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1496)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1496)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1496)											_gthis->_hx___textLayout->letterSpacing = letterSpacing32;
HXDLIN(1496)											bool positions22;
HXDLIN(1496)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)												positions22 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1496)												positions22 = true;
            											}
HXDLIN(1496)											_gthis->_hx___textLayout->autoHint = positions22;
HXDLIN(1496)											 ::openfl::text::_internal::TextLayout _gthis33 = _gthis->_hx___textLayout;
HXDLIN(1496)											_gthis33->set_text(text32.substring(textIndex,endIndex2));
HXDLIN(1496)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)											Float width35 = ((Float)0.0);
HXDLIN(1496)											int _g37 = 0;
HXDLIN(1496)											while((_g37 < positions->length)){
HXLINE(1496)												 ::openfl::text::_internal::GlyphPosition position35 = positions->__get(_g37).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)												_g37 = (_g37 + 1);
HXDLIN(1496)												width35 = (width35 + position35->advance->x);
            											}
HXDLIN(1496)											widthValue = width35;
HXDLIN(1496)											bool _hx_tmp84;
HXDLIN(1496)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1496)												_hx_tmp84 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1496)												_hx_tmp84 = true;
            											}
HXDLIN(1496)											if (_hx_tmp84) {
HXLINE( 923)												layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXLINE(1496)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1496)												layoutGroup->format = formatRange->format;
HXDLIN(1496)												layoutGroup->startIndex = textIndex;
HXDLIN(1496)												layoutGroup->endIndex = endIndex2;
            											}
HXDLIN(1496)											layoutGroup->positions = positions;
HXDLIN(1496)											layoutGroup->offsetX = offsetX;
HXDLIN(1496)											layoutGroup->ascent = ascent;
HXDLIN(1496)											layoutGroup->descent = descent;
HXDLIN(1496)											layoutGroup->leading = leading;
HXDLIN(1496)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)											layoutGroup->offsetY = offsetY;
HXDLIN(1496)											layoutGroup->width = widthValue;
HXDLIN(1496)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)											offsetX = (offsetX + widthValue);
HXDLIN(1496)											if ((endIndex2 == formatRange->end)) {
HXLINE(1108)												layoutGroup = null();
HXLINE(1496)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)													rangeIndex = (rangeIndex + 1);
HXDLIN(1496)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXLINE(1496)												{
HXLINE(1496)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1496)														bool _hx_tmp85;
HXDLIN(1496)														if (hx::IsNotNull( font )) {
HXLINE(1496)															_hx_tmp85 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1496)															_hx_tmp85 = false;
            														}
HXDLIN(1496)														if (_hx_tmp85) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1496)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1496)											while(true){
HXLINE(1496)												int tempRangeEnd16;
HXDLIN(1496)												if ((endIndex2 < formatRange->end)) {
HXLINE(1496)													tempRangeEnd16 = endIndex2;
            												}
            												else {
HXLINE(1496)													tempRangeEnd16 = formatRange->end;
            												}
HXDLIN(1496)												if ((textIndex != tempRangeEnd16)) {
HXLINE(1496)													::String text33 = _gthis->text;
HXDLIN(1496)													Float letterSpacing33 = ((Float)0.0);
HXDLIN(1496)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing33 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1496)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1496)														_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1496)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1496)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1496)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->letterSpacing = letterSpacing33;
HXDLIN(1496)													bool positions23;
HXDLIN(1496)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1496)														positions23 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1496)														positions23 = true;
            													}
HXDLIN(1496)													_gthis->_hx___textLayout->autoHint = positions23;
HXDLIN(1496)													 ::openfl::text::_internal::TextLayout _gthis34 = _gthis->_hx___textLayout;
HXDLIN(1496)													_gthis34->set_text(text33.substring(textIndex,tempRangeEnd16));
HXDLIN(1496)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1496)													Float width36 = ((Float)0.0);
HXDLIN(1496)													int _g38 = 0;
HXDLIN(1496)													while((_g38 < positions->length)){
HXLINE(1496)														 ::openfl::text::_internal::GlyphPosition position36 = positions->__get(_g38).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1496)														_g38 = (_g38 + 1);
HXDLIN(1496)														width36 = (width36 + position36->advance->x);
            													}
HXDLIN(1496)													widthValue = width36;
HXDLIN(1496)													bool _hx_tmp86;
HXDLIN(1496)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1496)														_hx_tmp86 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1496)														_hx_tmp86 = true;
            													}
HXDLIN(1496)													if (_hx_tmp86) {
HXLINE( 923)														layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd16);
HXLINE(1496)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1496)														layoutGroup->format = formatRange->format;
HXDLIN(1496)														layoutGroup->startIndex = textIndex;
HXDLIN(1496)														layoutGroup->endIndex = tempRangeEnd16;
            													}
HXDLIN(1496)													layoutGroup->positions = positions;
HXDLIN(1496)													layoutGroup->offsetX = offsetX;
HXDLIN(1496)													layoutGroup->ascent = ascent;
HXDLIN(1496)													layoutGroup->descent = descent;
HXDLIN(1496)													layoutGroup->leading = leading;
HXDLIN(1496)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1496)													layoutGroup->offsetY = offsetY;
HXDLIN(1496)													layoutGroup->width = widthValue;
HXDLIN(1496)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1496)													offsetX = (offsetX + widthValue);
HXLINE(1140)													textIndex = tempRangeEnd16;
            												}
HXLINE(1496)												if ((tempRangeEnd16 == formatRange->end)) {
HXLINE(1143)													layoutGroup = null();
            												}
HXLINE(1496)												if ((tempRangeEnd16 == endIndex2)) {
HXLINE(1496)													goto _hx_goto_82;
            												}
HXDLIN(1496)												bool _hx_tmp87;
HXDLIN(1496)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1496)													rangeIndex = (rangeIndex + 1);
HXDLIN(1496)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1496)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1496)													_hx_tmp87 = true;
            												}
            												else {
HXLINE(1496)													_hx_tmp87 = false;
            												}
HXDLIN(1496)												if (!(_hx_tmp87)) {
HXLINE(1496)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1496)													goto _hx_goto_82;
            												}
HXDLIN(1496)												{
HXLINE(1496)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1496)														bool _hx_tmp88;
HXDLIN(1496)														if (hx::IsNotNull( font )) {
HXLINE(1496)															_hx_tmp88 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1496)															_hx_tmp88 = false;
            														}
HXDLIN(1496)														if (_hx_tmp88) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1496)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1496)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_82:;
            										}
HXLINE(1157)										textIndex = endIndex2;
            									}
            								}
            								else {
HXLINE(1500)									int tempRangeEnd17;
HXDLIN(1500)									if ((endIndex2 < formatRange->end)) {
HXLINE(1500)										tempRangeEnd17 = endIndex2;
            									}
            									else {
HXLINE(1500)										tempRangeEnd17 = formatRange->end;
            									}
HXLINE(1502)									if ((tempRangeEnd17 < endIndex2)) {
HXLINE(1504)										::String text34 = this->text;
HXDLIN(1504)										Float letterSpacing34 = ((Float)0.0);
HXDLIN(1504)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing34 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1504)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1504)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1504)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1504)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1504)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1504)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1504)										_gthis->_hx___textLayout->letterSpacing = letterSpacing34;
HXDLIN(1504)										bool positions24;
HXDLIN(1504)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1504)											positions24 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1504)											positions24 = true;
            										}
HXDLIN(1504)										_gthis->_hx___textLayout->autoHint = positions24;
HXDLIN(1504)										 ::openfl::text::_internal::TextLayout _gthis35 = _gthis->_hx___textLayout;
HXDLIN(1504)										_gthis35->set_text(text34.substring(textIndex,tempRangeEnd17));
HXDLIN(1504)										positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1505)										Float width37 = ((Float)0.0);
HXDLIN(1505)										int _g39 = 0;
HXDLIN(1505)										while((_g39 < positions->length)){
HXLINE(1505)											 ::openfl::text::_internal::GlyphPosition position37 = positions->__get(_g39).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1505)											_g39 = (_g39 + 1);
HXDLIN(1505)											width37 = (width37 + position37->advance->x);
            										}
HXDLIN(1505)										widthValue = width37;
            									}
HXLINE(1508)									layoutGroup->endIndex = tempRangeEnd17;
HXLINE(1509)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1510)									 ::openfl::text::_internal::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1510)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1512)									offsetX = (offsetX + widthValue);
HXLINE(1514)									if ((tempRangeEnd17 == formatRange->end)) {
HXLINE(1516)										layoutGroup = null();
HXLINE(1517)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1517)											rangeIndex = (rangeIndex + 1);
HXDLIN(1517)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1517)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1518)										{
HXLINE(1518)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1518)												bool _hx_tmp89;
HXDLIN(1518)												if (hx::IsNotNull( font )) {
HXLINE(1518)													_hx_tmp89 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1518)													_hx_tmp89 = false;
            												}
HXDLIN(1518)												if (_hx_tmp89) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1518)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1518)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
HXLINE(1520)										textIndex = tempRangeEnd17;
HXLINE(1522)										if ((tempRangeEnd17 != endIndex2)) {
HXLINE(1524)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1524)												::String text35 = _gthis->text;
HXDLIN(1524)												Float letterSpacing35 = ((Float)0.0);
HXDLIN(1524)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing35 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1524)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1524)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1524)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1524)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1524)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1524)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1524)												_gthis->_hx___textLayout->letterSpacing = letterSpacing35;
HXDLIN(1524)												bool positions25;
HXDLIN(1524)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1524)													positions25 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1524)													positions25 = true;
            												}
HXDLIN(1524)												_gthis->_hx___textLayout->autoHint = positions25;
HXDLIN(1524)												 ::openfl::text::_internal::TextLayout _gthis36 = _gthis->_hx___textLayout;
HXDLIN(1524)												_gthis36->set_text(text35.substring(textIndex,endIndex2));
HXDLIN(1524)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1524)												Float width38 = ((Float)0.0);
HXDLIN(1524)												int _g40 = 0;
HXDLIN(1524)												while((_g40 < positions->length)){
HXLINE(1524)													 ::openfl::text::_internal::GlyphPosition position38 = positions->__get(_g40).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1524)													_g40 = (_g40 + 1);
HXDLIN(1524)													width38 = (width38 + position38->advance->x);
            												}
HXDLIN(1524)												widthValue = width38;
HXDLIN(1524)												bool _hx_tmp90;
HXDLIN(1524)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1524)													_hx_tmp90 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1524)													_hx_tmp90 = true;
            												}
HXDLIN(1524)												if (_hx_tmp90) {
HXLINE( 923)													layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXLINE(1524)													_gthis->layoutGroups->push(layoutGroup);
            												}
            												else {
HXLINE(1524)													layoutGroup->format = formatRange->format;
HXDLIN(1524)													layoutGroup->startIndex = textIndex;
HXDLIN(1524)													layoutGroup->endIndex = endIndex2;
            												}
HXDLIN(1524)												layoutGroup->positions = positions;
HXDLIN(1524)												layoutGroup->offsetX = offsetX;
HXDLIN(1524)												layoutGroup->ascent = ascent;
HXDLIN(1524)												layoutGroup->descent = descent;
HXDLIN(1524)												layoutGroup->leading = leading;
HXDLIN(1524)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1524)												layoutGroup->offsetY = offsetY;
HXDLIN(1524)												layoutGroup->width = widthValue;
HXDLIN(1524)												layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1524)												offsetX = (offsetX + widthValue);
HXDLIN(1524)												if ((endIndex2 == formatRange->end)) {
HXLINE(1108)													layoutGroup = null();
HXLINE(1524)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1524)														rangeIndex = (rangeIndex + 1);
HXDLIN(1524)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1524)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXLINE(1524)													{
HXLINE(1524)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1524)															bool _hx_tmp91;
HXDLIN(1524)															if (hx::IsNotNull( font )) {
HXLINE(1524)																_hx_tmp91 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1524)																_hx_tmp91 = false;
            															}
HXDLIN(1524)															if (_hx_tmp91) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1524)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1524)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1524)												while(true){
HXLINE(1524)													int tempRangeEnd18;
HXDLIN(1524)													if ((endIndex2 < formatRange->end)) {
HXLINE(1524)														tempRangeEnd18 = endIndex2;
            													}
            													else {
HXLINE(1524)														tempRangeEnd18 = formatRange->end;
            													}
HXDLIN(1524)													if ((textIndex != tempRangeEnd18)) {
HXLINE(1524)														::String text36 = _gthis->text;
HXDLIN(1524)														Float letterSpacing36 = ((Float)0.0);
HXDLIN(1524)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)															letterSpacing36 = ( (Float)(formatRange->format->letterSpacing) );
            														}
HXLINE(1524)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1524)															_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1524)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1524)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1524)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1524)															_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            														}
HXDLIN(1524)														_gthis->_hx___textLayout->letterSpacing = letterSpacing36;
HXDLIN(1524)														bool positions26;
HXDLIN(1524)														if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1524)															positions26 = (_gthis->sharpness < 400);
            														}
            														else {
HXLINE(1524)															positions26 = true;
            														}
HXDLIN(1524)														_gthis->_hx___textLayout->autoHint = positions26;
HXDLIN(1524)														 ::openfl::text::_internal::TextLayout _gthis37 = _gthis->_hx___textLayout;
HXDLIN(1524)														_gthis37->set_text(text36.substring(textIndex,tempRangeEnd18));
HXDLIN(1524)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1524)														Float width39 = ((Float)0.0);
HXDLIN(1524)														int _g41 = 0;
HXDLIN(1524)														while((_g41 < positions->length)){
HXLINE(1524)															 ::openfl::text::_internal::GlyphPosition position39 = positions->__get(_g41).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1524)															_g41 = (_g41 + 1);
HXDLIN(1524)															width39 = (width39 + position39->advance->x);
            														}
HXDLIN(1524)														widthValue = width39;
HXDLIN(1524)														bool _hx_tmp92;
HXDLIN(1524)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1524)															_hx_tmp92 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1524)															_hx_tmp92 = true;
            														}
HXDLIN(1524)														if (_hx_tmp92) {
HXLINE( 923)															layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd18);
HXLINE(1524)															_gthis->layoutGroups->push(layoutGroup);
            														}
            														else {
HXLINE(1524)															layoutGroup->format = formatRange->format;
HXDLIN(1524)															layoutGroup->startIndex = textIndex;
HXDLIN(1524)															layoutGroup->endIndex = tempRangeEnd18;
            														}
HXDLIN(1524)														layoutGroup->positions = positions;
HXDLIN(1524)														layoutGroup->offsetX = offsetX;
HXDLIN(1524)														layoutGroup->ascent = ascent;
HXDLIN(1524)														layoutGroup->descent = descent;
HXDLIN(1524)														layoutGroup->leading = leading;
HXDLIN(1524)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1524)														layoutGroup->offsetY = offsetY;
HXDLIN(1524)														layoutGroup->width = widthValue;
HXDLIN(1524)														layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1524)														offsetX = (offsetX + widthValue);
HXLINE(1140)														textIndex = tempRangeEnd18;
            													}
HXLINE(1524)													if ((tempRangeEnd18 == formatRange->end)) {
HXLINE(1143)														layoutGroup = null();
            													}
HXLINE(1524)													if ((tempRangeEnd18 == endIndex2)) {
HXLINE(1524)														goto _hx_goto_86;
            													}
HXDLIN(1524)													bool _hx_tmp93;
HXDLIN(1524)													if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1524)														rangeIndex = (rangeIndex + 1);
HXDLIN(1524)														formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1524)														currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)														font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1524)														_hx_tmp93 = true;
            													}
            													else {
HXLINE(1524)														_hx_tmp93 = false;
            													}
HXDLIN(1524)													if (!(_hx_tmp93)) {
HXLINE(1524)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1524)														goto _hx_goto_86;
            													}
HXDLIN(1524)													{
HXLINE(1524)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)															ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)															descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            														}
            														else {
HXLINE(1524)															bool _hx_tmp94;
HXDLIN(1524)															if (hx::IsNotNull( font )) {
HXLINE(1524)																_hx_tmp94 = (font->unitsPerEM != 0);
            															}
            															else {
HXLINE(1524)																_hx_tmp94 = false;
            															}
HXDLIN(1524)															if (_hx_tmp94) {
HXLINE( 945)																ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)																descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            															}
            															else {
HXLINE( 951)																ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)																descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            															}
            														}
HXLINE( 955)														leading = ( (int)(currentFormat->leading) );
HXLINE( 957)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1524)														if ((heightValue > maxHeightValue)) {
HXLINE( 961)															maxHeightValue = heightValue;
            														}
HXLINE(1524)														if ((ascent > maxAscent)) {
HXLINE( 966)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_86:;
            											}
HXLINE(1157)											textIndex = endIndex2;
            										}
            									}
HXLINE(1530)									if ((breakIndex == endIndex2)) {
HXLINE(1530)										endIndex2 = (endIndex2 + 1);
            									}
HXLINE(1532)									textIndex = endIndex2;
            								}
            							}
            						}
HXLINE(1536)						int nextSpaceIndex = this->text.indexOf(HX_(" ",20,00,00,00),textIndex);
HXLINE(1541)						if ((breakIndex == previousSpaceIndex)) {
HXLINE(1543)							layoutGroup->endIndex = breakIndex;
HXLINE(1545)							if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < 0)) {
HXLINE(1548)								layoutGroup->positions->push(null());
            							}
HXLINE(1551)							textIndex = (breakIndex + 1);
            						}
HXLINE(1554)						previousSpaceIndex = spaceIndex;
HXLINE(1555)						spaceIndex = nextSpaceIndex;
HXLINE(1557)						bool _hx_tmp95;
HXDLIN(1557)						bool _hx_tmp96;
HXDLIN(1557)						bool _hx_tmp97;
HXDLIN(1557)						if ((breakIndex > -1)) {
HXLINE(1557)							_hx_tmp97 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1557)							_hx_tmp97 = false;
            						}
HXDLIN(1557)						if (_hx_tmp97) {
HXLINE(1557)							if ((spaceIndex <= breakIndex)) {
HXLINE(1557)								_hx_tmp96 = (spaceIndex == -1);
            							}
            							else {
HXLINE(1557)								_hx_tmp96 = true;
            							}
            						}
            						else {
HXLINE(1557)							_hx_tmp96 = false;
            						}
HXDLIN(1557)						if (!(_hx_tmp96)) {
HXLINE(1557)							_hx_tmp95 = (textIndex > this->text.length);
            						}
            						else {
HXLINE(1557)							_hx_tmp95 = true;
            						}
HXDLIN(1557)						if (_hx_tmp95) {
HXLINE(1560)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
            				else {
HXLINE(1566)					if ((textIndex < this->text.length)) {
HXLINE(1570)						{
HXLINE(1570)							int endIndex7 = this->text.length;
HXDLIN(1570)							if ((endIndex7 <= formatRange->end)) {
HXLINE(1570)								::String text37 = _gthis->text;
HXDLIN(1570)								Float letterSpacing37 = ((Float)0.0);
HXDLIN(1570)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)									letterSpacing37 = ( (Float)(formatRange->format->letterSpacing) );
            								}
HXLINE(1570)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1570)									_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1570)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1570)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1570)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1570)									_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            								}
HXDLIN(1570)								_gthis->_hx___textLayout->letterSpacing = letterSpacing37;
HXDLIN(1570)								bool positions27;
HXDLIN(1570)								if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1570)									positions27 = (_gthis->sharpness < 400);
            								}
            								else {
HXLINE(1570)									positions27 = true;
            								}
HXDLIN(1570)								_gthis->_hx___textLayout->autoHint = positions27;
HXDLIN(1570)								 ::openfl::text::_internal::TextLayout _gthis38 = _gthis->_hx___textLayout;
HXDLIN(1570)								_gthis38->set_text(text37.substring(textIndex,endIndex7));
HXDLIN(1570)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1570)								Float width40 = ((Float)0.0);
HXDLIN(1570)								int _g42 = 0;
HXDLIN(1570)								while((_g42 < positions->length)){
HXLINE(1570)									 ::openfl::text::_internal::GlyphPosition position40 = positions->__get(_g42).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1570)									_g42 = (_g42 + 1);
HXDLIN(1570)									width40 = (width40 + position40->advance->x);
            								}
HXDLIN(1570)								widthValue = width40;
            							}
            							else {
HXLINE(1570)								int tempIndex11 = textIndex;
HXDLIN(1570)								int tempRangeEnd19 = formatRange->end;
HXDLIN(1570)								int countRanges11 = 0;
HXLINE(1046)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)								widthValue = ( (Float)(0) );
HXLINE(1570)								while(true){
HXLINE(1570)									if ((tempIndex11 != tempRangeEnd19)) {
HXLINE(1570)										::String text38 = _gthis->text;
HXDLIN(1570)										Float letterSpacing38 = ((Float)0.0);
HXDLIN(1570)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing38 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1570)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1570)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1570)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1570)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1570)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1570)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1570)										_gthis->_hx___textLayout->letterSpacing = letterSpacing38;
HXDLIN(1570)										bool _hx_tmp98;
HXDLIN(1570)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1570)											_hx_tmp98 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1570)											_hx_tmp98 = true;
            										}
HXDLIN(1570)										_gthis->_hx___textLayout->autoHint = _hx_tmp98;
HXDLIN(1570)										 ::openfl::text::_internal::TextLayout _gthis39 = _gthis->_hx___textLayout;
HXDLIN(1570)										_gthis39->set_text(text38.substring(tempIndex11,tempRangeEnd19));
HXDLIN(1570)										::Array< ::Dynamic> tempPositions11 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)										positions = positions->concat(tempPositions11);
            									}
HXLINE(1570)									if ((tempRangeEnd19 != endIndex7)) {
HXLINE(1570)										bool _hx_tmp99;
HXDLIN(1570)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1570)											rangeIndex = (rangeIndex + 1);
HXDLIN(1570)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1570)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1570)											_hx_tmp99 = true;
            										}
            										else {
HXLINE(1570)											_hx_tmp99 = false;
            										}
HXDLIN(1570)										if (!(_hx_tmp99)) {
HXLINE(1570)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1570)											goto _hx_goto_89;
            										}
HXLINE(1065)										tempIndex11 = tempRangeEnd19;
HXLINE(1570)										if ((endIndex7 < formatRange->end)) {
HXLINE(1570)											tempRangeEnd19 = endIndex7;
            										}
            										else {
HXLINE(1570)											tempRangeEnd19 = formatRange->end;
            										}
HXDLIN(1570)										countRanges11 = (countRanges11 + 1);
            									}
            									else {
HXLINE(1570)										Float width41 = ((Float)0.0);
HXDLIN(1570)										int _g43 = 0;
HXDLIN(1570)										while((_g43 < positions->length)){
HXLINE(1570)											 ::openfl::text::_internal::GlyphPosition position41 = positions->__get(_g43).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1570)											_g43 = (_g43 + 1);
HXDLIN(1570)											width41 = (width41 + position41->advance->x);
            										}
HXDLIN(1570)										widthValue = width41;
HXDLIN(1570)										goto _hx_goto_89;
            									}
            								}
            								_hx_goto_89:;
HXDLIN(1570)								rangeIndex = (rangeIndex - (countRanges11 + 1));
HXDLIN(1570)								if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1570)									rangeIndex = (rangeIndex + 1);
HXDLIN(1570)									formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1570)									currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)									font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1571)						{
HXLINE(1571)							int endIndex8 = this->text.length;
HXDLIN(1571)							bool _hx_tmp100;
HXDLIN(1571)							if ((_gthis->width >= 4)) {
HXLINE(1571)								_hx_tmp100 = _gthis->wordWrap;
            							}
            							else {
HXLINE(1571)								_hx_tmp100 = false;
            							}
HXDLIN(1571)							if (_hx_tmp100) {
HXLINE(1571)								::Array< ::Dynamic> remainingPositions3 = positions;
HXDLIN(1571)								int i10;
HXDLIN(1571)								int bufferCount3;
HXDLIN(1571)								int placeIndex3;
HXDLIN(1571)								Float positionWidth3;
HXDLIN(1571)								 ::openfl::text::_internal::GlyphPosition currentPosition3;
HXDLIN(1571)								Float width42 = ((Float)0.0);
HXDLIN(1571)								{
HXLINE(1571)									int _g44 = 0;
HXDLIN(1571)									while((_g44 < remainingPositions3->length)){
HXLINE(1571)										 ::openfl::text::_internal::GlyphPosition position42 = remainingPositions3->__get(_g44).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)										_g44 = (_g44 + 1);
HXDLIN(1571)										width42 = (width42 + position42->advance->x);
            									}
            								}
HXDLIN(1571)								Float tempWidth3 = width42;
HXDLIN(1571)								while(((offsetX + tempWidth3) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1202)									bufferCount3 = 0;
HXDLIN(1202)									i10 = bufferCount3;
HXLINE(1203)									positionWidth3 = ((Float)0.0);
HXLINE(1571)									while(((offsetX + positionWidth3) < (_gthis->width - ( (Float)(2) )))){
HXLINE(1207)										currentPosition3 = remainingPositions3->__get(i10).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXLINE(1571)										if ((currentPosition3->advance->x == ((Float)0.0))) {
HXLINE(1571)											i10 = (i10 + 1);
HXDLIN(1571)											bufferCount3 = (bufferCount3 + 1);
            										}
            										else {
HXLINE(1571)											positionWidth3 = (positionWidth3 + currentPosition3->advance->x);
HXDLIN(1571)											i10 = (i10 + 1);
            										}
            									}
HXDLIN(1571)									if ((positionWidth3 == ((Float)0.0))) {
HXLINE(1571)										goto _hx_goto_92;
            									}
            									else {
HXLINE(1571)										bool _hx_tmp101;
HXDLIN(1571)										if ((i10 < 2)) {
HXLINE(1571)											_hx_tmp101 = ((positionWidth3 + offsetX) > (_gthis->width - ( (Float)(2) )));
            										}
            										else {
HXLINE(1571)											_hx_tmp101 = false;
            										}
HXDLIN(1571)										if (_hx_tmp101) {
HXLINE(1571)											if ((((textIndex + i10) - bufferCount3) == endIndex8)) {
HXLINE(1571)												goto _hx_goto_92;
            											}
            										}
            										else {
HXLINE(1571)											while(((offsetX + positionWidth3) > (_gthis->width - ( (Float)(2) )))){
HXLINE(1571)												i10 = (i10 - 1);
HXDLIN(1571)												if (((i10 - bufferCount3) > 0)) {
HXLINE(1571)													{
HXLINE(1571)														int endIndex9 = ((textIndex + i10) - bufferCount3);
HXDLIN(1571)														if ((endIndex9 <= formatRange->end)) {
HXLINE(1571)															::String text39 = _gthis->text;
HXDLIN(1571)															Float letterSpacing39 = ((Float)0.0);
HXDLIN(1571)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																letterSpacing39 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1571)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->letterSpacing = letterSpacing39;
HXDLIN(1571)															bool positions28;
HXDLIN(1571)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																positions28 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1571)																positions28 = true;
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->autoHint = positions28;
HXDLIN(1571)															 ::openfl::text::_internal::TextLayout _gthis40 = _gthis->_hx___textLayout;
HXDLIN(1571)															_gthis40->set_text(text39.substring(textIndex,endIndex9));
HXDLIN(1571)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)															Float width43 = ((Float)0.0);
HXDLIN(1571)															int _g45 = 0;
HXDLIN(1571)															while((_g45 < positions->length)){
HXLINE(1571)																 ::openfl::text::_internal::GlyphPosition position43 = positions->__get(_g45).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)																_g45 = (_g45 + 1);
HXDLIN(1571)																width43 = (width43 + position43->advance->x);
            															}
HXDLIN(1571)															widthValue = width43;
            														}
            														else {
HXLINE(1571)															int tempIndex12 = textIndex;
HXDLIN(1571)															int tempRangeEnd20 = formatRange->end;
HXDLIN(1571)															int countRanges12 = 0;
HXLINE(1046)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)															widthValue = ( (Float)(0) );
HXLINE(1571)															while(true){
HXLINE(1571)																if ((tempIndex12 != tempRangeEnd20)) {
HXLINE(1571)																	::String text40 = _gthis->text;
HXDLIN(1571)																	Float letterSpacing40 = ((Float)0.0);
HXDLIN(1571)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing40 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1571)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																		_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing40;
HXDLIN(1571)																	bool _hx_tmp102;
HXDLIN(1571)																	if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																		_hx_tmp102 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp102 = true;
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->autoHint = _hx_tmp102;
HXDLIN(1571)																	 ::openfl::text::_internal::TextLayout _gthis41 = _gthis->_hx___textLayout;
HXDLIN(1571)																	_gthis41->set_text(text40.substring(tempIndex12,tempRangeEnd20));
HXDLIN(1571)																	::Array< ::Dynamic> tempPositions12 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																	positions = positions->concat(tempPositions12);
            																}
HXLINE(1571)																if ((tempRangeEnd20 != endIndex9)) {
HXLINE(1571)																	bool _hx_tmp103;
HXDLIN(1571)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)																		_hx_tmp103 = true;
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp103 = false;
            																	}
HXDLIN(1571)																	if (!(_hx_tmp103)) {
HXLINE(1571)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)																		goto _hx_goto_96;
            																	}
HXLINE(1065)																	tempIndex12 = tempRangeEnd20;
HXLINE(1571)																	if ((endIndex9 < formatRange->end)) {
HXLINE(1571)																		tempRangeEnd20 = endIndex9;
            																	}
            																	else {
HXLINE(1571)																		tempRangeEnd20 = formatRange->end;
            																	}
HXDLIN(1571)																	countRanges12 = (countRanges12 + 1);
            																}
            																else {
HXLINE(1571)																	Float width44 = ((Float)0.0);
HXDLIN(1571)																	int _g46 = 0;
HXDLIN(1571)																	while((_g46 < positions->length)){
HXLINE(1571)																		 ::openfl::text::_internal::GlyphPosition position44 = positions->__get(_g46).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)																		_g46 = (_g46 + 1);
HXDLIN(1571)																		width44 = (width44 + position44->advance->x);
            																	}
HXDLIN(1571)																	widthValue = width44;
HXDLIN(1571)																	goto _hx_goto_96;
            																}
            															}
            															_hx_goto_96:;
HXDLIN(1571)															rangeIndex = (rangeIndex - (countRanges12 + 1));
HXDLIN(1571)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)																currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXLINE(1250)													positionWidth3 = widthValue;
            												}
            												else {
HXLINE(1256)													i10 = 1;
HXLINE(1257)													bufferCount3 = 0;
HXLINE(1571)													{
HXLINE(1571)														int endIndex10 = (textIndex + 1);
HXDLIN(1571)														if ((endIndex10 <= formatRange->end)) {
HXLINE(1571)															::String text41 = _gthis->text;
HXDLIN(1571)															Float letterSpacing41 = ((Float)0.0);
HXDLIN(1571)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																letterSpacing41 = ( (Float)(formatRange->format->letterSpacing) );
            															}
HXLINE(1571)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->letterSpacing = letterSpacing41;
HXDLIN(1571)															bool positions29;
HXDLIN(1571)															if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																positions29 = (_gthis->sharpness < 400);
            															}
            															else {
HXLINE(1571)																positions29 = true;
            															}
HXDLIN(1571)															_gthis->_hx___textLayout->autoHint = positions29;
HXDLIN(1571)															 ::openfl::text::_internal::TextLayout _gthis42 = _gthis->_hx___textLayout;
HXDLIN(1571)															_gthis42->set_text(text41.substring(textIndex,endIndex10));
HXDLIN(1571)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)															Float width45 = ((Float)0.0);
HXDLIN(1571)															int _g47 = 0;
HXDLIN(1571)															while((_g47 < positions->length)){
HXLINE(1571)																 ::openfl::text::_internal::GlyphPosition position45 = positions->__get(_g47).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)																_g47 = (_g47 + 1);
HXDLIN(1571)																width45 = (width45 + position45->advance->x);
            															}
HXDLIN(1571)															widthValue = width45;
            														}
            														else {
HXLINE(1571)															int tempIndex13 = textIndex;
HXDLIN(1571)															int tempRangeEnd21 = formatRange->end;
HXDLIN(1571)															int countRanges13 = 0;
HXLINE(1046)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)															widthValue = ( (Float)(0) );
HXLINE(1571)															while(true){
HXLINE(1571)																if ((tempIndex13 != tempRangeEnd21)) {
HXLINE(1571)																	::String text42 = _gthis->text;
HXDLIN(1571)																	Float letterSpacing42 = ((Float)0.0);
HXDLIN(1571)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)																		letterSpacing42 = ( (Float)(formatRange->format->letterSpacing) );
            																	}
HXLINE(1571)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)																		_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)																		_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing42;
HXDLIN(1571)																	bool _hx_tmp104;
HXDLIN(1571)																	if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)																		_hx_tmp104 = (_gthis->sharpness < 400);
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp104 = true;
            																	}
HXDLIN(1571)																	_gthis->_hx___textLayout->autoHint = _hx_tmp104;
HXDLIN(1571)																	 ::openfl::text::_internal::TextLayout _gthis43 = _gthis->_hx___textLayout;
HXDLIN(1571)																	_gthis43->set_text(text42.substring(tempIndex13,tempRangeEnd21));
HXDLIN(1571)																	::Array< ::Dynamic> tempPositions13 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)																	positions = positions->concat(tempPositions13);
            																}
HXLINE(1571)																if ((tempRangeEnd21 != endIndex10)) {
HXLINE(1571)																	bool _hx_tmp105;
HXDLIN(1571)																	if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																		rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																		formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)																		currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																		font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)																		_hx_tmp105 = true;
            																	}
            																	else {
HXLINE(1571)																		_hx_tmp105 = false;
            																	}
HXDLIN(1571)																	if (!(_hx_tmp105)) {
HXLINE(1571)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)																		goto _hx_goto_99;
            																	}
HXLINE(1065)																	tempIndex13 = tempRangeEnd21;
HXLINE(1571)																	if ((endIndex10 < formatRange->end)) {
HXLINE(1571)																		tempRangeEnd21 = endIndex10;
            																	}
            																	else {
HXLINE(1571)																		tempRangeEnd21 = formatRange->end;
            																	}
HXDLIN(1571)																	countRanges13 = (countRanges13 + 1);
            																}
            																else {
HXLINE(1571)																	Float width46 = ((Float)0.0);
HXDLIN(1571)																	int _g48 = 0;
HXDLIN(1571)																	while((_g48 < positions->length)){
HXLINE(1571)																		 ::openfl::text::_internal::GlyphPosition position46 = positions->__get(_g48).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)																		_g48 = (_g48 + 1);
HXDLIN(1571)																		width46 = (width46 + position46->advance->x);
            																	}
HXDLIN(1571)																	widthValue = width46;
HXDLIN(1571)																	goto _hx_goto_99;
            																}
            															}
            															_hx_goto_99:;
HXDLIN(1571)															rangeIndex = (rangeIndex - (countRanges13 + 1));
HXDLIN(1571)															if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)																rangeIndex = (rangeIndex + 1);
HXDLIN(1571)																formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)																currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)																font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXLINE(1260)													positionWidth3 = ( (Float)(0) );
            												}
            											}
            										}
            									}
HXLINE(1265)									placeIndex3 = ((textIndex + i10) - bufferCount3);
HXLINE(1571)									{
HXLINE(1571)										if ((placeIndex3 <= formatRange->end)) {
HXLINE(1571)											::String text43 = _gthis->text;
HXDLIN(1571)											Float letterSpacing43 = ((Float)0.0);
HXDLIN(1571)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing43 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1571)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->letterSpacing = letterSpacing43;
HXDLIN(1571)											bool positions30;
HXDLIN(1571)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)												positions30 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1571)												positions30 = true;
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->autoHint = positions30;
HXDLIN(1571)											 ::openfl::text::_internal::TextLayout _gthis44 = _gthis->_hx___textLayout;
HXDLIN(1571)											_gthis44->set_text(text43.substring(textIndex,placeIndex3));
HXDLIN(1571)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)											Float width47 = ((Float)0.0);
HXDLIN(1571)											int _g49 = 0;
HXDLIN(1571)											while((_g49 < positions->length)){
HXLINE(1571)												 ::openfl::text::_internal::GlyphPosition position47 = positions->__get(_g49).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)												_g49 = (_g49 + 1);
HXDLIN(1571)												width47 = (width47 + position47->advance->x);
            											}
HXDLIN(1571)											widthValue = width47;
HXDLIN(1571)											bool _hx_tmp106;
HXDLIN(1571)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1571)												_hx_tmp106 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1571)												_hx_tmp106 = true;
            											}
HXDLIN(1571)											if (_hx_tmp106) {
HXLINE( 923)												layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex3);
HXLINE(1571)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1571)												layoutGroup->format = formatRange->format;
HXDLIN(1571)												layoutGroup->startIndex = textIndex;
HXDLIN(1571)												layoutGroup->endIndex = placeIndex3;
            											}
HXDLIN(1571)											layoutGroup->positions = positions;
HXDLIN(1571)											layoutGroup->offsetX = offsetX;
HXDLIN(1571)											layoutGroup->ascent = ascent;
HXDLIN(1571)											layoutGroup->descent = descent;
HXDLIN(1571)											layoutGroup->leading = leading;
HXDLIN(1571)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)											layoutGroup->offsetY = offsetY;
HXDLIN(1571)											layoutGroup->width = widthValue;
HXDLIN(1571)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)											offsetX = (offsetX + widthValue);
HXDLIN(1571)											if ((placeIndex3 == formatRange->end)) {
HXLINE(1108)												layoutGroup = null();
HXLINE(1571)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)													rangeIndex = (rangeIndex + 1);
HXDLIN(1571)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXLINE(1571)												{
HXLINE(1571)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1571)														bool _hx_tmp107;
HXDLIN(1571)														if (hx::IsNotNull( font )) {
HXLINE(1571)															_hx_tmp107 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1571)															_hx_tmp107 = false;
            														}
HXDLIN(1571)														if (_hx_tmp107) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1571)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1571)											while(true){
HXLINE(1571)												int tempRangeEnd22;
HXDLIN(1571)												if ((placeIndex3 < formatRange->end)) {
HXLINE(1571)													tempRangeEnd22 = placeIndex3;
            												}
            												else {
HXLINE(1571)													tempRangeEnd22 = formatRange->end;
            												}
HXDLIN(1571)												if ((textIndex != tempRangeEnd22)) {
HXLINE(1571)													::String text44 = _gthis->text;
HXDLIN(1571)													Float letterSpacing44 = ((Float)0.0);
HXDLIN(1571)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)														letterSpacing44 = ( (Float)(formatRange->format->letterSpacing) );
            													}
HXLINE(1571)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)														_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1571)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)														_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            													}
HXDLIN(1571)													_gthis->_hx___textLayout->letterSpacing = letterSpacing44;
HXDLIN(1571)													bool positions31;
HXDLIN(1571)													if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)														positions31 = (_gthis->sharpness < 400);
            													}
            													else {
HXLINE(1571)														positions31 = true;
            													}
HXDLIN(1571)													_gthis->_hx___textLayout->autoHint = positions31;
HXDLIN(1571)													 ::openfl::text::_internal::TextLayout _gthis45 = _gthis->_hx___textLayout;
HXDLIN(1571)													_gthis45->set_text(text44.substring(textIndex,tempRangeEnd22));
HXDLIN(1571)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)													Float width48 = ((Float)0.0);
HXDLIN(1571)													int _g50 = 0;
HXDLIN(1571)													while((_g50 < positions->length)){
HXLINE(1571)														 ::openfl::text::_internal::GlyphPosition position48 = positions->__get(_g50).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)														_g50 = (_g50 + 1);
HXDLIN(1571)														width48 = (width48 + position48->advance->x);
            													}
HXDLIN(1571)													widthValue = width48;
HXDLIN(1571)													bool _hx_tmp108;
HXDLIN(1571)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1571)														_hx_tmp108 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1571)														_hx_tmp108 = true;
            													}
HXDLIN(1571)													if (_hx_tmp108) {
HXLINE( 923)														layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd22);
HXLINE(1571)														_gthis->layoutGroups->push(layoutGroup);
            													}
            													else {
HXLINE(1571)														layoutGroup->format = formatRange->format;
HXDLIN(1571)														layoutGroup->startIndex = textIndex;
HXDLIN(1571)														layoutGroup->endIndex = tempRangeEnd22;
            													}
HXDLIN(1571)													layoutGroup->positions = positions;
HXDLIN(1571)													layoutGroup->offsetX = offsetX;
HXDLIN(1571)													layoutGroup->ascent = ascent;
HXDLIN(1571)													layoutGroup->descent = descent;
HXDLIN(1571)													layoutGroup->leading = leading;
HXDLIN(1571)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)													layoutGroup->offsetY = offsetY;
HXDLIN(1571)													layoutGroup->width = widthValue;
HXDLIN(1571)													layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)													offsetX = (offsetX + widthValue);
HXLINE(1140)													textIndex = tempRangeEnd22;
            												}
HXLINE(1571)												if ((tempRangeEnd22 == formatRange->end)) {
HXLINE(1143)													layoutGroup = null();
            												}
HXLINE(1571)												if ((tempRangeEnd22 == placeIndex3)) {
HXLINE(1571)													goto _hx_goto_102;
            												}
HXDLIN(1571)												bool _hx_tmp109;
HXDLIN(1571)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)													rangeIndex = (rangeIndex + 1);
HXDLIN(1571)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)													_hx_tmp109 = true;
            												}
            												else {
HXLINE(1571)													_hx_tmp109 = false;
            												}
HXDLIN(1571)												if (!(_hx_tmp109)) {
HXLINE(1571)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)													goto _hx_goto_102;
            												}
HXDLIN(1571)												{
HXLINE(1571)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)														ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)														descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            													}
            													else {
HXLINE(1571)														bool _hx_tmp110;
HXDLIN(1571)														if (hx::IsNotNull( font )) {
HXLINE(1571)															_hx_tmp110 = (font->unitsPerEM != 0);
            														}
            														else {
HXLINE(1571)															_hx_tmp110 = false;
            														}
HXDLIN(1571)														if (_hx_tmp110) {
HXLINE( 945)															ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)															descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            														}
            														else {
HXLINE( 951)															ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)															descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            														}
            													}
HXLINE( 955)													leading = ( (int)(currentFormat->leading) );
HXLINE( 957)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)													if ((heightValue > maxHeightValue)) {
HXLINE( 961)														maxHeightValue = heightValue;
            													}
HXLINE(1571)													if ((ascent > maxAscent)) {
HXLINE( 966)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_102:;
            										}
HXLINE(1157)										textIndex = placeIndex3;
            									}
HXLINE(1571)									{
HXLINE(1571)										{
HXLINE(1571)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1571)												bool _hx_tmp111;
HXDLIN(1571)												if (hx::IsNotNull( font )) {
HXLINE(1571)													_hx_tmp111 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1571)													_hx_tmp111 = false;
            												}
HXDLIN(1571)												if (_hx_tmp111) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1571)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
HXLINE(1571)										int i11 = _gthis->layoutGroups->get_length();
HXDLIN(1571)										while(true){
HXLINE(1571)											i11 = (i11 - 1);
HXDLIN(1571)											if (!((i11 > -1))) {
HXLINE(1571)												goto _hx_goto_104;
            											}
HXDLIN(1571)											 ::openfl::text::_internal::TextLayoutGroup lg5 = _gthis->layoutGroups->get(i11).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1571)											if ((lg5->lineIndex < lineIndex)) {
HXLINE(1571)												goto _hx_goto_104;
            											}
HXDLIN(1571)											if ((lg5->lineIndex > lineIndex)) {
HXLINE(1571)												continue;
            											}
HXDLIN(1571)											lg5->ascent = maxAscent;
HXDLIN(1571)											lg5->height = ( (Float)(maxHeightValue) );
            										}
            										_hx_goto_104:;
HXDLIN(1571)										offsetY = (offsetY + maxHeightValue);
HXLINE(1182)										maxAscent = ((Float)0.0);
HXLINE(1183)										maxHeightValue = 0;
HXLINE(1571)										lineIndex = (lineIndex + 1);
HXLINE(1186)										offsetX = ( (Float)(2) );
            									}
HXLINE(1571)									if ((endIndex8 <= formatRange->end)) {
HXLINE(1571)										::String text45 = _gthis->text;
HXDLIN(1571)										Float letterSpacing45 = ((Float)0.0);
HXDLIN(1571)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)											letterSpacing45 = ( (Float)(formatRange->format->letterSpacing) );
            										}
HXLINE(1571)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)											_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1571)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)											_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            										}
HXDLIN(1571)										_gthis->_hx___textLayout->letterSpacing = letterSpacing45;
HXDLIN(1571)										bool positions32;
HXDLIN(1571)										if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)											positions32 = (_gthis->sharpness < 400);
            										}
            										else {
HXLINE(1571)											positions32 = true;
            										}
HXDLIN(1571)										_gthis->_hx___textLayout->autoHint = positions32;
HXDLIN(1571)										 ::openfl::text::_internal::TextLayout _gthis46 = _gthis->_hx___textLayout;
HXDLIN(1571)										_gthis46->set_text(text45.substring(placeIndex3,endIndex8));
HXDLIN(1571)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)										Float width49 = ((Float)0.0);
HXDLIN(1571)										int _g51 = 0;
HXDLIN(1571)										while((_g51 < positions->length)){
HXLINE(1571)											 ::openfl::text::_internal::GlyphPosition position49 = positions->__get(_g51).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)											_g51 = (_g51 + 1);
HXDLIN(1571)											width49 = (width49 + position49->advance->x);
            										}
HXDLIN(1571)										widthValue = width49;
            									}
            									else {
HXLINE(1571)										int tempIndex14 = placeIndex3;
HXDLIN(1571)										int tempRangeEnd23 = formatRange->end;
HXDLIN(1571)										int countRanges14 = 0;
HXLINE(1046)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1047)										widthValue = ( (Float)(0) );
HXLINE(1571)										while(true){
HXLINE(1571)											if ((tempIndex14 != tempRangeEnd23)) {
HXLINE(1571)												::String text46 = _gthis->text;
HXDLIN(1571)												Float letterSpacing46 = ((Float)0.0);
HXDLIN(1571)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)													letterSpacing46 = ( (Float)(formatRange->format->letterSpacing) );
            												}
HXLINE(1571)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)													_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1571)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)													_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            												}
HXDLIN(1571)												_gthis->_hx___textLayout->letterSpacing = letterSpacing46;
HXDLIN(1571)												bool _hx_tmp112;
HXDLIN(1571)												if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)													_hx_tmp112 = (_gthis->sharpness < 400);
            												}
            												else {
HXLINE(1571)													_hx_tmp112 = true;
            												}
HXDLIN(1571)												_gthis->_hx___textLayout->autoHint = _hx_tmp112;
HXDLIN(1571)												 ::openfl::text::_internal::TextLayout _gthis47 = _gthis->_hx___textLayout;
HXDLIN(1571)												_gthis47->set_text(text46.substring(tempIndex14,tempRangeEnd23));
HXDLIN(1571)												::Array< ::Dynamic> tempPositions14 = _gthis->_hx___textLayout->get_positions();
HXLINE(1054)												positions = positions->concat(tempPositions14);
            											}
HXLINE(1571)											if ((tempRangeEnd23 != endIndex8)) {
HXLINE(1571)												bool _hx_tmp113;
HXDLIN(1571)												if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)													rangeIndex = (rangeIndex + 1);
HXDLIN(1571)													formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)													currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)													font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)													_hx_tmp113 = true;
            												}
            												else {
HXLINE(1571)													_hx_tmp113 = false;
            												}
HXDLIN(1571)												if (!(_hx_tmp113)) {
HXLINE(1571)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1061,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)													goto _hx_goto_106;
            												}
HXLINE(1065)												tempIndex14 = tempRangeEnd23;
HXLINE(1571)												if ((endIndex8 < formatRange->end)) {
HXLINE(1571)													tempRangeEnd23 = endIndex8;
            												}
            												else {
HXLINE(1571)													tempRangeEnd23 = formatRange->end;
            												}
HXDLIN(1571)												countRanges14 = (countRanges14 + 1);
            											}
            											else {
HXLINE(1571)												Float width50 = ((Float)0.0);
HXDLIN(1571)												int _g52 = 0;
HXDLIN(1571)												while((_g52 < positions->length)){
HXLINE(1571)													 ::openfl::text::_internal::GlyphPosition position50 = positions->__get(_g52).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)													_g52 = (_g52 + 1);
HXDLIN(1571)													width50 = (width50 + position50->advance->x);
            												}
HXDLIN(1571)												widthValue = width50;
HXDLIN(1571)												goto _hx_goto_106;
            											}
            										}
            										_hx_goto_106:;
HXDLIN(1571)										rangeIndex = (rangeIndex - (countRanges14 + 1));
HXDLIN(1571)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)											rangeIndex = (rangeIndex + 1);
HXDLIN(1571)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
HXLINE(1271)									remainingPositions3 = positions;
HXLINE(1272)									tempWidth3 = widthValue;
            								}
            								_hx_goto_92:;
            							}
HXLINE(1571)							{
HXLINE(1571)								if ((endIndex8 <= formatRange->end)) {
HXLINE(1571)									::String text47 = _gthis->text;
HXDLIN(1571)									Float letterSpacing47 = ((Float)0.0);
HXDLIN(1571)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)										letterSpacing47 = ( (Float)(formatRange->format->letterSpacing) );
            									}
HXLINE(1571)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)										_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1571)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)										_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            									}
HXDLIN(1571)									_gthis->_hx___textLayout->letterSpacing = letterSpacing47;
HXDLIN(1571)									bool positions33;
HXDLIN(1571)									if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)										positions33 = (_gthis->sharpness < 400);
            									}
            									else {
HXLINE(1571)										positions33 = true;
            									}
HXDLIN(1571)									_gthis->_hx___textLayout->autoHint = positions33;
HXDLIN(1571)									 ::openfl::text::_internal::TextLayout _gthis48 = _gthis->_hx___textLayout;
HXDLIN(1571)									_gthis48->set_text(text47.substring(textIndex,endIndex8));
HXDLIN(1571)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)									Float width51 = ((Float)0.0);
HXDLIN(1571)									int _g53 = 0;
HXDLIN(1571)									while((_g53 < positions->length)){
HXLINE(1571)										 ::openfl::text::_internal::GlyphPosition position51 = positions->__get(_g53).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)										_g53 = (_g53 + 1);
HXDLIN(1571)										width51 = (width51 + position51->advance->x);
            									}
HXDLIN(1571)									widthValue = width51;
HXDLIN(1571)									bool _hx_tmp114;
HXDLIN(1571)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1571)										_hx_tmp114 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1571)										_hx_tmp114 = true;
            									}
HXDLIN(1571)									if (_hx_tmp114) {
HXLINE( 923)										layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex8);
HXLINE(1571)										_gthis->layoutGroups->push(layoutGroup);
            									}
            									else {
HXLINE(1571)										layoutGroup->format = formatRange->format;
HXDLIN(1571)										layoutGroup->startIndex = textIndex;
HXDLIN(1571)										layoutGroup->endIndex = endIndex8;
            									}
HXDLIN(1571)									layoutGroup->positions = positions;
HXDLIN(1571)									layoutGroup->offsetX = offsetX;
HXDLIN(1571)									layoutGroup->ascent = ascent;
HXDLIN(1571)									layoutGroup->descent = descent;
HXDLIN(1571)									layoutGroup->leading = leading;
HXDLIN(1571)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)									layoutGroup->offsetY = offsetY;
HXDLIN(1571)									layoutGroup->width = widthValue;
HXDLIN(1571)									layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)									offsetX = (offsetX + widthValue);
HXDLIN(1571)									if ((endIndex8 == formatRange->end)) {
HXLINE(1108)										layoutGroup = null();
HXLINE(1571)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)											rangeIndex = (rangeIndex + 1);
HXDLIN(1571)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1571)										{
HXLINE(1571)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1571)												bool _hx_tmp115;
HXDLIN(1571)												if (hx::IsNotNull( font )) {
HXLINE(1571)													_hx_tmp115 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1571)													_hx_tmp115 = false;
            												}
HXDLIN(1571)												if (_hx_tmp115) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1571)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1571)									while(true){
HXLINE(1571)										int tempRangeEnd24;
HXDLIN(1571)										if ((endIndex8 < formatRange->end)) {
HXLINE(1571)											tempRangeEnd24 = endIndex8;
            										}
            										else {
HXLINE(1571)											tempRangeEnd24 = formatRange->end;
            										}
HXDLIN(1571)										if ((textIndex != tempRangeEnd24)) {
HXLINE(1571)											::String text48 = _gthis->text;
HXDLIN(1571)											Float letterSpacing48 = ((Float)0.0);
HXDLIN(1571)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE( 788)												letterSpacing48 = ( (Float)(formatRange->format->letterSpacing) );
            											}
HXLINE(1571)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1571)												_gthis->_hx___textLayout =  ::openfl::text::_internal::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1571)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1571)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1571)												_gthis->_hx___textLayout->set_size(( (int)(formatRange->format->size) ));
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->letterSpacing = letterSpacing48;
HXDLIN(1571)											bool positions34;
HXDLIN(1571)											if (hx::IsEq( _gthis->antiAliasType,0 )) {
HXLINE(1571)												positions34 = (_gthis->sharpness < 400);
            											}
            											else {
HXLINE(1571)												positions34 = true;
            											}
HXDLIN(1571)											_gthis->_hx___textLayout->autoHint = positions34;
HXDLIN(1571)											 ::openfl::text::_internal::TextLayout _gthis49 = _gthis->_hx___textLayout;
HXDLIN(1571)											_gthis49->set_text(text48.substring(textIndex,tempRangeEnd24));
HXDLIN(1571)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1571)											Float width52 = ((Float)0.0);
HXDLIN(1571)											int _g54 = 0;
HXDLIN(1571)											while((_g54 < positions->length)){
HXLINE(1571)												 ::openfl::text::_internal::GlyphPosition position52 = positions->__get(_g54).StaticCast<  ::openfl::text::_internal::GlyphPosition >();
HXDLIN(1571)												_g54 = (_g54 + 1);
HXDLIN(1571)												width52 = (width52 + position52->advance->x);
            											}
HXDLIN(1571)											widthValue = width52;
HXDLIN(1571)											bool _hx_tmp116;
HXDLIN(1571)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1571)												_hx_tmp116 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1571)												_hx_tmp116 = true;
            											}
HXDLIN(1571)											if (_hx_tmp116) {
HXLINE( 923)												layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd24);
HXLINE(1571)												_gthis->layoutGroups->push(layoutGroup);
            											}
            											else {
HXLINE(1571)												layoutGroup->format = formatRange->format;
HXDLIN(1571)												layoutGroup->startIndex = textIndex;
HXDLIN(1571)												layoutGroup->endIndex = tempRangeEnd24;
            											}
HXDLIN(1571)											layoutGroup->positions = positions;
HXDLIN(1571)											layoutGroup->offsetX = offsetX;
HXDLIN(1571)											layoutGroup->ascent = ascent;
HXDLIN(1571)											layoutGroup->descent = descent;
HXDLIN(1571)											layoutGroup->leading = leading;
HXDLIN(1571)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1571)											layoutGroup->offsetY = offsetY;
HXDLIN(1571)											layoutGroup->width = widthValue;
HXDLIN(1571)											layoutGroup->height = ( (Float)(heightValue) );
HXDLIN(1571)											offsetX = (offsetX + widthValue);
HXLINE(1140)											textIndex = tempRangeEnd24;
            										}
HXLINE(1571)										if ((tempRangeEnd24 == formatRange->end)) {
HXLINE(1143)											layoutGroup = null();
            										}
HXLINE(1571)										if ((tempRangeEnd24 == endIndex8)) {
HXLINE(1571)											goto _hx_goto_109;
            										}
HXDLIN(1571)										bool _hx_tmp117;
HXDLIN(1571)										if ((rangeIndex < (_gthis->textFormatRanges->get_length() - 1))) {
HXLINE(1571)											rangeIndex = (rangeIndex + 1);
HXDLIN(1571)											formatRange = _gthis->textFormatRanges->get(rangeIndex).StaticCast<  ::openfl::text::_internal::TextFormatRange >();
HXDLIN(1571)											currentFormat->_hx___merge(formatRange->format);
HXLINE(1022)											font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(currentFormat);
HXLINE(1571)											_hx_tmp117 = true;
            										}
            										else {
HXLINE(1571)											_hx_tmp117 = false;
            										}
HXDLIN(1571)										if (!(_hx_tmp117)) {
HXLINE(1571)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("openfl/text/_internal/TextEngine.hx",39,18,5e,b8),1149,HX_("openfl.text._internal.TextEngine",04,88,80,7e),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1571)											goto _hx_goto_109;
            										}
HXDLIN(1571)										{
HXLINE(1571)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)												ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)												descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            											}
            											else {
HXLINE(1571)												bool _hx_tmp118;
HXDLIN(1571)												if (hx::IsNotNull( font )) {
HXLINE(1571)													_hx_tmp118 = (font->unitsPerEM != 0);
            												}
            												else {
HXLINE(1571)													_hx_tmp118 = false;
            												}
HXDLIN(1571)												if (_hx_tmp118) {
HXLINE( 945)													ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)													descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            												}
            												else {
HXLINE( 951)													ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)													descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            												}
            											}
HXLINE( 955)											leading = ( (int)(currentFormat->leading) );
HXLINE( 957)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1571)											if ((heightValue > maxHeightValue)) {
HXLINE( 961)												maxHeightValue = heightValue;
            											}
HXLINE(1571)											if ((ascent > maxAscent)) {
HXLINE( 966)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_109:;
            								}
HXLINE(1157)								textIndex = endIndex8;
            							}
            						}
HXLINE(1573)						{
HXLINE(1573)							{
HXLINE(1573)								if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 939)									ascent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___ascent) ));
HXLINE( 940)									descent = (( (Float)(currentFormat->size) ) * ( (Float)(currentFormat->_hx___descent) ));
            								}
            								else {
HXLINE(1573)									bool _hx_tmp119;
HXDLIN(1573)									if (hx::IsNotNull( font )) {
HXLINE(1573)										_hx_tmp119 = (font->unitsPerEM != 0);
            									}
            									else {
HXLINE(1573)										_hx_tmp119 = false;
            									}
HXDLIN(1573)									if (_hx_tmp119) {
HXLINE( 945)										ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) ));
HXLINE( 946)										descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(currentFormat->size) )));
            									}
            									else {
HXLINE( 951)										ascent = ( (Float)(currentFormat->size) );
HXLINE( 952)										descent = (( (Float)(currentFormat->size) ) * ((Float)0.185));
            									}
            								}
HXLINE( 955)								leading = ( (int)(currentFormat->leading) );
HXLINE( 957)								heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXLINE(1573)								if ((heightValue > maxHeightValue)) {
HXLINE( 961)									maxHeightValue = heightValue;
            								}
HXLINE(1573)								if ((ascent > maxAscent)) {
HXLINE( 966)									maxAscent = ascent;
            								}
            							}
HXLINE(1573)							int i12 = _gthis->layoutGroups->get_length();
HXDLIN(1573)							while(true){
HXLINE(1573)								i12 = (i12 - 1);
HXDLIN(1573)								if (!((i12 > -1))) {
HXLINE(1573)									goto _hx_goto_111;
            								}
HXDLIN(1573)								 ::openfl::text::_internal::TextLayoutGroup lg6 = _gthis->layoutGroups->get(i12).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1573)								if ((lg6->lineIndex < lineIndex)) {
HXLINE(1573)									goto _hx_goto_111;
            								}
HXDLIN(1573)								if ((lg6->lineIndex > lineIndex)) {
HXLINE(1573)									continue;
            								}
HXDLIN(1573)								lg6->ascent = maxAscent;
HXDLIN(1573)								lg6->height = ( (Float)(maxHeightValue) );
            							}
            							_hx_goto_111:;
HXDLIN(1573)							offsetY = (offsetY + maxHeightValue);
HXLINE(1182)							maxAscent = ((Float)0.0);
HXLINE(1183)							maxHeightValue = 0;
HXLINE(1573)							lineIndex = (lineIndex + 1);
HXLINE(1186)							offsetX = ( (Float)(2) );
            						}
            					}
HXLINE(1576)					textIndex = (textIndex + 1);
            				}
            			}
            		}
HXLINE(1581)		bool _hx_tmp120;
HXDLIN(1581)		if ((previousBreakIndex == (textIndex - 2))) {
HXLINE(1581)			_hx_tmp120 = (previousBreakIndex > -1);
            		}
            		else {
HXLINE(1581)			_hx_tmp120 = false;
            		}
HXDLIN(1581)		if (_hx_tmp120) {
HXLINE(1583)			bool _hx_tmp121;
HXDLIN(1583)			if (hx::IsNotNull( layoutGroup )) {
HXLINE(1583)				_hx_tmp121 = (layoutGroup->startIndex != layoutGroup->endIndex);
            			}
            			else {
HXLINE(1583)				_hx_tmp121 = true;
            			}
HXDLIN(1583)			if (_hx_tmp121) {
HXLINE( 923)				layoutGroup =  ::openfl::text::_internal::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,textIndex);
HXLINE(1583)				_gthis->layoutGroups->push(layoutGroup);
            			}
            			else {
HXLINE(1583)				layoutGroup->format = formatRange->format;
HXDLIN(1583)				layoutGroup->startIndex = textIndex;
HXDLIN(1583)				layoutGroup->endIndex = textIndex;
            			}
HXLINE(1585)			layoutGroup->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1586)			layoutGroup->ascent = ascent;
HXLINE(1587)			layoutGroup->descent = descent;
HXLINE(1588)			layoutGroup->leading = leading;
HXLINE(1589)			layoutGroup->lineIndex = lineIndex;
HXLINE(1590)			layoutGroup->offsetX = ( (Float)(2) );
HXLINE(1591)			layoutGroup->offsetY = offsetY;
HXLINE(1592)			layoutGroup->width = ( (Float)(0) );
HXLINE(1593)			layoutGroup->height = ( (Float)(heightValue) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1605_restrictText)
HXLINE(1606)		if (hx::IsNull( value )) {
HXLINE(1608)			return value;
            		}
HXLINE(1611)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1613)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1622)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1626_setTextAlignment)
HXLINE(1627)		int lineIndex = -1;
HXLINE(1628)		Float offsetX = ((Float)0.0);
HXLINE(1629)		Float totalWidth = (this->width - ( (Float)(4) ));
HXLINE(1630)		 ::openfl::text::_internal::TextLayoutGroup group;
HXDLIN(1630)		int lineLength;
HXLINE(1631)		bool lineMeasurementsDirty = false;
HXLINE(1633)		{
HXLINE(1633)			int _g = 0;
HXDLIN(1633)			int _g1 = this->layoutGroups->get_length();
HXDLIN(1633)			while((_g < _g1)){
HXLINE(1633)				_g = (_g + 1);
HXDLIN(1633)				int i = (_g - 1);
HXLINE(1635)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1637)				if ((group->lineIndex != lineIndex)) {
HXLINE(1639)					lineIndex = group->lineIndex;
HXLINE(1640)					totalWidth = ((this->width - ( (Float)(4) )) - ( (Float)(group->format->rightMargin) ));
HXLINE(1642)					 ::Dynamic _hx_switch_0 = group->format->align;
            					if (  (_hx_switch_0==0) ){
HXLINE(1645)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1647)							offsetX = ( (Float)(::Math_obj::round(((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)(2) )))) );
            						}
            						else {
HXLINE(1651)							offsetX = ( (Float)(0) );
            						}
HXLINE(1645)						goto _hx_goto_115;
            					}
            					if (  (_hx_switch_0==2) ){
HXLINE(1665)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1667)							lineLength = 1;
HXLINE(1669)							{
HXLINE(1669)								int _g2 = (i + 1);
HXDLIN(1669)								int _g11 = this->layoutGroups->get_length();
HXDLIN(1669)								while((_g2 < _g11)){
HXLINE(1669)									_g2 = (_g2 + 1);
HXDLIN(1669)									int j = (_g2 - 1);
HXLINE(1671)									if ((this->layoutGroups->get(j).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >()->lineIndex == lineIndex)) {
HXLINE(1673)										bool _hx_tmp;
HXDLIN(1673)										if ((j != 0)) {
HXLINE(1673)											::String _hx_tmp1 = this->text;
HXDLIN(1673)											_hx_tmp = hx::IsEq( _hx_tmp1.charCodeAt((this->layoutGroups->get(j).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >()->startIndex - 1)),32 );
            										}
            										else {
HXLINE(1673)											_hx_tmp = true;
            										}
HXDLIN(1673)										if (_hx_tmp) {
HXLINE(1675)											lineLength = (lineLength + 1);
            										}
            									}
            									else {
HXLINE(1680)										goto _hx_goto_116;
            									}
            								}
            								_hx_goto_116:;
            							}
HXLINE(1684)							if ((lineLength > 1)) {
HXLINE(1686)								group = this->layoutGroups->get(((i + lineLength) - 1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXLINE(1688)								 ::Dynamic endChar = this->text.charCodeAt(group->endIndex);
HXLINE(1689)								bool _hx_tmp2;
HXDLIN(1689)								bool _hx_tmp3;
HXDLIN(1689)								if ((group->endIndex < this->text.length)) {
HXLINE(1689)									_hx_tmp3 = hx::IsNotEq( endChar,10 );
            								}
            								else {
HXLINE(1689)									_hx_tmp3 = false;
            								}
HXDLIN(1689)								if (_hx_tmp3) {
HXLINE(1689)									_hx_tmp2 = hx::IsNotEq( endChar,13 );
            								}
            								else {
HXLINE(1689)									_hx_tmp2 = false;
            								}
HXDLIN(1689)								if (_hx_tmp2) {
HXLINE(1691)									offsetX = ((totalWidth - this->lineWidths->get(lineIndex)) / ( (Float)((lineLength - 1)) ));
HXLINE(1692)									lineMeasurementsDirty = true;
HXLINE(1694)									int j1 = 1;
HXLINE(1695)									while(true){
HXLINE(1704)										 ::openfl::text::_internal::TextLayoutGroup _hx_tmp4 = this->layoutGroups->get((i + j1)).StaticCast<  ::openfl::text::_internal::TextLayoutGroup >();
HXDLIN(1704)										_hx_tmp4->offsetX = (_hx_tmp4->offsetX + (offsetX * ( (Float)(j1) )));
HXLINE(1706)										j1 = (j1 + 1);
HXLINE(1695)										if (!((j1 < lineLength))) {
HXLINE(1695)											goto _hx_goto_117;
            										}
            									}
            									_hx_goto_117:;
            								}
            							}
            						}
HXLINE(1711)						offsetX = ( (Float)(0) );
HXLINE(1664)						goto _hx_goto_115;
            					}
            					if (  (_hx_switch_0==4) ){
HXLINE(1655)						if ((this->lineWidths->get(lineIndex) < totalWidth)) {
HXLINE(1657)							offsetX = ( (Float)(::Math_obj::round((totalWidth - this->lineWidths->get(lineIndex)))) );
            						}
            						else {
HXLINE(1661)							offsetX = ( (Float)(0) );
            						}
HXLINE(1655)						goto _hx_goto_115;
            					}
            					/* default */{
HXLINE(1714)						offsetX = ( (Float)(0) );
            					}
            					_hx_goto_115:;
            				}
HXLINE(1718)				if ((offsetX > 0)) {
HXLINE(1720)					 ::openfl::text::_internal::TextLayoutGroup group1 = group;
HXDLIN(1720)					group1->offsetX = (group1->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1724)		if (lineMeasurementsDirty) {
HXLINE(1728)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1733_trimText)
HXLINE(1734)		if (hx::IsNull( value )) {
HXLINE(1736)			return value;
            		}
HXLINE(1739)		bool _hx_tmp;
HXDLIN(1739)		if ((this->maxChars > 0)) {
HXLINE(1739)			_hx_tmp = (value.length > this->maxChars);
            		}
            		else {
HXLINE(1739)			_hx_tmp = false;
            		}
HXDLIN(1739)		if (_hx_tmp) {
HXLINE(1741)			value = value.substr(0,this->maxChars);
            		}
HXLINE(1744)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1748_update)
HXLINE(1749)		bool _hx_tmp;
HXDLIN(1749)		if (hx::IsNotNull( this->text )) {
HXLINE(1749)			_hx_tmp = (this->textFormatRanges->get_length() == 0);
            		}
            		else {
HXLINE(1749)			_hx_tmp = true;
            		}
HXDLIN(1749)		if (_hx_tmp) {
HXLINE(1751)			this->lineAscents->set_length(0);
HXLINE(1752)			this->lineBreaks->set_length(0);
HXLINE(1753)			this->lineDescents->set_length(0);
HXLINE(1754)			this->lineLeadings->set_length(0);
HXLINE(1755)			this->lineHeights->set_length(0);
HXLINE(1756)			this->lineWidths->set_length(0);
HXLINE(1757)			this->layoutGroups->set_length(0);
HXLINE(1759)			this->textWidth = ( (Float)(0) );
HXLINE(1760)			this->textHeight = ( (Float)(0) );
HXLINE(1761)			this->numLines = 1;
HXLINE(1762)			this->maxScrollH = 0;
HXLINE(1763)			this->maxScrollV = 1;
HXLINE(1764)			this->bottomScrollV = 1;
            		}
            		else {
HXLINE(1768)			this->getLayoutGroups();
HXLINE(1769)			this->getLineMeasurements();
HXLINE(1770)			this->setTextAlignment();
            		}
HXLINE(1773)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

int TextEngine_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1780_get_bottomScrollV)
HXDLIN(1780)		bool _hx_tmp;
HXDLIN(1780)		if ((this->numLines != 1)) {
HXDLIN(1780)			_hx_tmp = hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1780)			_hx_tmp = true;
            		}
HXDLIN(1780)		if (_hx_tmp) {
HXLINE(1782)			return 1;
            		}
            		else {
HXLINE(1786)			Float tempHeight = ((Float)0.0);
HXLINE(1787)			int ret = this->lineHeights->get_length();
HXLINE(1789)			{
HXLINE(1789)				int _g = (ret - 1);
HXDLIN(1789)				int _g1 = this->lineHeights->get_length();
HXDLIN(1789)				while((_g < _g1)){
HXLINE(1789)					_g = (_g + 1);
HXDLIN(1789)					int i = (_g - 1);
HXLINE(1791)					Float _hx_tmp1 = (tempHeight + this->lineHeights->get(i));
HXDLIN(1791)					if ((_hx_tmp1 <= (this->height - ( (Float)(4) )))) {
HXLINE(1793)						tempHeight = (tempHeight + this->lineHeights->get(i));
            					}
            					else {
HXLINE(1797)						ret = i;
HXLINE(1798)						goto _hx_goto_121;
            					}
            				}
            				_hx_goto_121:;
            			}
HXLINE(1802)			if ((ret < 1)) {
HXLINE(1802)				return 1;
            			}
HXLINE(1803)			return ret;
            		}
HXLINE(1780)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_bottomScrollV,return )

int TextEngine_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1810_get_maxScrollV)
HXDLIN(1810)		bool _hx_tmp;
HXDLIN(1810)		if ((this->numLines != 1)) {
HXDLIN(1810)			_hx_tmp = hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1810)			_hx_tmp = true;
            		}
HXDLIN(1810)		if (_hx_tmp) {
HXLINE(1812)			return 1;
            		}
            		else {
HXLINE(1816)			int i = (this->numLines - 1);
HXDLIN(1816)			Float tempHeight = ((Float)0.0);
HXLINE(1818)			if (hx::IsEq( this->text.charCodeAt((this->text.length - 1)),10 )) {
HXLINE(1818)				i = (i - 1);
            			}
HXLINE(1819)			int j = i;
HXLINE(1821)			while((i >= 0)){
HXLINE(1823)				Float _hx_tmp1 = (tempHeight + this->lineHeights->get(i));
HXDLIN(1823)				if ((_hx_tmp1 <= (this->height - ( (Float)(4) )))) {
HXLINE(1825)					tempHeight = (tempHeight + this->lineHeights->get(i));
HXLINE(1826)					i = (i - 1);
            				}
            				else {
HXLINE(1829)					goto _hx_goto_123;
            				}
            			}
            			_hx_goto_123:;
HXLINE(1832)			if ((i == j)) {
HXLINE(1832)				i = this->numLines;
            			}
            			else {
HXLINE(1835)				i = (i + 2);
            			}
HXLINE(1837)			if ((i < 1)) {
HXLINE(1837)				return 1;
            			}
HXLINE(1838)			return i;
            		}
HXLINE(1810)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_maxScrollV,return )

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1843_set_restrict)
HXLINE(1844)		if ((this->restrict == value)) {
HXLINE(1846)			return this->restrict;
            		}
HXLINE(1849)		this->restrict = value;
HXLINE(1851)		bool _hx_tmp;
HXDLIN(1851)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1851)			_hx_tmp = (this->restrict.length == 0);
            		}
            		else {
HXLINE(1851)			_hx_tmp = true;
            		}
HXDLIN(1851)		if (_hx_tmp) {
HXLINE(1853)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1857)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1860)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

int TextEngine_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1864_get_scrollV)
HXLINE(1865)		bool _hx_tmp;
HXDLIN(1865)		if ((this->numLines != 1)) {
HXLINE(1865)			_hx_tmp = hx::IsNull( this->lineHeights );
            		}
            		else {
HXLINE(1865)			_hx_tmp = true;
            		}
HXDLIN(1865)		if (_hx_tmp) {
HXLINE(1865)			return 1;
            		}
HXLINE(1867)		int max = this->get_maxScrollV();
HXLINE(1868)		if ((this->scrollV > max)) {
HXLINE(1868)			return max;
            		}
HXLINE(1869)		return this->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_scrollV,return )

int TextEngine_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1873_set_scrollV)
HXLINE(1874)		if ((value < 1)) {
HXLINE(1874)			value = 1;
            		}
HXLINE(1875)		return (this->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_scrollV,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_1880_set_text)
HXDLIN(1880)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::GUTTER;

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_176_findFont)
HXLINE( 180)		{
HXLINE( 180)			int _g = 0;
HXDLIN( 180)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 180)			while((_g < _g1->length)){
HXLINE( 180)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 180)				_g = (_g + 1);
HXLINE( 182)				if (hx::IsNull( registeredFont )) {
HXLINE( 182)					continue;
            				}
HXLINE( 184)				bool _hx_tmp;
HXDLIN( 184)				if ((registeredFont->name != name)) {
HXLINE( 185)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 186)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 184)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 184)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 184)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 184)					_hx_tmp = true;
            				}
HXDLIN( 184)				if (_hx_tmp) {
HXLINE( 188)					if (registeredFont->_hx___initialize()) {
HXLINE( 190)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 199)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 201)		if (hx::IsNotNull( font )) {
HXLINE( 203)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 204)			return font;
            		}
HXLINE( 208)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_212_findFontVariant)
HXLINE( 213)		::String fontName = format->font;
HXLINE( 214)		 ::Dynamic bold = format->bold;
HXLINE( 215)		 ::Dynamic italic = format->italic;
HXLINE( 217)		if (hx::IsNull( fontName )) {
HXLINE( 217)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 218)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 220)		bool _hx_tmp;
HXDLIN( 220)		bool _hx_tmp1;
HXDLIN( 220)		if (( (bool)(bold) )) {
HXLINE( 220)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 220)			_hx_tmp1 = false;
            		}
HXDLIN( 220)		if (_hx_tmp1) {
HXLINE( 220)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 220)			_hx_tmp = false;
            		}
HXDLIN( 220)		if (_hx_tmp) {
HXLINE( 222)			return ::openfl::text::_internal::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 224)			bool _hx_tmp2;
HXDLIN( 224)			if (( (bool)(bold) )) {
HXLINE( 224)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 224)				_hx_tmp2 = false;
            			}
HXDLIN( 224)			if (_hx_tmp2) {
HXLINE( 226)				return ::openfl::text::_internal::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 228)				bool _hx_tmp3;
HXDLIN( 228)				if (( (bool)(italic) )) {
HXLINE( 228)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 228)					_hx_tmp3 = false;
            				}
HXDLIN( 228)				if (_hx_tmp3) {
HXLINE( 230)					return ::openfl::text::_internal::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 233)		return ::openfl::text::_internal::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_262_getFormatHeight)
HXLINE( 263)		Float ascent;
HXDLIN( 263)		Float descent;
HXLINE( 269)		 ::openfl::text::Font font = ::openfl::text::_internal::TextEngine_obj::getFontInstance(format);
HXLINE( 271)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 273)			ascent = (( (Float)(format->size) ) * ( (Float)(format->_hx___ascent) ));
HXLINE( 274)			descent = (( (Float)(format->size) ) * ( (Float)(format->_hx___descent) ));
            		}
            		else {
HXLINE( 276)			bool _hx_tmp;
HXDLIN( 276)			if (hx::IsNotNull( font )) {
HXLINE( 276)				_hx_tmp = (font->unitsPerEM != 0);
            			}
            			else {
HXLINE( 276)				_hx_tmp = false;
            			}
HXDLIN( 276)			if (_hx_tmp) {
HXLINE( 279)				ascent = ((( (Float)(font->ascender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) ));
HXLINE( 280)				descent = ::Math_obj::abs(((( (Float)(font->descender) ) / ( (Float)(font->unitsPerEM) )) * ( (Float)(format->size) )));
            			}
            			else {
HXLINE( 288)				ascent = ( (Float)(format->size) );
HXLINE( 289)				descent = (( (Float)(format->size) ) * ((Float)0.185));
            			}
            		}
HXLINE( 263)		int leading = ( (int)(format->leading) );
HXLINE( 294)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_298_getFont)
HXLINE( 299)		::String fontName = format->font;
HXLINE( 300)		 ::Dynamic bold = format->bold;
HXLINE( 301)		 ::Dynamic italic = format->italic;
HXLINE( 303)		if (hx::IsNull( fontName )) {
HXLINE( 303)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 304)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 306)		bool _hx_tmp;
HXDLIN( 306)		bool _hx_tmp1;
HXDLIN( 306)		if (( (bool)(bold) )) {
HXLINE( 306)			_hx_tmp1 = ( (bool)(italic) );
            		}
            		else {
HXLINE( 306)			_hx_tmp1 = false;
            		}
HXDLIN( 306)		if (_hx_tmp1) {
HXLINE( 306)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 306)			_hx_tmp = false;
            		}
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 308)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 309)			bold = false;
HXLINE( 310)			italic = false;
            		}
            		else {
HXLINE( 312)			bool _hx_tmp2;
HXDLIN( 312)			if (( (bool)(bold) )) {
HXLINE( 312)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 312)				_hx_tmp2 = false;
            			}
HXDLIN( 312)			if (_hx_tmp2) {
HXLINE( 314)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 315)				bold = false;
            			}
            			else {
HXLINE( 317)				bool _hx_tmp3;
HXDLIN( 317)				if (( (bool)(italic) )) {
HXLINE( 317)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 317)					_hx_tmp3 = false;
            				}
HXDLIN( 317)				if (_hx_tmp3) {
HXLINE( 319)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 320)					italic = false;
            				}
            				else {
HXLINE( 326)					bool _hx_tmp4;
HXDLIN( 326)					if (( (bool)(bold) )) {
HXLINE( 326)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= -1)) {
HXLINE( 326)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 326)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 326)						_hx_tmp4 = false;
            					}
HXDLIN( 326)					if (_hx_tmp4) {
HXLINE( 328)						bold = false;
            					}
HXLINE( 331)					bool _hx_tmp5;
HXDLIN( 331)					if (( (bool)(italic) )) {
HXLINE( 331)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= -1)) {
HXLINE( 331)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 331)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 331)						_hx_tmp5 = false;
            					}
HXDLIN( 331)					if (_hx_tmp5) {
HXLINE( 333)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 337)		::String font;
HXDLIN( 337)		if (( (bool)(italic) )) {
HXLINE( 337)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 337)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 338)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 339)		::String font1;
HXDLIN( 339)		if (( (bool)(bold) )) {
HXLINE( 339)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 339)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 339)		font = (font + font1);
HXLINE( 340)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 341)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + 3)) + HX_("px ",18,65,55,00)));
HXLINE( 343)		::String font2;
HXDLIN( 343)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 343)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 343)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 343)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 343)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 343)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 343)			goto _hx_goto_133;
            		}
            		/* default */{
HXLINE( 343)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_133:;
HXDLIN( 343)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 351)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_355_getFontInstance)
HXLINE( 359)		 ::openfl::text::Font instance = null();
HXLINE( 360)		::Array< ::String > fontList = null();
HXLINE( 362)		bool _hx_tmp;
HXDLIN( 362)		if (hx::IsNotNull( format )) {
HXLINE( 362)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 362)			_hx_tmp = false;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 364)			if (::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 366)				return ( ( ::openfl::text::Font)(::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts->get(format->font)) );
            			}
HXLINE( 369)			instance = ::openfl::text::_internal::TextEngine_obj::findFontVariant(format);
HXLINE( 370)			if (hx::IsNotNull( instance )) {
HXLINE( 370)				return instance;
            			}
HXLINE( 372)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 374)			::String _hx_switch_0 = format->font;
            			if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 378)				if (( (bool)(format->bold) )) {
HXLINE( 380)					if (( (bool)(format->italic) )) {
HXLINE( 382)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            					}
            					else {
HXLINE( 386)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            					}
            				}
            				else {
HXLINE( 391)					if (( (bool)(format->italic) )) {
HXLINE( 393)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            					}
            					else {
HXLINE( 397)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            					}
            				}
HXLINE( 378)				goto _hx_goto_135;
            			}
            			if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 420)				goto _hx_goto_135;
            			}
            			if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 426)				if (( (bool)(format->bold) )) {
HXLINE( 428)					if (( (bool)(format->italic) )) {
HXLINE( 430)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            					}
            					else {
HXLINE( 434)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            					}
            				}
            				else {
HXLINE( 439)					if (( (bool)(format->italic) )) {
HXLINE( 441)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            					}
            					else {
HXLINE( 445)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            					}
            				}
HXLINE( 426)				goto _hx_goto_135;
            			}
            			/* default */{
HXLINE( 469)				fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            			}
            			_hx_goto_135:;
HXLINE( 472)			if (hx::IsNotNull( fontList )) {
HXLINE( 474)				int _g1 = 0;
HXDLIN( 474)				while((_g1 < fontList->length)){
HXLINE( 474)					::String font = fontList->__get(_g1);
HXDLIN( 474)					_g1 = (_g1 + 1);
HXLINE( 476)					instance = ::openfl::text::_internal::TextEngine_obj::findFont(font);
HXLINE( 478)					if (hx::IsNotNull( instance )) {
HXLINE( 480)						::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 481)						return instance;
            					}
            				}
            			}
HXLINE( 486)			instance = ::openfl::text::_internal::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 487)			if (hx::IsNotNull( instance )) {
HXLINE( 487)				return instance;
            			}
            		}
HXLINE( 490)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 493)		if (( (bool)(format->bold) )) {
HXLINE( 495)			if (( (bool)(format->italic) )) {
HXLINE( 497)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 501)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 506)			if (( (bool)(format->italic) )) {
HXLINE( 508)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 512)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 534)		{
HXLINE( 534)			int _g = 0;
HXDLIN( 534)			while((_g < fontList->length)){
HXLINE( 534)				::String font1 = fontList->__get(_g);
HXDLIN( 534)				_g = (_g + 1);
HXLINE( 536)				instance = ::openfl::text::_internal::TextEngine_obj::findFont(font1);
HXLINE( 538)				if (hx::IsNotNull( instance )) {
HXLINE( 540)					::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 541)					return instance;
            				}
            			}
            		}
HXLINE( 545)		{
HXLINE( 545)			 ::openfl::text::Font value = null();
HXDLIN( 545)			::openfl::text::_internal::TextEngine_obj::_hx___defaultFonts->set(format->font,value);
            		}
HXLINE( 548)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl.text._internal.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_scrollV() : scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_maxScrollV() : maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_bottomScrollV() : bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) );scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::text::_internal::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("antiAliasType",68,c4,fa,e7));
	outFields->push(HX_("autoSize",d0,8f,79,2f));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("backgroundColor",95,4e,47,0d));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("borderColor",d7,3c,d5,d6));
	outFields->push(HX_("bottomScrollV",fe,f7,87,8b));
	outFields->push(HX_("bounds",75,86,1d,66));
	outFields->push(HX_("caretIndex",8f,b6,5b,dd));
	outFields->push(HX_("embedFonts",2b,c7,e1,8e));
	outFields->push(HX_("gridFitType",05,f3,13,b4));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("layoutGroups",9e,a2,6c,37));
	outFields->push(HX_("lineAscents",45,0c,c2,3e));
	outFields->push(HX_("lineBreaks",e8,fd,5b,ea));
	outFields->push(HX_("lineDescents",0d,ad,64,49));
	outFields->push(HX_("lineLeadings",01,23,97,76));
	outFields->push(HX_("lineHeights",18,99,8e,3e));
	outFields->push(HX_("lineWidths",c1,8a,a4,20));
	outFields->push(HX_("maxChars",99,ef,d0,ef));
	outFields->push(HX_("maxScrollH",57,ad,fc,9a));
	outFields->push(HX_("maxScrollV",65,ad,fc,9a));
	outFields->push(HX_("multiline",ed,d2,11,9e));
	outFields->push(HX_("numLines",d9,f1,11,32));
	outFields->push(HX_("restrict",3c,cb,9e,f1));
	outFields->push(HX_("scrollH",9b,33,d8,30));
	outFields->push(HX_("scrollV",a9,33,d8,30));
	outFields->push(HX_("selectable",96,b6,2a,c4));
	outFields->push(HX_("sharpness",81,22,25,1b));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("textBounds",02,07,0e,9d));
	outFields->push(HX_("textHeight",74,88,3c,39));
	outFields->push(HX_("textFormatRanges",fa,0e,49,a2));
	outFields->push(HX_("textWidth",19,46,50,63));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("wordWrap",b4,14,db,00));
	outFields->push(HX_("textField",cd,24,81,99));
	outFields->push(HX_("__cursorTimer",ef,59,8f,e1));
	outFields->push(HX_("__hasFocus",3e,1d,1a,34));
	outFields->push(HX_("__isKeyDown",b7,2f,72,ce));
	outFields->push(HX_("__measuredHeight",ed,b6,23,42));
	outFields->push(HX_("__measuredWidth",c0,49,ec,02));
	outFields->push(HX_("__restrictRegexp",45,9f,ae,a9));
	outFields->push(HX_("__selectionStart",96,e3,b9,43));
	outFields->push(HX_("__showCursor",d3,ae,f0,e0));
	outFields->push(HX_("__textFormat",e4,8a,12,6d));
	outFields->push(HX_("__textLayout",57,aa,3c,c8));
	outFields->push(HX_("__texture",bb,19,2f,20));
	outFields->push(HX_("__useIntAdvances",d9,17,72,7d));
	outFields->push(HX_("__cairoFont",57,e7,b5,28));
	outFields->push(HX_("__font",ef,c0,b8,f2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_("antiAliasType",68,c4,fa,e7)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,autoSize),HX_("autoSize",d0,8f,79,2f)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_("background",ee,93,1d,26)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_("backgroundColor",95,4e,47,0d)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_("border",ec,4c,1a,64)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_("borderColor",d7,3c,d5,d6)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_("bottomScrollV",fe,f7,87,8b)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,bounds),HX_("bounds",75,86,1d,66)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_("caretIndex",8f,b6,5b,dd)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_("embedFonts",2b,c7,e1,8e)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,gridFitType),HX_("gridFitType",05,f3,13,b4)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_("layoutGroups",9e,a2,6c,37)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineAscents),HX_("lineAscents",45,0c,c2,3e)},
	{hx::fsObject /*  ::openfl::_Vector::IntVector */ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_("lineBreaks",e8,fd,5b,ea)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineDescents),HX_("lineDescents",0d,ad,64,49)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_("lineLeadings",01,23,97,76)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineHeights),HX_("lineHeights",18,99,8e,3e)},
	{hx::fsObject /*  ::openfl::_Vector::FloatVector */ ,(int)offsetof(TextEngine_obj,lineWidths),HX_("lineWidths",c1,8a,a4,20)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_("maxChars",99,ef,d0,ef)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_("maxScrollH",57,ad,fc,9a)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_("maxScrollV",65,ad,fc,9a)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_("multiline",ed,d2,11,9e)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_("numLines",d9,f1,11,32)},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_("restrict",3c,cb,9e,f1)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_("scrollH",9b,33,d8,30)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_("scrollV",a9,33,d8,30)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_("selectable",96,b6,2a,c4)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_("sharpness",81,22,25,1b)},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_("text",ad,cc,f9,4c)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(TextEngine_obj,textBounds),HX_("textBounds",02,07,0e,9d)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_("textHeight",74,88,3c,39)},
	{hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_("textFormatRanges",fa,0e,49,a2)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_("textWidth",19,46,50,63)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_("wordWrap",b4,14,db,00)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(TextEngine_obj,textField),HX_("textField",cd,24,81,99)},
	{hx::fsObject /*  ::haxe::Timer */ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_("__cursorTimer",ef,59,8f,e1)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_("__hasFocus",3e,1d,1a,34)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_("__isKeyDown",b7,2f,72,ce)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_("__measuredHeight",ed,b6,23,42)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_("__measuredWidth",c0,49,ec,02)},
	{hx::fsObject /*  ::EReg */ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_("__restrictRegexp",45,9f,ae,a9)},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_("__selectionStart",96,e3,b9,43)},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_("__showCursor",d3,ae,f0,e0)},
	{hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_("__textFormat",e4,8a,12,6d)},
	{hx::fsObject /*  ::openfl::text::_internal::TextLayout */ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_("__textLayout",57,aa,3c,c8)},
	{hx::fsObject /*  ::lime::graphics::opengl::GLObject */ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_("__texture",bb,19,2f,20)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_("__useIntAdvances",d9,17,72,7d)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_("__cairoFont",57,e7,b5,28)},
	{hx::fsObject /*  ::openfl::text::Font */ ,(int)offsetof(TextEngine_obj,_hx___font),HX_("__font",ef,c0,b8,f2)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::GUTTER,HX_("GUTTER",1b,d3,2b,8c)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_("UTF8_TAB",07,d5,41,1d)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_("UTF8_ENDLINE",01,29,41,cf)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_("UTF8_SPACE",f8,7b,a9,c7)},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_("UTF8_HYPHEN",60,3c,3f,bf)},
	{hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_("__defaultFonts",63,76,ad,da)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_("antiAliasType",68,c4,fa,e7),
	HX_("autoSize",d0,8f,79,2f),
	HX_("background",ee,93,1d,26),
	HX_("backgroundColor",95,4e,47,0d),
	HX_("border",ec,4c,1a,64),
	HX_("borderColor",d7,3c,d5,d6),
	HX_("bottomScrollV",fe,f7,87,8b),
	HX_("bounds",75,86,1d,66),
	HX_("caretIndex",8f,b6,5b,dd),
	HX_("embedFonts",2b,c7,e1,8e),
	HX_("gridFitType",05,f3,13,b4),
	HX_("height",e7,07,4c,02),
	HX_("layoutGroups",9e,a2,6c,37),
	HX_("lineAscents",45,0c,c2,3e),
	HX_("lineBreaks",e8,fd,5b,ea),
	HX_("lineDescents",0d,ad,64,49),
	HX_("lineLeadings",01,23,97,76),
	HX_("lineHeights",18,99,8e,3e),
	HX_("lineWidths",c1,8a,a4,20),
	HX_("maxChars",99,ef,d0,ef),
	HX_("maxScrollH",57,ad,fc,9a),
	HX_("maxScrollV",65,ad,fc,9a),
	HX_("multiline",ed,d2,11,9e),
	HX_("numLines",d9,f1,11,32),
	HX_("restrict",3c,cb,9e,f1),
	HX_("scrollH",9b,33,d8,30),
	HX_("scrollV",a9,33,d8,30),
	HX_("selectable",96,b6,2a,c4),
	HX_("sharpness",81,22,25,1b),
	HX_("text",ad,cc,f9,4c),
	HX_("textBounds",02,07,0e,9d),
	HX_("textHeight",74,88,3c,39),
	HX_("textFormatRanges",fa,0e,49,a2),
	HX_("textWidth",19,46,50,63),
	HX_("type",ba,f2,08,4d),
	HX_("width",06,b6,62,ca),
	HX_("wordWrap",b4,14,db,00),
	HX_("textField",cd,24,81,99),
	HX_("__cursorTimer",ef,59,8f,e1),
	HX_("__hasFocus",3e,1d,1a,34),
	HX_("__isKeyDown",b7,2f,72,ce),
	HX_("__measuredHeight",ed,b6,23,42),
	HX_("__measuredWidth",c0,49,ec,02),
	HX_("__restrictRegexp",45,9f,ae,a9),
	HX_("__selectionStart",96,e3,b9,43),
	HX_("__showCursor",d3,ae,f0,e0),
	HX_("__textFormat",e4,8a,12,6d),
	HX_("__textLayout",57,aa,3c,c8),
	HX_("__texture",bb,19,2f,20),
	HX_("__useIntAdvances",d9,17,72,7d),
	HX_("__cairoFont",57,e7,b5,28),
	HX_("__font",ef,c0,b8,f2),
	HX_("createRestrictRegexp",41,d0,6b,e1),
	HX_("getBounds",ab,0f,74,e2),
	HX_("getLine",aa,c7,35,1a),
	HX_("getLineBreakIndex",1d,16,36,36),
	HX_("getLineMeasurements",c1,9f,81,56),
	HX_("getLayoutGroups",54,f8,56,5a),
	HX_("restrictText",09,12,3e,34),
	HX_("setTextAlignment",74,0f,33,62),
	HX_("trimText",af,ae,63,65),
	HX_("update",09,86,05,87),
	HX_("get_bottomScrollV",55,03,f8,91),
	HX_("get_maxScrollV",ae,35,f2,10),
	HX_("set_restrict",b9,a2,b1,bb),
	HX_("get_scrollV",c0,93,d2,b6),
	HX_("set_scrollV",cc,9a,3f,c1),
	HX_("set_text",aa,e1,11,7b),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::GUTTER,"GUTTER");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::GUTTER,"GUTTER");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_("GUTTER",1b,d3,2b,8c),
	HX_("UTF8_TAB",07,d5,41,1d),
	HX_("UTF8_ENDLINE",01,29,41,cf),
	HX_("UTF8_SPACE",f8,7b,a9,c7),
	HX_("UTF8_HYPHEN",60,3c,3f,bf),
	HX_("__defaultFonts",63,76,ad,da),
	HX_("findFont",a8,6a,54,96),
	HX_("findFontVariant",bd,22,bb,b2),
	HX_("getFormatHeight",34,24,4b,62),
	HX_("getFont",85,0d,43,16),
	HX_("getFontInstance",3a,76,96,9e),
	::String(null())
};

void TextEngine_obj::__register()
{
	TextEngine_obj _hx_dummy;
	TextEngine_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("openfl.text._internal.TextEngine",04,88,80,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_34_boot)
HXDLIN(  34)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("__cairoFont",57,e7,b5,28), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_36_boot)
HXDLIN(  36)		GUTTER = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_37_boot)
HXDLIN(  37)		UTF8_TAB = 9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_38_boot)
HXDLIN(  38)		UTF8_ENDLINE = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_39_boot)
HXDLIN(  39)		UTF8_SPACE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_81873a2f4b2980c0_40_boot)
HXDLIN(  40)		UTF8_HYPHEN = 45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_81873a2f4b2980c0_41_boot)
HXDLIN(  41)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
} // end namespace _internal
