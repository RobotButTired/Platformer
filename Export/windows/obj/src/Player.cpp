// Generated by Haxe 4.0.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_CollisionDirection
#include <CollisionDirection.h>
#endif
#ifndef INCLUDED_Direction
#include <Direction.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Grenade
#include <Grenade.h>
#endif
#ifndef INCLUDED_GrenadeState
#include <GrenadeState.h>
#endif
#ifndef INCLUDED_Inventory
#include <Inventory.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_State
#include <State.h>
#endif
#ifndef INCLUDED_Unit
#include <Unit.h>
#endif
#ifndef INCLUDED_Weapon
#include <Weapon.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_14_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",14,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_97_spriteAnimated,"Player","spriteAnimated",0x4e3e0615,"Player.spriteAnimated","Player.hx",97,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_117_updateSprite,"Player","updateSprite",0xdeca53fb,"Player.updateSprite","Player.hx",117,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_129_keyDownHandler,"Player","keyDownHandler",0xbd594276,"Player.keyDownHandler","Player.hx",129,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_145_mouseDownHandler,"Player","mouseDownHandler",0xc71e84f0,"Player.mouseDownHandler","Player.hx",145,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_148_keyUpHandler,"Player","keyUpHandler",0x74c73e1d,"Player.keyUpHandler","Player.hx",148,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_164_mouseUpHandler,"Player","mouseUpHandler",0x897d0e17,"Player.mouseUpHandler","Player.hx",164,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_167_move,"Player","move",0x1cb35f1e,"Player.move","Player.hx",167,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_194_doShot,"Player","doShot",0x8749d372,"Player.doShot","Player.hx",194,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_215_doShotGun,"Player","doShotGun",0x2feca62e,"Player.doShotGun","Player.hx",215,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_238_doShotGrenade,"Player","doShotGrenade",0x7df871fc,"Player.doShotGrenade","Player.hx",238,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_257_checkCollisionWithEnemy,"Player","checkCollisionWithEnemy",0xb252fe8b,"Player.checkCollisionWithEnemy","Player.hx",257,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_268_get_state,"Player","get_state",0x7d84873b,"Player.get_state","Player.hx",268,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_273_drawHitBox,"Player","drawHitBox",0xf8c1a469,"Player.drawHitBox","Player.hx",273,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_280_doCollisionsWithTilesForPLayer,"Player","doCollisionsWithTilesForPLayer",0xbf5c6024,"Player.doCollisionsWithTilesForPLayer","Player.hx",280,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_293_doCollisionsWithTiles,"Player","doCollisionsWithTiles",0x89bb8e26,"Player.doCollisionsWithTiles","Player.hx",293,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_312_doInvulnerability,"Player","doInvulnerability",0x6f19d2bf,"Player.doInvulnerability","Player.hx",312,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_330_doCollisionWithPlatform,"Player","doCollisionWithPlatform",0x4b366cf3,"Player.doCollisionWithPlatform","Player.hx",330,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_344_get_directionLeft,"Player","get_directionLeft",0x2bee6d10,"Player.get_directionLeft","Player.hx",344,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_348_get_directionRight,"Player","get_directionRight",0xbbbe0eb3,"Player.get_directionRight","Player.hx",348,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_352_get_jump,"Player","get_jump",0x579a8704,"Player.get_jump","Player.hx",352,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_356_set_state,"Player","set_state",0x60d57347,"Player.set_state","Player.hx",356,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_360_get_gunCounter,"Player","get_gunCounter",0x30a98ef2,"Player.get_gunCounter","Player.hx",360,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_364_get_rateOfFire,"Player","get_rateOfFire",0x4d21de03,"Player.get_rateOfFire","Player.hx",364,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_368_get_grenadeCounter,"Player","get_grenadeCounter",0x7f378ae4,"Player.get_grenadeCounter","Player.hx",368,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_372_get_rateOfThrow,"Player","get_rateOfThrow",0x3f735639,"Player.get_rateOfThrow","Player.hx",372,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_376_get_healthPoints,"Player","get_healthPoints",0x366cd3f5,"Player.get_healthPoints","Player.hx",376,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_380_set_healthPoints,"Player","set_healthPoints",0x8caec169,"Player.set_healthPoints","Player.hx",380,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_384_get_maxHealthPoints,"Player","get_maxHealthPoints",0xe45db24d,"Player.get_maxHealthPoints","Player.hx",384,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_388_get_invulnerability,"Player","get_invulnerability",0x262697e1,"Player.get_invulnerability","Player.hx",388,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_392_set_invulnerability,"Player","set_invulnerability",0x62c38aed,"Player.set_invulnerability","Player.hx",392,0xa27fc9dd)

void Player_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_14_new)
HXLINE(  42)		this->invulnerabilityCounter = 0;
HXLINE(  41)		this->invulnerabilityTime = ((Float)2.0);
HXLINE(  40)		this->invulnerability = false;
HXLINE(  39)		this->maxHealthPoints = 3;
HXLINE(  35)		this->grenadeCounter = 0;
HXLINE(  34)		this->gunCounter = 0;
HXLINE(  32)		this->shooting = false;
HXLINE(  31)		this->rateOfThrow = ((Float)0.25);
HXLINE(  30)		this->rateOfFire = ((Float)0.75);
HXLINE(  27)		this->frameTime = ((Float)0.15);
HXLINE(  23)		this->state = ::State_obj::idle_dyn();
HXLINE(  20)		this->jump = false;
HXLINE(  48)		super::__construct();
HXLINE(  49)		this->idleWidthGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)		::Array< ::Dynamic> _hx_tmp = this->idleWidthGun;
HXDLIN(  50)		_hx_tmp->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle_with_gun_0.png",10,6b,ab,d2),null()),null(),null()));
HXLINE(  51)		::Array< ::Dynamic> _hx_tmp1 = this->idleWidthGun;
HXDLIN(  51)		_hx_tmp1->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_1.png",31,2f,d2,69),null()),null(),null()));
HXLINE(  52)		::Array< ::Dynamic> _hx_tmp2 = this->idleWidthGun;
HXDLIN(  52)		_hx_tmp2->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_2.png",b2,c3,38,fd),null()),null(),null()));
HXLINE(  53)		::Array< ::Dynamic> _hx_tmp3 = this->idleWidthGun;
HXDLIN(  53)		_hx_tmp3->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_idle with gun_3.png",33,58,9f,90),null()),null(),null()));
HXLINE(  55)		this->walkWithGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  56)		::Array< ::Dynamic> _hx_tmp4 = this->walkWithGun;
HXDLIN(  56)		_hx_tmp4->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_0.png",5b,e0,17,91),null()),null(),null()));
HXLINE(  57)		::Array< ::Dynamic> _hx_tmp5 = this->walkWithGun;
HXDLIN(  57)		_hx_tmp5->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_1.png",dc,74,7e,24),null()),null(),null()));
HXLINE(  58)		::Array< ::Dynamic> _hx_tmp6 = this->walkWithGun;
HXDLIN(  58)		_hx_tmp6->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_2.png",5d,09,e5,b7),null()),null(),null()));
HXLINE(  59)		::Array< ::Dynamic> _hx_tmp7 = this->walkWithGun;
HXDLIN(  59)		_hx_tmp7->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_walk with gun_3.png",de,9d,4b,4b),null()),null(),null()));
HXLINE(  61)		this->jumpWithGun = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  62)		::Array< ::Dynamic> _hx_tmp8 = this->jumpWithGun;
HXDLIN(  62)		_hx_tmp8->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  63)		::Array< ::Dynamic> _hx_tmp9 = this->jumpWithGun;
HXDLIN(  63)		_hx_tmp9->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  64)		::Array< ::Dynamic> _hx_tmp10 = this->jumpWithGun;
HXDLIN(  64)		_hx_tmp10->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  65)		::Array< ::Dynamic> _hx_tmp11 = this->jumpWithGun;
HXDLIN(  65)		_hx_tmp11->push( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/Cowboy/Cowboy4_jump with gun_0.png",16,22,21,26),null()),null(),null()));
HXLINE(  67)		this->speedX = ((Float)5.0);
HXLINE(  68)		this->speedY = ((Float)0.0);
HXLINE(  69)		this->hitBox =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,((Float)-10.),((Float)-17.5),20,30);
HXLINE(  73)		this->addChild(this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >());
HXLINE(  74)		this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(-15) ));
HXLINE(  75)		this->idleWidthGun->__get(0).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(-40) ));
HXLINE(  76)		 ::Dynamic _hx_tmp12 = ::haxe::Log_obj::trace;
HXDLIN(  76)		::String _hx_tmp13 = (this->get_width() + HX_(" ",20,00,00,00));
HXDLIN(  76)		::String _hx_tmp14 = (_hx_tmp13 + this->get_height());
HXDLIN(  76)		_hx_tmp12(_hx_tmp14,hx::SourceInfo(HX_("Source/Player.hx",89,18,9a,6b),76,HX_("Player",81,5f,4d,6c),HX_("new",60,d0,53,00)));
HXLINE(  79)		this->ind = 0;
HXLINE(  80)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  80)		Float _hx_tmp15;
HXDLIN(  80)		if ((timer > 0)) {
HXLINE(  80)			_hx_tmp15 = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE(  80)			_hx_tmp15 = ( (Float)(0) );
            		}
HXDLIN(  80)		this->timeFlag = _hx_tmp15;
HXLINE(  84)		this->inventory =  ::Inventory_obj::__alloc( HX_CTX );
HXLINE(  85)		this->inventory->panel->set_x(( (Float)(250) ));
HXLINE(  86)		this->inventory->panel->set_y(( (Float)(5) ));
HXLINE(  88)		this->healthPoints = this->maxHealthPoints;
HXLINE(  91)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->keyDownHandler_dyn(),null(),null(),null());
HXLINE(  92)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->mouseDownHandler_dyn(),null(),null(),null());
HXLINE(  93)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->keyUpHandler_dyn(),null(),null(),null());
HXLINE(  94)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->mouseUpHandler_dyn(),null(),null(),null());
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x3882f6a4 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x6c4d5f81;
		}
	}
}

void Player_obj::spriteAnimated( ::State state){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_97_spriteAnimated)
HXLINE(  98)		::Array< ::Dynamic> spriteSheet;
HXLINE(  99)		switch((int)(state->_hx_getIndex())){
            			case (int)0: {
HXLINE( 102)				spriteSheet = this->idleWidthGun;
            			}
            			break;
            			case (int)1: {
HXLINE( 104)				spriteSheet = this->walkWithGun;
            			}
            			break;
            			case (int)2: {
HXLINE( 106)				spriteSheet = this->jumpWithGun;
            			}
            			break;
            		}
HXLINE( 108)		int timer = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 108)		Float _hx_tmp;
HXDLIN( 108)		if ((timer > 0)) {
HXLINE( 108)			_hx_tmp = (( (Float)(timer) ) / ( (Float)(1000) ));
            		}
            		else {
HXLINE( 108)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN( 108)		if (((_hx_tmp - this->timeFlag) >= this->frameTime)) {
HXLINE( 111)			this->updateSprite(spriteSheet);
HXLINE( 112)			int timer1 = ::lime::_hx_system::System_obj::getTimer();
HXDLIN( 112)			Float _hx_tmp1;
HXDLIN( 112)			if ((timer1 > 0)) {
HXLINE( 112)				_hx_tmp1 = (( (Float)(timer1) ) / ( (Float)(1000) ));
            			}
            			else {
HXLINE( 112)				_hx_tmp1 = ( (Float)(0) );
            			}
HXDLIN( 112)			this->timeFlag = _hx_tmp1;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,spriteAnimated,(void))

void Player_obj::updateSprite(::Array< ::Dynamic> spriteSheet){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_117_updateSprite)
HXLINE( 118)		this->removeChildren(null(),null());
HXLINE( 119)		if ((this->ind == spriteSheet->length)) {
HXLINE( 120)			this->ind = 0;
            		}
HXLINE( 121)		this->addChild(spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >());
HXLINE( 122)		spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >()->set_x(( (Float)(-15) ));
HXLINE( 123)		spriteSheet->__get(this->ind).StaticCast<  ::openfl::display::Bitmap >()->set_y(( (Float)(-40) ));
HXLINE( 125)		this->ind++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,updateSprite,(void))

void Player_obj::keyDownHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_129_keyDownHandler)
HXLINE( 130)		bool _hx_tmp;
HXDLIN( 130)		if ((e->keyCode != 37)) {
HXLINE( 130)			_hx_tmp = (e->keyCode == 65);
            		}
            		else {
HXLINE( 130)			_hx_tmp = true;
            		}
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 132)			this->movingLeft = true;
            		}
HXLINE( 134)		bool _hx_tmp1;
HXDLIN( 134)		if ((e->keyCode != 39)) {
HXLINE( 134)			_hx_tmp1 = (e->keyCode == 68);
            		}
            		else {
HXLINE( 134)			_hx_tmp1 = true;
            		}
HXDLIN( 134)		if (_hx_tmp1) {
HXLINE( 136)			this->movingRight = true;
            		}
HXLINE( 138)		bool _hx_tmp2;
HXDLIN( 138)		if ((e->keyCode != 38)) {
HXLINE( 138)			_hx_tmp2 = (e->keyCode == 87);
            		}
            		else {
HXLINE( 138)			_hx_tmp2 = true;
            		}
HXDLIN( 138)		if (_hx_tmp2) {
HXLINE( 139)			this->jump = true;
            		}
HXLINE( 140)		if ((e->keyCode == 32)) {
HXLINE( 141)			this->shooting = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,keyDownHandler,(void))

void Player_obj::mouseDownHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_145_mouseDownHandler)
HXDLIN( 145)		this->shooting = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,mouseDownHandler,(void))

void Player_obj::keyUpHandler( ::openfl::events::KeyboardEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_148_keyUpHandler)
HXLINE( 149)		bool _hx_tmp;
HXDLIN( 149)		if ((e->keyCode != 37)) {
HXLINE( 149)			_hx_tmp = (e->keyCode == 65);
            		}
            		else {
HXLINE( 149)			_hx_tmp = true;
            		}
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 151)			this->movingLeft = false;
            		}
HXLINE( 153)		bool _hx_tmp1;
HXDLIN( 153)		if ((e->keyCode != 39)) {
HXLINE( 153)			_hx_tmp1 = (e->keyCode == 68);
            		}
            		else {
HXLINE( 153)			_hx_tmp1 = true;
            		}
HXDLIN( 153)		if (_hx_tmp1) {
HXLINE( 155)			this->movingRight = false;
            		}
HXLINE( 157)		bool _hx_tmp2;
HXDLIN( 157)		if ((e->keyCode != 38)) {
HXLINE( 157)			_hx_tmp2 = (e->keyCode == 87);
            		}
            		else {
HXLINE( 157)			_hx_tmp2 = true;
            		}
HXDLIN( 157)		if (_hx_tmp2) {
HXLINE( 158)			this->jump = false;
            		}
HXLINE( 159)		if ((e->keyCode == 32)) {
HXLINE( 160)			this->shooting = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,keyUpHandler,(void))

void Player_obj::mouseUpHandler( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_164_mouseUpHandler)
HXDLIN( 164)		this->shooting = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,mouseUpHandler,(void))

void Player_obj::move(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_167_move)
HXLINE( 168)		if (this->movingLeft) {
HXLINE( 170)			Float _hx_tmp = this->get_x();
HXDLIN( 170)			if (((_hx_tmp - (this->get_hitBox()->width / ( (Float)(2) ))) >= 0)) {
HXLINE( 171)				 ::Player _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 171)				Float _hx_tmp1 = _g->get_x();
HXDLIN( 171)				_g->set_x((_hx_tmp1 - this->speedX));
            			}
HXLINE( 172)			this->state = ::State_obj::walk_dyn();
HXLINE( 173)			this->set_scaleX(((Float)-1.0));
HXLINE( 174)			this->direction = ::Direction_obj::left_dyn();
            		}
HXLINE( 176)		if (this->movingRight) {
HXLINE( 178)			Float _hx_tmp2 = this->get_x();
HXDLIN( 178)			Float _hx_tmp3 = (_hx_tmp2 + (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 178)			if ((_hx_tmp3 <= ::Main_obj::sizeWidth)) {
HXLINE( 179)				 ::Player _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 179)				Float _hx_tmp4 = _g1->get_x();
HXDLIN( 179)				_g1->set_x((_hx_tmp4 + this->speedX));
            			}
HXLINE( 180)			this->state = ::State_obj::walk_dyn();
HXLINE( 181)			this->set_scaleX(((Float)1.0));
HXLINE( 182)			this->direction = ::Direction_obj::right_dyn();
            		}
HXLINE( 184)		bool _hx_tmp5;
HXDLIN( 184)		if (this->movingLeft) {
HXLINE( 184)			_hx_tmp5 = this->movingRight;
            		}
            		else {
HXLINE( 184)			_hx_tmp5 = false;
            		}
HXDLIN( 184)		if (_hx_tmp5) {
HXLINE( 185)			this->state = ::State_obj::idle_dyn();
            		}
HXLINE( 186)		bool _hx_tmp6;
HXDLIN( 186)		if (!(this->movingLeft)) {
HXLINE( 186)			_hx_tmp6 = !(this->movingRight);
            		}
            		else {
HXLINE( 186)			_hx_tmp6 = false;
            		}
HXDLIN( 186)		if (_hx_tmp6) {
HXLINE( 187)			this->state = ::State_obj::idle_dyn();
            		}
HXLINE( 188)		 ::Player _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 188)		_hx_tmp7->speedY = (_hx_tmp7->speedY + this->gravity);
HXLINE( 189)		{
HXLINE( 189)			 ::Player _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 189)			Float _hx_tmp8 = _g2->get_y();
HXDLIN( 189)			_g2->set_y((_hx_tmp8 + this->speedY));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,move,(void))

void Player_obj::doShot( ::Game game){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_194_doShot)
HXLINE( 195)		this->inventory->update(hx::ObjectPtr<OBJ_>(this));
HXLINE( 196)		bool _hx_tmp;
HXDLIN( 196)		bool _hx_tmp1;
HXDLIN( 196)		if ((this->gunCounter == 0)) {
HXLINE( 196)			_hx_tmp1 = this->shooting;
            		}
            		else {
HXLINE( 196)			_hx_tmp1 = false;
            		}
HXDLIN( 196)		if (_hx_tmp1) {
HXLINE( 196)			_hx_tmp = hx::IsEq( this->inventory->get_weapon(),::Weapon_obj::gun_dyn() );
            		}
            		else {
HXLINE( 196)			_hx_tmp = false;
            		}
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 198)			this->doShotGun(game);
            		}
            		else {
HXLINE( 200)			if ((this->gunCounter != 0)) {
HXLINE( 202)				--this->gunCounter;
            			}
            		}
HXLINE( 204)		bool _hx_tmp2;
HXDLIN( 204)		bool _hx_tmp3;
HXDLIN( 204)		if ((this->grenadeCounter == 0)) {
HXLINE( 204)			_hx_tmp3 = this->shooting;
            		}
            		else {
HXLINE( 204)			_hx_tmp3 = false;
            		}
HXDLIN( 204)		if (_hx_tmp3) {
HXLINE( 204)			_hx_tmp2 = hx::IsEq( this->inventory->get_weapon(),::Weapon_obj::grenade_dyn() );
            		}
            		else {
HXLINE( 204)			_hx_tmp2 = false;
            		}
HXDLIN( 204)		if (_hx_tmp2) {
HXLINE( 206)			this->doShotGrenade(game);
            		}
            		else {
HXLINE( 208)			if ((this->grenadeCounter != 0)) {
HXLINE( 210)				--this->grenadeCounter;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doShot,(void))

void Player_obj::doShotGun( ::Game game){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_215_doShotGun)
HXLINE( 216)		 ::Bullet bullet;
HXLINE( 217)		if ((game->spentBullets->length > 0)) {
HXLINE( 220)			::Array< ::Dynamic> game1 = game->bullets;
HXDLIN( 220)			game1->push(game->spentBullets->pop().StaticCast<  ::Bullet >());
HXLINE( 221)			game->bullets->__get((game->bullets->length - 1)).StaticCast<  ::Bullet >()->setBullet(hx::ObjectPtr<OBJ_>(this));
HXLINE( 223)			game->addChild(game->bullets->__get((game->bullets->length - 1)).StaticCast<  ::Bullet >());
HXLINE( 225)			int _hx_tmp = ::Main_obj::get_FPS();
HXDLIN( 225)			this->gunCounter = ::Math_obj::floor((( (Float)(_hx_tmp) ) / this->rateOfFire));
            		}
            		else {
HXLINE( 229)			bullet =  ::Bullet_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 230)			game->bullets->push(bullet);
HXLINE( 231)			game->addChild(bullet);
HXLINE( 233)			int _hx_tmp1 = ::Main_obj::get_FPS();
HXDLIN( 233)			this->gunCounter = ::Math_obj::floor((( (Float)(_hx_tmp1) ) / this->rateOfFire));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doShotGun,(void))

void Player_obj::doShotGrenade( ::Game game){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_238_doShotGrenade)
HXDLIN( 238)		if (hx::IsNotNull( game->grenade )) {
HXLINE( 240)			game->grenade->setGrenade(hx::ObjectPtr<OBJ_>(this));
HXLINE( 241)			game->addChild(game->grenade);
HXLINE( 242)			game->grenade->set_state(::GrenadeState_obj::active_dyn());
HXLINE( 243)			int _hx_tmp = ::Main_obj::get_FPS();
HXDLIN( 243)			this->grenadeCounter = ::Math_obj::floor((( (Float)(_hx_tmp) ) / this->rateOfThrow));
HXLINE( 244)			::haxe::Log_obj::trace(HX_("SETTING GRENADE",7e,a8,c2,79),hx::SourceInfo(HX_("Source/Player.hx",89,18,9a,6b),244,HX_("Player",81,5f,4d,6c),HX_("doShotGrenade",a9,57,b2,96)));
            		}
            		else {
HXLINE( 248)			 ::Grenade grenade =  ::Grenade_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 249)			game->grenade = grenade;
HXLINE( 250)			game->addChild(grenade);
HXLINE( 251)			int _hx_tmp1 = ::Main_obj::get_FPS();
HXDLIN( 251)			this->grenadeCounter = ::Math_obj::floor((( (Float)(_hx_tmp1) ) / this->rateOfThrow));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doShotGrenade,(void))

bool Player_obj::checkCollisionWithEnemy( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_257_checkCollisionWithEnemy)
HXDLIN( 257)		bool _hx_tmp;
HXDLIN( 257)		bool _hx_tmp1;
HXDLIN( 257)		bool _hx_tmp2;
HXDLIN( 257)		Float _hx_tmp3 = this->get_x();
HXDLIN( 257)		Float _hx_tmp4 = (_hx_tmp3 + (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 257)		Float _hx_tmp5 = enemy->get_x();
HXDLIN( 257)		if ((_hx_tmp4 > (_hx_tmp5 - (enemy->get_hitBox()->width / ( (Float)(2) ))))) {
HXDLIN( 257)			Float _hx_tmp6 = this->get_x();
HXDLIN( 257)			Float _hx_tmp7 = (_hx_tmp6 - (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 257)			Float _hx_tmp8 = enemy->get_x();
HXDLIN( 257)			_hx_tmp2 = (_hx_tmp7 < (_hx_tmp8 + (enemy->get_hitBox()->width / ( (Float)(2) ))));
            		}
            		else {
HXDLIN( 257)			_hx_tmp2 = false;
            		}
HXDLIN( 257)		if (_hx_tmp2) {
HXLINE( 258)			Float _hx_tmp9 = this->get_y();
HXDLIN( 258)			Float _hx_tmp10 = (_hx_tmp9 + (this->get_hitBox()->height / ( (Float)(2) )));
HXDLIN( 258)			Float _hx_tmp11 = enemy->get_y();
HXLINE( 257)			_hx_tmp1 = (_hx_tmp10 > (_hx_tmp11 - (enemy->get_hitBox()->height / ( (Float)(2) ))));
            		}
            		else {
HXDLIN( 257)			_hx_tmp1 = false;
            		}
HXDLIN( 257)		if (_hx_tmp1) {
HXLINE( 258)			Float _hx_tmp12 = this->get_y();
HXDLIN( 258)			Float _hx_tmp13 = (_hx_tmp12 - (this->get_hitBox()->height / ( (Float)(2) )));
HXDLIN( 258)			Float _hx_tmp14 = enemy->get_y();
HXLINE( 257)			_hx_tmp = (_hx_tmp13 < (_hx_tmp14 + (enemy->get_hitBox()->height / ( (Float)(2) ))));
            		}
            		else {
HXDLIN( 257)			_hx_tmp = false;
            		}
HXDLIN( 257)		if (_hx_tmp) {
HXLINE( 260)			return true;
            		}
            		else {
HXLINE( 263)			return false;
            		}
HXLINE( 257)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,checkCollisionWithEnemy,return )

 ::State Player_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_268_get_state)
HXDLIN( 268)		return this->state;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_state,return )

void Player_obj::drawHitBox(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_273_drawHitBox)
HXLINE( 274)		this->get_graphics()->lineStyle(1,16711680,null(),null(),null(),null(),null(),null());
HXLINE( 275)		 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN( 275)		Float _hx_tmp1 = (-(this->get_hitBox()->width) / ( (Float)(2) ));
HXDLIN( 275)		Float _hx_tmp2 = (-(this->get_hitBox()->height) / ( (Float)(2) ));
HXDLIN( 275)		Float _hx_tmp3 = this->get_hitBox()->width;
HXDLIN( 275)		_hx_tmp->drawRect(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_hitBox()->height);
HXLINE( 276)		this->get_graphics()->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,drawHitBox,(void))

void Player_obj::doCollisionsWithTilesForPLayer(::Array< ::Dynamic> level){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_280_doCollisionsWithTilesForPLayer)
HXLINE( 281)		::Game_obj::haveCollision = false;
HXLINE( 282)		if (hx::IsEq( this->direction,::Direction_obj::left_dyn() )) {
HXLINE( 284)			this->set_scaleX(((Float)1.0));
HXLINE( 285)			this->doCollisionsWithTiles(level);
HXLINE( 286)			this->set_scaleX(((Float)-1.0));
            		}
            		else {
HXLINE( 289)			this->doCollisionsWithTiles(level);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doCollisionsWithTilesForPLayer,(void))

void Player_obj::doCollisionsWithTiles(::Array< ::Dynamic> level){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_293_doCollisionsWithTiles)
HXLINE( 294)		Float tileWidth = (( (Float)(::Main_obj::sizeWidth) ) / ( (Float)(20) ));
HXLINE( 295)		Float tileHeight = (( (Float)(::Main_obj::sizeHeight) ) / ( (Float)(15) ));
HXLINE( 297)		{
HXLINE( 297)			int _g = 0;
HXDLIN( 297)			int _g1 = level->length;
HXDLIN( 297)			while((_g < _g1)){
HXLINE( 297)				_g = (_g + 1);
HXDLIN( 297)				int i = (_g - 1);
HXLINE( 299)				{
HXLINE( 299)					int _g2 = 0;
HXDLIN( 299)					int _g11 = level->__get(i).StaticCast< ::Array< int > >()->length;
HXDLIN( 299)					while((_g2 < _g11)){
HXLINE( 299)						_g2 = (_g2 + 1);
HXDLIN( 299)						int j = (_g2 - 1);
HXLINE( 301)						if (this->checkCollisionWithTile(level->__get(i).StaticCast< ::Array< int > >()->__get(j),(( (Float)(j) ) * tileWidth),(( (Float)(i) ) * tileHeight))) {
HXLINE( 303)							::Game_obj::haveCollision = true;
HXLINE( 304)							this->collisionDirection = this->directionDefinition((( (Float)(j) ) * tileWidth),(( (Float)(i) ) * tileHeight));
HXLINE( 305)							this->doCollisionWithTile(this->get_collisionDirection(),(( (Float)(j) ) * tileWidth),(( (Float)(i) ) * tileHeight));
            						}
            					}
            				}
            			}
            		}
            	}


void Player_obj::doInvulnerability(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_312_doInvulnerability)
HXLINE( 313)		int _hx_tmp = this->invulnerabilityCounter;
HXDLIN( 313)		if ((hx::Mod(_hx_tmp,(( (Float)(::Main_obj::get_FPS()) ) / ( (Float)(6) ))) == 0)) {
HXLINE( 315)			Float _hx_tmp1;
HXDLIN( 315)			if ((this->get_alpha() == ((Float)1.0))) {
HXLINE( 315)				_hx_tmp1 = ((Float)0.0);
            			}
            			else {
HXLINE( 315)				_hx_tmp1 = ((Float)1.0);
            			}
HXDLIN( 315)			this->set_alpha(_hx_tmp1);
            		}
HXLINE( 320)		++this->invulnerabilityCounter;
HXLINE( 321)		int _hx_tmp2 = this->invulnerabilityCounter;
HXDLIN( 321)		int _hx_tmp3 = ::Main_obj::get_FPS();
HXDLIN( 321)		if ((_hx_tmp2 >= (( (Float)(_hx_tmp3) ) * this->invulnerabilityTime))) {
HXLINE( 323)			this->invulnerability = false;
HXLINE( 324)			this->invulnerabilityCounter = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,doInvulnerability,(void))

void Player_obj::doCollisionWithPlatform( ::openfl::display::Sprite platform){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_330_doCollisionWithPlatform)
HXDLIN( 330)		bool _hx_tmp;
HXDLIN( 330)		bool _hx_tmp1;
HXDLIN( 330)		bool _hx_tmp2;
HXDLIN( 330)		bool _hx_tmp3;
HXDLIN( 330)		if ((this->speedY >= ((Float)0.0))) {
HXDLIN( 330)			Float _hx_tmp4 = this->get_x();
HXDLIN( 330)			Float _hx_tmp5 = (_hx_tmp4 + (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 330)			_hx_tmp3 = (_hx_tmp5 > platform->get_x());
            		}
            		else {
HXDLIN( 330)			_hx_tmp3 = false;
            		}
HXDLIN( 330)		if (_hx_tmp3) {
HXDLIN( 330)			Float _hx_tmp6 = this->get_x();
HXDLIN( 330)			Float _hx_tmp7 = (_hx_tmp6 - (this->get_hitBox()->width / ( (Float)(2) )));
HXDLIN( 330)			Float _hx_tmp8 = platform->get_x();
HXDLIN( 330)			_hx_tmp2 = (_hx_tmp7 < (_hx_tmp8 + platform->get_width()));
            		}
            		else {
HXDLIN( 330)			_hx_tmp2 = false;
            		}
HXDLIN( 330)		if (_hx_tmp2) {
HXLINE( 331)			Float _hx_tmp9 = this->get_y();
HXDLIN( 331)			Float _hx_tmp10 = (_hx_tmp9 + (this->get_hitBox()->height / ( (Float)(2) )));
HXLINE( 330)			_hx_tmp1 = (_hx_tmp10 > platform->get_y());
            		}
            		else {
HXDLIN( 330)			_hx_tmp1 = false;
            		}
HXDLIN( 330)		if (_hx_tmp1) {
HXLINE( 331)			Float _hx_tmp11 = this->get_y();
HXDLIN( 331)			Float _hx_tmp12 = (_hx_tmp11 - (this->get_hitBox()->height / ( (Float)(2) )));
HXLINE( 330)			_hx_tmp = (_hx_tmp12 < platform->get_y());
            		}
            		else {
HXDLIN( 330)			_hx_tmp = false;
            		}
HXDLIN( 330)		if (_hx_tmp) {
HXLINE( 333)			::Game_obj::haveCollision = true;
HXLINE( 334)			this->collisionDirection = ::CollisionDirection_obj::up_dyn();
HXLINE( 335)			Float _hx_tmp13 = platform->get_y();
HXDLIN( 335)			this->set_y((_hx_tmp13 - (this->get_hitBox()->height / ( (Float)(2) ))));
HXLINE( 336)			this->speedY = ((Float)0.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,doCollisionWithPlatform,(void))

bool Player_obj::get_directionLeft(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_344_get_directionLeft)
HXDLIN( 344)		return this->movingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_directionLeft,return )

bool Player_obj::get_directionRight(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_348_get_directionRight)
HXDLIN( 348)		return this->movingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_directionRight,return )

bool Player_obj::get_jump(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_352_get_jump)
HXDLIN( 352)		return this->jump;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_jump,return )

void Player_obj::set_state( ::State value){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_356_set_state)
HXDLIN( 356)		this->state = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_state,(void))

int Player_obj::get_gunCounter(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_360_get_gunCounter)
HXDLIN( 360)		return this->gunCounter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_gunCounter,return )

Float Player_obj::get_rateOfFire(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_364_get_rateOfFire)
HXDLIN( 364)		return this->rateOfFire;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_rateOfFire,return )

int Player_obj::get_grenadeCounter(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_368_get_grenadeCounter)
HXDLIN( 368)		return this->grenadeCounter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_grenadeCounter,return )

Float Player_obj::get_rateOfThrow(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_372_get_rateOfThrow)
HXDLIN( 372)		return this->rateOfThrow;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_rateOfThrow,return )

int Player_obj::get_healthPoints(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_376_get_healthPoints)
HXDLIN( 376)		return this->healthPoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_healthPoints,return )

void Player_obj::set_healthPoints(int value){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_380_set_healthPoints)
HXDLIN( 380)		this->healthPoints = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_healthPoints,(void))

int Player_obj::get_maxHealthPoints(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_384_get_maxHealthPoints)
HXDLIN( 384)		return this->maxHealthPoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_maxHealthPoints,return )

bool Player_obj::get_invulnerability(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_388_get_invulnerability)
HXDLIN( 388)		return this->invulnerability;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,get_invulnerability,return )

void Player_obj::set_invulnerability(bool value){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_392_set_invulnerability)
HXDLIN( 392)		this->invulnerability = value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,set_invulnerability,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(idleWidthGun,"idleWidthGun");
	HX_MARK_MEMBER_NAME(walkWithGun,"walkWithGun");
	HX_MARK_MEMBER_NAME(jumpWithGun,"jumpWithGun");
	HX_MARK_MEMBER_NAME(jump,"jump");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(timeFlag,"timeFlag");
	HX_MARK_MEMBER_NAME(frameTime,"frameTime");
	HX_MARK_MEMBER_NAME(ind,"ind");
	HX_MARK_MEMBER_NAME(rateOfFire,"rateOfFire");
	HX_MARK_MEMBER_NAME(rateOfThrow,"rateOfThrow");
	HX_MARK_MEMBER_NAME(shooting,"shooting");
	HX_MARK_MEMBER_NAME(gunCounter,"gunCounter");
	HX_MARK_MEMBER_NAME(grenadeCounter,"grenadeCounter");
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(healthPoints,"healthPoints");
	HX_MARK_MEMBER_NAME(maxHealthPoints,"maxHealthPoints");
	HX_MARK_MEMBER_NAME(invulnerability,"invulnerability");
	HX_MARK_MEMBER_NAME(invulnerabilityTime,"invulnerabilityTime");
	HX_MARK_MEMBER_NAME(invulnerabilityCounter,"invulnerabilityCounter");
	 ::Unit_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(idleWidthGun,"idleWidthGun");
	HX_VISIT_MEMBER_NAME(walkWithGun,"walkWithGun");
	HX_VISIT_MEMBER_NAME(jumpWithGun,"jumpWithGun");
	HX_VISIT_MEMBER_NAME(jump,"jump");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(timeFlag,"timeFlag");
	HX_VISIT_MEMBER_NAME(frameTime,"frameTime");
	HX_VISIT_MEMBER_NAME(ind,"ind");
	HX_VISIT_MEMBER_NAME(rateOfFire,"rateOfFire");
	HX_VISIT_MEMBER_NAME(rateOfThrow,"rateOfThrow");
	HX_VISIT_MEMBER_NAME(shooting,"shooting");
	HX_VISIT_MEMBER_NAME(gunCounter,"gunCounter");
	HX_VISIT_MEMBER_NAME(grenadeCounter,"grenadeCounter");
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(healthPoints,"healthPoints");
	HX_VISIT_MEMBER_NAME(maxHealthPoints,"maxHealthPoints");
	HX_VISIT_MEMBER_NAME(invulnerability,"invulnerability");
	HX_VISIT_MEMBER_NAME(invulnerabilityTime,"invulnerabilityTime");
	HX_VISIT_MEMBER_NAME(invulnerabilityCounter,"invulnerabilityCounter");
	 ::Unit_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ind") ) { return hx::Val( ind ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jump") ) { return hx::Val( jump ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"doShot") ) { return hx::Val( doShot_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeFlag") ) { return hx::Val( timeFlag ); }
		if (HX_FIELD_EQ(inName,"shooting") ) { return hx::Val( shooting ); }
		if (HX_FIELD_EQ(inName,"get_jump") ) { return hx::Val( get_jump_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { return hx::Val( frameTime ); }
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory ); }
		if (HX_FIELD_EQ(inName,"doShotGun") ) { return hx::Val( doShotGun_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_state") ) { return hx::Val( get_state_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_state") ) { return hx::Val( set_state_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rateOfFire") ) { return hx::Val( rateOfFire ); }
		if (HX_FIELD_EQ(inName,"gunCounter") ) { return hx::Val( gunCounter ); }
		if (HX_FIELD_EQ(inName,"drawHitBox") ) { return hx::Val( drawHitBox_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"walkWithGun") ) { return hx::Val( walkWithGun ); }
		if (HX_FIELD_EQ(inName,"jumpWithGun") ) { return hx::Val( jumpWithGun ); }
		if (HX_FIELD_EQ(inName,"rateOfThrow") ) { return hx::Val( rateOfThrow ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"idleWidthGun") ) { return hx::Val( idleWidthGun ); }
		if (HX_FIELD_EQ(inName,"healthPoints") ) { return hx::Val( healthPoints ); }
		if (HX_FIELD_EQ(inName,"updateSprite") ) { return hx::Val( updateSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyUpHandler") ) { return hx::Val( keyUpHandler_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"doShotGrenade") ) { return hx::Val( doShotGrenade_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"grenadeCounter") ) { return hx::Val( grenadeCounter ); }
		if (HX_FIELD_EQ(inName,"spriteAnimated") ) { return hx::Val( spriteAnimated_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyDownHandler") ) { return hx::Val( keyDownHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseUpHandler") ) { return hx::Val( mouseUpHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gunCounter") ) { return hx::Val( get_gunCounter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rateOfFire") ) { return hx::Val( get_rateOfFire_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"maxHealthPoints") ) { return hx::Val( maxHealthPoints ); }
		if (HX_FIELD_EQ(inName,"invulnerability") ) { return hx::Val( invulnerability ); }
		if (HX_FIELD_EQ(inName,"get_rateOfThrow") ) { return hx::Val( get_rateOfThrow_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mouseDownHandler") ) { return hx::Val( mouseDownHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_healthPoints") ) { return hx::Val( get_healthPoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_healthPoints") ) { return hx::Val( set_healthPoints_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"doInvulnerability") ) { return hx::Val( doInvulnerability_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_directionLeft") ) { return hx::Val( get_directionLeft_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_directionRight") ) { return hx::Val( get_directionRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_grenadeCounter") ) { return hx::Val( get_grenadeCounter_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"invulnerabilityTime") ) { return hx::Val( invulnerabilityTime ); }
		if (HX_FIELD_EQ(inName,"get_maxHealthPoints") ) { return hx::Val( get_maxHealthPoints_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_invulnerability") ) { return hx::Val( get_invulnerability_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_invulnerability") ) { return hx::Val( set_invulnerability_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"doCollisionsWithTiles") ) { return hx::Val( doCollisionsWithTiles_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"invulnerabilityCounter") ) { return hx::Val( invulnerabilityCounter ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"checkCollisionWithEnemy") ) { return hx::Val( checkCollisionWithEnemy_dyn() ); }
		if (HX_FIELD_EQ(inName,"doCollisionWithPlatform") ) { return hx::Val( doCollisionWithPlatform_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"doCollisionsWithTilesForPLayer") ) { return hx::Val( doCollisionsWithTilesForPLayer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ind") ) { ind=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"jump") ) { jump=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::State >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"timeFlag") ) { timeFlag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shooting") ) { shooting=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { frameTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inventory") ) { inventory=inValue.Cast<  ::Inventory >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rateOfFire") ) { rateOfFire=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gunCounter") ) { gunCounter=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"walkWithGun") ) { walkWithGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jumpWithGun") ) { jumpWithGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rateOfThrow") ) { rateOfThrow=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"idleWidthGun") ) { idleWidthGun=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthPoints") ) { healthPoints=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"grenadeCounter") ) { grenadeCounter=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"maxHealthPoints") ) { maxHealthPoints=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invulnerability") ) { invulnerability=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"invulnerabilityTime") ) { invulnerabilityTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"invulnerabilityCounter") ) { invulnerabilityCounter=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("idleWidthGun",4e,2f,a1,30));
	outFields->push(HX_("walkWithGun",11,46,3d,d6));
	outFields->push(HX_("jumpWithGun",cc,d4,b0,41));
	outFields->push(HX_("jump",ee,c4,69,46));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("timeFlag",59,8e,1f,e4));
	outFields->push(HX_("frameTime",da,8a,7d,3a));
	outFields->push(HX_("ind",df,0c,50,00));
	outFields->push(HX_("rateOfFire",6d,67,1b,61));
	outFields->push(HX_("rateOfThrow",8f,09,d2,a5));
	outFields->push(HX_("shooting",63,c0,75,2e));
	outFields->push(HX_("gunCounter",5c,18,a3,44));
	outFields->push(HX_("grenadeCounter",4e,11,a3,71));
	outFields->push(HX_("inventory",9c,76,b6,48));
	outFields->push(HX_("healthPoints",df,0b,eb,62));
	outFields->push(HX_("maxHealthPoints",a3,c8,07,10));
	outFields->push(HX_("invulnerability",37,ae,d0,51));
	outFields->push(HX_("invulnerabilityTime",e4,8d,9f,15));
	outFields->push(HX_("invulnerabilityCounter",85,6d,42,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,idleWidthGun),HX_("idleWidthGun",4e,2f,a1,30)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,walkWithGun),HX_("walkWithGun",11,46,3d,d6)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Player_obj,jumpWithGun),HX_("jumpWithGun",cc,d4,b0,41)},
	{hx::fsBool,(int)offsetof(Player_obj,jump),HX_("jump",ee,c4,69,46)},
	{hx::fsObject /*  ::State */ ,(int)offsetof(Player_obj,state),HX_("state",11,76,0b,84)},
	{hx::fsFloat,(int)offsetof(Player_obj,timeFlag),HX_("timeFlag",59,8e,1f,e4)},
	{hx::fsFloat,(int)offsetof(Player_obj,frameTime),HX_("frameTime",da,8a,7d,3a)},
	{hx::fsInt,(int)offsetof(Player_obj,ind),HX_("ind",df,0c,50,00)},
	{hx::fsFloat,(int)offsetof(Player_obj,rateOfFire),HX_("rateOfFire",6d,67,1b,61)},
	{hx::fsFloat,(int)offsetof(Player_obj,rateOfThrow),HX_("rateOfThrow",8f,09,d2,a5)},
	{hx::fsBool,(int)offsetof(Player_obj,shooting),HX_("shooting",63,c0,75,2e)},
	{hx::fsInt,(int)offsetof(Player_obj,gunCounter),HX_("gunCounter",5c,18,a3,44)},
	{hx::fsInt,(int)offsetof(Player_obj,grenadeCounter),HX_("grenadeCounter",4e,11,a3,71)},
	{hx::fsObject /*  ::Inventory */ ,(int)offsetof(Player_obj,inventory),HX_("inventory",9c,76,b6,48)},
	{hx::fsInt,(int)offsetof(Player_obj,healthPoints),HX_("healthPoints",df,0b,eb,62)},
	{hx::fsInt,(int)offsetof(Player_obj,maxHealthPoints),HX_("maxHealthPoints",a3,c8,07,10)},
	{hx::fsBool,(int)offsetof(Player_obj,invulnerability),HX_("invulnerability",37,ae,d0,51)},
	{hx::fsFloat,(int)offsetof(Player_obj,invulnerabilityTime),HX_("invulnerabilityTime",e4,8d,9f,15)},
	{hx::fsInt,(int)offsetof(Player_obj,invulnerabilityCounter),HX_("invulnerabilityCounter",85,6d,42,06)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("idleWidthGun",4e,2f,a1,30),
	HX_("walkWithGun",11,46,3d,d6),
	HX_("jumpWithGun",cc,d4,b0,41),
	HX_("jump",ee,c4,69,46),
	HX_("state",11,76,0b,84),
	HX_("timeFlag",59,8e,1f,e4),
	HX_("frameTime",da,8a,7d,3a),
	HX_("ind",df,0c,50,00),
	HX_("rateOfFire",6d,67,1b,61),
	HX_("rateOfThrow",8f,09,d2,a5),
	HX_("shooting",63,c0,75,2e),
	HX_("gunCounter",5c,18,a3,44),
	HX_("grenadeCounter",4e,11,a3,71),
	HX_("inventory",9c,76,b6,48),
	HX_("healthPoints",df,0b,eb,62),
	HX_("maxHealthPoints",a3,c8,07,10),
	HX_("invulnerability",37,ae,d0,51),
	HX_("invulnerabilityTime",e4,8d,9f,15),
	HX_("invulnerabilityCounter",85,6d,42,06),
	HX_("spriteAnimated",c8,17,2d,d8),
	HX_("updateSprite",ee,82,59,c3),
	HX_("keyDownHandler",29,54,48,47),
	HX_("mouseDownHandler",63,a9,3b,f8),
	HX_("keyUpHandler",10,6d,56,59),
	HX_("mouseUpHandler",ca,1f,6c,13),
	HX_("move",11,e3,60,48),
	HX_("doShot",25,7a,56,1c),
	HX_("doShotGun",5b,f1,1c,7a),
	HX_("doShotGrenade",a9,57,b2,96),
	HX_("checkCollisionWithEnemy",78,9e,8b,58),
	HX_("get_state",68,d2,b4,c7),
	HX_("drawHitBox",9c,20,d3,98),
	HX_("doCollisionsWithTilesForPLayer",d7,47,b9,18),
	HX_("doCollisionsWithTiles",d3,68,86,03),
	HX_("doInvulnerability",ec,92,7c,37),
	HX_("doCollisionWithPlatform",e0,0c,6f,f1),
	HX_("get_directionLeft",3d,2d,51,f4),
	HX_("get_directionRight",e6,75,c3,49),
	HX_("get_jump",77,80,24,c6),
	HX_("set_state",74,be,05,ab),
	HX_("get_gunCounter",a5,a0,98,ba),
	HX_("get_rateOfFire",b6,ef,10,d7),
	HX_("get_grenadeCounter",17,f2,3c,0d),
	HX_("get_rateOfThrow",26,c1,b3,66),
	HX_("get_healthPoints",68,f8,89,67),
	HX_("set_healthPoints",dc,e5,cb,bd),
	HX_("get_maxHealthPoints",ba,97,12,9b),
	HX_("get_invulnerability",4e,7d,db,dc),
	HX_("set_invulnerability",5a,70,78,19),
	::String(null()) };

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

