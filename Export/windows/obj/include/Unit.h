// Generated by Haxe 4.0.1
#ifndef INCLUDED_Unit
#define INCLUDED_Unit

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(CollisionDirection)
HX_DECLARE_CLASS0(Direction)
HX_DECLARE_CLASS0(Unit)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)



class HXCPP_CLASS_ATTRIBUTES Unit_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Unit_obj OBJ_;
		Unit_obj();

	public:
		enum { _hx_ClassId = 0x3882f6a4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Unit")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Unit"); }
		static hx::ObjectPtr< Unit_obj > __new();
		static hx::ObjectPtr< Unit_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Unit_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Unit",a4,f6,82,38); }

		Float speedX;
		Float speedY;
		Float gravity;
		 ::Direction direction;
		 ::CollisionDirection collisionDirection;
		bool movingLeft;
		bool movingRight;
		 ::openfl::geom::Rectangle hitBox;
		Float get_speedY();
		::Dynamic get_speedY_dyn();

		void set_speedY(Float value);
		::Dynamic set_speedY_dyn();

		 ::openfl::geom::Rectangle get_hitBox();
		::Dynamic get_hitBox_dyn();

		bool checkCollisionWithTile(int tileType,Float tileX,Float tileY);
		::Dynamic checkCollisionWithTile_dyn();

		 ::CollisionDirection directionDefinition(Float tileX,Float tileY);
		::Dynamic directionDefinition_dyn();

		void doCollisionWithTile( ::CollisionDirection direction,Float tileX,Float tileY);
		::Dynamic doCollisionWithTile_dyn();

		virtual void doCollisionsWithTiles(::Array< ::Dynamic> level);
		::Dynamic doCollisionsWithTiles_dyn();

		 ::CollisionDirection get_collisionDirection();
		::Dynamic get_collisionDirection_dyn();

};


#endif /* INCLUDED_Unit */ 
